
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008390  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08008528  08008528  00018528  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d0  080087d0  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  080087d0  080087d0  000187d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087d8  080087d8  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d8  080087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080087dc  080087dc  000187dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  080087e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001418  2000002c  0800880c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001444  0800880c  00021444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012d00  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032b6  00000000  00000000  00032d9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00036058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ac1  00000000  00000000  00036de0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b894  00000000  00000000  000378a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000110d3  00000000  00000000  00053135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abcc8  00000000  00000000  00064208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038fc  00000000  00000000  0010fed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001137cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008510 	.word	0x08008510

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	08008510 	.word	0x08008510

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000804:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000808:	f000 b970 	b.w	8000aec <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9e08      	ldr	r6, [sp, #32]
 800082a:	460d      	mov	r5, r1
 800082c:	4604      	mov	r4, r0
 800082e:	460f      	mov	r7, r1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d14a      	bne.n	80008ca <__udivmoddi4+0xa6>
 8000834:	428a      	cmp	r2, r1
 8000836:	4694      	mov	ip, r2
 8000838:	d965      	bls.n	8000906 <__udivmoddi4+0xe2>
 800083a:	fab2 f382 	clz	r3, r2
 800083e:	b143      	cbz	r3, 8000852 <__udivmoddi4+0x2e>
 8000840:	fa02 fc03 	lsl.w	ip, r2, r3
 8000844:	f1c3 0220 	rsb	r2, r3, #32
 8000848:	409f      	lsls	r7, r3
 800084a:	fa20 f202 	lsr.w	r2, r0, r2
 800084e:	4317      	orrs	r7, r2
 8000850:	409c      	lsls	r4, r3
 8000852:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000856:	fa1f f58c 	uxth.w	r5, ip
 800085a:	fbb7 f1fe 	udiv	r1, r7, lr
 800085e:	0c22      	lsrs	r2, r4, #16
 8000860:	fb0e 7711 	mls	r7, lr, r1, r7
 8000864:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000868:	fb01 f005 	mul.w	r0, r1, r5
 800086c:	4290      	cmp	r0, r2
 800086e:	d90a      	bls.n	8000886 <__udivmoddi4+0x62>
 8000870:	eb1c 0202 	adds.w	r2, ip, r2
 8000874:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000878:	f080 811c 	bcs.w	8000ab4 <__udivmoddi4+0x290>
 800087c:	4290      	cmp	r0, r2
 800087e:	f240 8119 	bls.w	8000ab4 <__udivmoddi4+0x290>
 8000882:	3902      	subs	r1, #2
 8000884:	4462      	add	r2, ip
 8000886:	1a12      	subs	r2, r2, r0
 8000888:	b2a4      	uxth	r4, r4
 800088a:	fbb2 f0fe 	udiv	r0, r2, lr
 800088e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000892:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000896:	fb00 f505 	mul.w	r5, r0, r5
 800089a:	42a5      	cmp	r5, r4
 800089c:	d90a      	bls.n	80008b4 <__udivmoddi4+0x90>
 800089e:	eb1c 0404 	adds.w	r4, ip, r4
 80008a2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008a6:	f080 8107 	bcs.w	8000ab8 <__udivmoddi4+0x294>
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	f240 8104 	bls.w	8000ab8 <__udivmoddi4+0x294>
 80008b0:	4464      	add	r4, ip
 80008b2:	3802      	subs	r0, #2
 80008b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	2100      	movs	r1, #0
 80008bc:	b11e      	cbz	r6, 80008c6 <__udivmoddi4+0xa2>
 80008be:	40dc      	lsrs	r4, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	e9c6 4300 	strd	r4, r3, [r6]
 80008c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0xbc>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f000 80ed 	beq.w	8000aae <__udivmoddi4+0x28a>
 80008d4:	2100      	movs	r1, #0
 80008d6:	e9c6 0500 	strd	r0, r5, [r6]
 80008da:	4608      	mov	r0, r1
 80008dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e0:	fab3 f183 	clz	r1, r3
 80008e4:	2900      	cmp	r1, #0
 80008e6:	d149      	bne.n	800097c <__udivmoddi4+0x158>
 80008e8:	42ab      	cmp	r3, r5
 80008ea:	d302      	bcc.n	80008f2 <__udivmoddi4+0xce>
 80008ec:	4282      	cmp	r2, r0
 80008ee:	f200 80f8 	bhi.w	8000ae2 <__udivmoddi4+0x2be>
 80008f2:	1a84      	subs	r4, r0, r2
 80008f4:	eb65 0203 	sbc.w	r2, r5, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	4617      	mov	r7, r2
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d0e2      	beq.n	80008c6 <__udivmoddi4+0xa2>
 8000900:	e9c6 4700 	strd	r4, r7, [r6]
 8000904:	e7df      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000906:	b902      	cbnz	r2, 800090a <__udivmoddi4+0xe6>
 8000908:	deff      	udf	#255	; 0xff
 800090a:	fab2 f382 	clz	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8090 	bne.w	8000a34 <__udivmoddi4+0x210>
 8000914:	1a8a      	subs	r2, r1, r2
 8000916:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091a:	fa1f fe8c 	uxth.w	lr, ip
 800091e:	2101      	movs	r1, #1
 8000920:	fbb2 f5f7 	udiv	r5, r2, r7
 8000924:	fb07 2015 	mls	r0, r7, r5, r2
 8000928:	0c22      	lsrs	r2, r4, #16
 800092a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800092e:	fb0e f005 	mul.w	r0, lr, r5
 8000932:	4290      	cmp	r0, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x124>
 8000936:	eb1c 0202 	adds.w	r2, ip, r2
 800093a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x122>
 8000940:	4290      	cmp	r0, r2
 8000942:	f200 80cb 	bhi.w	8000adc <__udivmoddi4+0x2b8>
 8000946:	4645      	mov	r5, r8
 8000948:	1a12      	subs	r2, r2, r0
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000950:	fb07 2210 	mls	r2, r7, r0, r2
 8000954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	45a6      	cmp	lr, r4
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x14e>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x14c>
 800096a:	45a6      	cmp	lr, r4
 800096c:	f200 80bb 	bhi.w	8000ae6 <__udivmoddi4+0x2c2>
 8000970:	4610      	mov	r0, r2
 8000972:	eba4 040e 	sub.w	r4, r4, lr
 8000976:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800097a:	e79f      	b.n	80008bc <__udivmoddi4+0x98>
 800097c:	f1c1 0720 	rsb	r7, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 fc07 	lsr.w	ip, r2, r7
 8000986:	ea4c 0c03 	orr.w	ip, ip, r3
 800098a:	fa05 f401 	lsl.w	r4, r5, r1
 800098e:	fa20 f307 	lsr.w	r3, r0, r7
 8000992:	40fd      	lsrs	r5, r7
 8000994:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000998:	4323      	orrs	r3, r4
 800099a:	fbb5 f8f9 	udiv	r8, r5, r9
 800099e:	fa1f fe8c 	uxth.w	lr, ip
 80009a2:	fb09 5518 	mls	r5, r9, r8, r5
 80009a6:	0c1c      	lsrs	r4, r3, #16
 80009a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ac:	fb08 f50e 	mul.w	r5, r8, lr
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	fa00 f001 	lsl.w	r0, r0, r1
 80009ba:	d90b      	bls.n	80009d4 <__udivmoddi4+0x1b0>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009c4:	f080 8088 	bcs.w	8000ad8 <__udivmoddi4+0x2b4>
 80009c8:	42a5      	cmp	r5, r4
 80009ca:	f240 8085 	bls.w	8000ad8 <__udivmoddi4+0x2b4>
 80009ce:	f1a8 0802 	sub.w	r8, r8, #2
 80009d2:	4464      	add	r4, ip
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	b29d      	uxth	r5, r3
 80009d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009dc:	fb09 4413 	mls	r4, r9, r3, r4
 80009e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x1da>
 80009ec:	eb1c 0404 	adds.w	r4, ip, r4
 80009f0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80009f4:	d26c      	bcs.n	8000ad0 <__udivmoddi4+0x2ac>
 80009f6:	45a6      	cmp	lr, r4
 80009f8:	d96a      	bls.n	8000ad0 <__udivmoddi4+0x2ac>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	4464      	add	r4, ip
 80009fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a02:	fba3 9502 	umull	r9, r5, r3, r2
 8000a06:	eba4 040e 	sub.w	r4, r4, lr
 8000a0a:	42ac      	cmp	r4, r5
 8000a0c:	46c8      	mov	r8, r9
 8000a0e:	46ae      	mov	lr, r5
 8000a10:	d356      	bcc.n	8000ac0 <__udivmoddi4+0x29c>
 8000a12:	d053      	beq.n	8000abc <__udivmoddi4+0x298>
 8000a14:	b156      	cbz	r6, 8000a2c <__udivmoddi4+0x208>
 8000a16:	ebb0 0208 	subs.w	r2, r0, r8
 8000a1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a22:	40ca      	lsrs	r2, r1
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	4317      	orrs	r7, r2
 8000a28:	e9c6 7400 	strd	r7, r4, [r6]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a34:	f1c3 0120 	rsb	r1, r3, #32
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a40:	fa25 f101 	lsr.w	r1, r5, r1
 8000a44:	409d      	lsls	r5, r3
 8000a46:	432a      	orrs	r2, r5
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a54:	fb07 1510 	mls	r5, r7, r0, r1
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a62:	428d      	cmp	r5, r1
 8000a64:	fa04 f403 	lsl.w	r4, r4, r3
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x258>
 8000a6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a72:	d22f      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a74:	428d      	cmp	r5, r1
 8000a76:	d92d      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a78:	3802      	subs	r0, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1b49      	subs	r1, r1, r5
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a84:	fb07 1115 	mls	r1, r7, r5, r1
 8000a88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a90:	4291      	cmp	r1, r2
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x282>
 8000a94:	eb1c 0202 	adds.w	r2, ip, r2
 8000a98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a9c:	d216      	bcs.n	8000acc <__udivmoddi4+0x2a8>
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d914      	bls.n	8000acc <__udivmoddi4+0x2a8>
 8000aa2:	3d02      	subs	r5, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a52      	subs	r2, r2, r1
 8000aa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aac:	e738      	b.n	8000920 <__udivmoddi4+0xfc>
 8000aae:	4631      	mov	r1, r6
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e708      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	e6e6      	b.n	8000886 <__udivmoddi4+0x62>
 8000ab8:	4610      	mov	r0, r2
 8000aba:	e6fb      	b.n	80008b4 <__udivmoddi4+0x90>
 8000abc:	4548      	cmp	r0, r9
 8000abe:	d2a9      	bcs.n	8000a14 <__udivmoddi4+0x1f0>
 8000ac0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	e7a3      	b.n	8000a14 <__udivmoddi4+0x1f0>
 8000acc:	4645      	mov	r5, r8
 8000ace:	e7ea      	b.n	8000aa6 <__udivmoddi4+0x282>
 8000ad0:	462b      	mov	r3, r5
 8000ad2:	e794      	b.n	80009fe <__udivmoddi4+0x1da>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	e7d1      	b.n	8000a7c <__udivmoddi4+0x258>
 8000ad8:	46d0      	mov	r8, sl
 8000ada:	e77b      	b.n	80009d4 <__udivmoddi4+0x1b0>
 8000adc:	3d02      	subs	r5, #2
 8000ade:	4462      	add	r2, ip
 8000ae0:	e732      	b.n	8000948 <__udivmoddi4+0x124>
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e70a      	b.n	80008fc <__udivmoddi4+0xd8>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e742      	b.n	8000972 <__udivmoddi4+0x14e>

08000aec <__aeabi_idiv0>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <tud_hid_ready>:

//--------------------------------------------------------------------+
// Inline Functions
//--------------------------------------------------------------------+
static inline bool tud_hid_ready(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  return tud_hid_n_ready(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f002 ff63 	bl	80039c0 <tud_hid_n_ready>
 8000afa:	4603      	mov	r3, r0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <tud_hid_keyboard_report>:
{
  return tud_hid_n_report(0, report_id, report, len);
}

static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, uint8_t keycode[6])
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	603a      	str	r2, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	71bb      	strb	r3, [r7, #6]
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000b10:	79ba      	ldrb	r2, [r7, #6]
 8000b12:	79f9      	ldrb	r1, [r7, #7]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2000      	movs	r0, #0
 8000b18:	f003 f80c 	bl	8003b34 <tud_hid_n_keyboard_report>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f000 ffba 	bl	8001aa4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f844 	bl	8000bbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f964 	bl	8000e00 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b38:	f000 f8a8 	bl	8000c8c <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b3c:	f000 f932 	bl	8000da4 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  keys_init(25, 0, 0);
 8000b40:	2200      	movs	r2, #0
 8000b42:	2100      	movs	r1, #0
 8000b44:	2019      	movs	r0, #25
 8000b46:	f000 fbfb 	bl	8001340 <keys_init>

  tud_init(BOARD_TUD_RHPORT);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f004 f8ee 	bl	8004d2c <tud_init>
  can_send_report = 1;
 8000b50:	4b16      	ldr	r3, [pc, #88]	; (8000bac <main+0x84>)
 8000b52:	2201      	movs	r2, #1
 8000b54:	701a      	strb	r2, [r3, #0]
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000b56:	2100      	movs	r1, #0
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b5c:	f004 f9fc 	bl	8004f58 <tud_task_ext>
}
 8000b60:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    tud_task();

    keys_loop();
 8000b62:	f000 fb23 	bl	80011ac <keys_loop>

    if (should_send_report && can_send_report && tud_hid_ready()) {
 8000b66:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <main+0x88>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0f3      	beq.n	8000b56 <main+0x2e>
 8000b6e:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <main+0x84>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0ef      	beq.n	8000b56 <main+0x2e>
 8000b76:	f7ff ffbb 	bl	8000af0 <tud_hid_ready>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d0ea      	beq.n	8000b56 <main+0x2e>
      if (tud_suspended()) {
 8000b80:	f004 f88a 	bl	8004c98 <tud_suspended>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d002      	beq.n	8000b90 <main+0x68>
        tud_remote_wakeup();
 8000b8a:	f004 f899 	bl	8004cc0 <tud_remote_wakeup>
 8000b8e:	e7e2      	b.n	8000b56 <main+0x2e>
      } else {
        can_send_report = 0;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <main+0x84>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	701a      	strb	r2, [r3, #0]
        should_send_report = 0;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <main+0x88>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(ITF_NUM_KEYBOARD, modifiers, keycodes);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <main+0x8c>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <main+0x90>)
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	2000      	movs	r0, #0
 8000ba6:	f7ff ffab 	bl	8000b00 <tud_hid_keyboard_report>
    tud_task();
 8000baa:	e7d4      	b.n	8000b56 <main+0x2e>
 8000bac:	200011f5 	.word	0x200011f5
 8000bb0:	200011f4 	.word	0x200011f4
 8000bb4:	200011f6 	.word	0x200011f6
 8000bb8:	200011f8 	.word	0x200011f8

08000bbc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b094      	sub	sp, #80	; 0x50
 8000bc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bc2:	f107 0320 	add.w	r3, r7, #32
 8000bc6:	2230      	movs	r2, #48	; 0x30
 8000bc8:	2100      	movs	r1, #0
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f007 fc65 	bl	800849a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd0:	f107 030c 	add.w	r3, r7, #12
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
 8000bd8:	605a      	str	r2, [r3, #4]
 8000bda:	609a      	str	r2, [r3, #8]
 8000bdc:	60da      	str	r2, [r3, #12]
 8000bde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be0:	2300      	movs	r3, #0
 8000be2:	60bb      	str	r3, [r7, #8]
 8000be4:	4b27      	ldr	r3, [pc, #156]	; (8000c84 <SystemClock_Config+0xc8>)
 8000be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be8:	4a26      	ldr	r2, [pc, #152]	; (8000c84 <SystemClock_Config+0xc8>)
 8000bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bee:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf0:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <SystemClock_Config+0xc8>)
 8000bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf8:	60bb      	str	r3, [r7, #8]
 8000bfa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	4b21      	ldr	r3, [pc, #132]	; (8000c88 <SystemClock_Config+0xcc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a20      	ldr	r2, [pc, #128]	; (8000c88 <SystemClock_Config+0xcc>)
 8000c06:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c0a:	6013      	str	r3, [r2, #0]
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <SystemClock_Config+0xcc>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c14:	607b      	str	r3, [r7, #4]
 8000c16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c22:	2302      	movs	r3, #2
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000c2c:	230d      	movs	r3, #13
 8000c2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c30:	2378      	movs	r3, #120	; 0x78
 8000c32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c38:	2305      	movs	r3, #5
 8000c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c3c:	f107 0320 	add.w	r3, r7, #32
 8000c40:	4618      	mov	r0, r3
 8000c42:	f001 ff75 	bl	8002b30 <HAL_RCC_OscConfig>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <SystemClock_Config+0x94>
    Error_Handler();
 8000c4c:	f000 fd3b 	bl	80016c6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c50:	230f      	movs	r3, #15
 8000c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c54:	2301      	movs	r3, #1
 8000c56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c66:	f107 030c 	add.w	r3, r7, #12
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f002 f9d7 	bl	8003020 <HAL_RCC_ClockConfig>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d001      	beq.n	8000c7c <SystemClock_Config+0xc0>
    Error_Handler();
 8000c78:	f000 fd25 	bl	80016c6 <Error_Handler>
  }
}
 8000c7c:	bf00      	nop
 8000c7e:	3750      	adds	r7, #80	; 0x50
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c92:	463b      	mov	r3, r7
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000c9e:	4b3e      	ldr	r3, [pc, #248]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000ca0:	4a3e      	ldr	r2, [pc, #248]	; (8000d9c <MX_ADC1_Init+0x110>)
 8000ca2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ca4:	4b3c      	ldr	r3, [pc, #240]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000caa:	4b3b      	ldr	r3, [pc, #236]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cb0:	4b39      	ldr	r3, [pc, #228]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cb6:	4b38      	ldr	r3, [pc, #224]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000cbc:	4b36      	ldr	r3, [pc, #216]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000cc4:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cca:	4b33      	ldr	r3, [pc, #204]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd0:	4b31      	ldr	r3, [pc, #196]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cd2:	4a33      	ldr	r2, [pc, #204]	; (8000da0 <MX_ADC1_Init+0x114>)
 8000cd4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cd6:	4b30      	ldr	r3, [pc, #192]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cde:	2205      	movs	r2, #5
 8000ce0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ce2:	4b2d      	ldr	r3, [pc, #180]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cea:	4b2b      	ldr	r3, [pc, #172]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cf0:	4829      	ldr	r0, [pc, #164]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000cf2:	f000 ff6d 	bl	8001bd0 <HAL_ADC_Init>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_ADC1_Init+0x74>
    Error_Handler();
 8000cfc:	f000 fce3 	bl	80016c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d00:	2303      	movs	r3, #3
 8000d02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d04:	2301      	movs	r3, #1
 8000d06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4821      	ldr	r0, [pc, #132]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000d12:	f001 f921 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_ADC1_Init+0x94>
    Error_Handler();
 8000d1c:	f000 fcd3 	bl	80016c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d20:	2304      	movs	r3, #4
 8000d22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d28:	463b      	mov	r3, r7
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	481a      	ldr	r0, [pc, #104]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000d2e:	f001 f913 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_ADC1_Init+0xb0>
    Error_Handler();
 8000d38:	f000 fcc5 	bl	80016c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d3c:	2305      	movs	r3, #5
 8000d3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d40:	2303      	movs	r3, #3
 8000d42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d44:	463b      	mov	r3, r7
 8000d46:	4619      	mov	r1, r3
 8000d48:	4813      	ldr	r0, [pc, #76]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000d4a:	f001 f905 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_ADC1_Init+0xcc>
    Error_Handler();
 8000d54:	f000 fcb7 	bl	80016c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d58:	2306      	movs	r3, #6
 8000d5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d5c:	2304      	movs	r3, #4
 8000d5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d60:	463b      	mov	r3, r7
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000d66:	f001 f8f7 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_ADC1_Init+0xe8>
    Error_Handler();
 8000d70:	f000 fca9 	bl	80016c6 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d74:	2307      	movs	r3, #7
 8000d76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d78:	2305      	movs	r3, #5
 8000d7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d7c:	463b      	mov	r3, r7
 8000d7e:	4619      	mov	r1, r3
 8000d80:	4805      	ldr	r0, [pc, #20]	; (8000d98 <MX_ADC1_Init+0x10c>)
 8000d82:	f001 f8e9 	bl	8001f58 <HAL_ADC_ConfigChannel>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d001      	beq.n	8000d90 <MX_ADC1_Init+0x104>
    Error_Handler();
 8000d8c:	f000 fc9b 	bl	80016c6 <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8000d90:	bf00      	nop
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20000048 	.word	0x20000048
 8000d9c:	40012000 	.word	0x40012000
 8000da0:	0f000001 	.word	0x0f000001

08000da4 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000daa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dae:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000db0:	4b12      	ldr	r3, [pc, #72]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	2204      	movs	r2, #4
 8000db4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de8:	f001 fd93 	bl	8002912 <HAL_PCD_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8000df2:	f000 fc68 	bl	80016c6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000090 	.word	0x20000090

08000e00 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 030c 	add.w	r3, r7, #12
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b20      	ldr	r3, [pc, #128]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a1f      	ldr	r2, [pc, #124]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b1d      	ldr	r3, [pc, #116]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	607b      	str	r3, [r7, #4]
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a18      	ldr	r2, [pc, #96]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e3c:	f043 0301 	orr.w	r3, r3, #1
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b16      	ldr	r3, [pc, #88]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0301 	and.w	r3, r3, #1
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	603b      	str	r3, [r7, #0]
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a11      	ldr	r2, [pc, #68]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e58:	f043 0302 	orr.w	r3, r3, #2
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b0f      	ldr	r3, [pc, #60]	; (8000e9c <MX_GPIO_Init+0x9c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	603b      	str	r3, [r7, #0]
 8000e68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e70:	480b      	ldr	r0, [pc, #44]	; (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e72:	f001 fd35 	bl	80028e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000e76:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e88:	f107 030c 	add.w	r3, r7, #12
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4804      	ldr	r0, [pc, #16]	; (8000ea0 <MX_GPIO_Init+0xa0>)
 8000e90:	f001 fba2 	bl	80025d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020400 	.word	0x40020400
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <update_key_state>:

/* USER CODE BEGIN 4 */
uint8_t update_key_state(struct key *key) {
 8000ea8:	b5b0      	push	{r4, r5, r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = HAL_ADC_GetValue(&hadc1);
 8000eb0:	4875      	ldr	r0, [pc, #468]	; (8001088 <update_key_state+0x1e0>)
 8000eb2:	f001 f843 	bl	8001f3c <HAL_ADC_GetValue>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	b29b      	uxth	r3, r3
 8000eba:	81bb      	strh	r3, [r7, #12]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	88db      	ldrh	r3, [r3, #6]
 8000ec0:	2b13      	cmp	r3, #19
 8000ec2:	d82e      	bhi.n	8000f22 <update_key_state+0x7a>
    // Calibrate idle value
    key->calibration.idle_value = (1 - 0.6) * state.value + 0.6 * key->calibration.idle_value;
 8000ec4:	89bb      	ldrh	r3, [r7, #12]
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fc0a 	bl	80006e0 <__aeabi_i2d>
 8000ecc:	a366      	add	r3, pc, #408	; (adr r3, 8001068 <update_key_state+0x1c0>)
 8000ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed2:	f7ff f989 	bl	80001e8 <__aeabi_dmul>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	460b      	mov	r3, r1
 8000eda:	4614      	mov	r4, r2
 8000edc:	461d      	mov	r5, r3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	891b      	ldrh	r3, [r3, #8]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff fbfc 	bl	80006e0 <__aeabi_i2d>
 8000ee8:	a361      	add	r3, pc, #388	; (adr r3, 8001070 <update_key_state+0x1c8>)
 8000eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eee:	f7ff f97b 	bl	80001e8 <__aeabi_dmul>
 8000ef2:	4602      	mov	r2, r0
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	4620      	mov	r0, r4
 8000ef8:	4629      	mov	r1, r5
 8000efa:	f7ff faa5 	bl	8000448 <__adddf3>
 8000efe:	4602      	mov	r2, r0
 8000f00:	460b      	mov	r3, r1
 8000f02:	4610      	mov	r0, r2
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fc55 	bl	80007b4 <__aeabi_d2uiz>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	811a      	strh	r2, [r3, #8]
    key->calibration.cycles_count++;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	88db      	ldrh	r3, [r3, #6]
 8000f16:	3301      	adds	r3, #1
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	80da      	strh	r2, [r3, #6]

    return 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	e09e      	b.n	8001060 <update_key_state+0x1b8>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000f22:	89ba      	ldrh	r2, [r7, #12]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	891b      	ldrh	r3, [r3, #8]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d929      	bls.n	8000f80 <update_key_state+0xd8>
    // opti possible sur float
    key->calibration.idle_value = (1 - 0.8) * state.value + 0.8 * key->calibration.idle_value;
 8000f2c:	89bb      	ldrh	r3, [r7, #12]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fbd6 	bl	80006e0 <__aeabi_i2d>
 8000f34:	a350      	add	r3, pc, #320	; (adr r3, 8001078 <update_key_state+0x1d0>)
 8000f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3a:	f7ff f955 	bl	80001e8 <__aeabi_dmul>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	460b      	mov	r3, r1
 8000f42:	4614      	mov	r4, r2
 8000f44:	461d      	mov	r5, r3
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	891b      	ldrh	r3, [r3, #8]
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff fbc8 	bl	80006e0 <__aeabi_i2d>
 8000f50:	a34b      	add	r3, pc, #300	; (adr r3, 8001080 <update_key_state+0x1d8>)
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	f7ff f947 	bl	80001e8 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4620      	mov	r0, r4
 8000f60:	4629      	mov	r1, r5
 8000f62:	f7ff fa71 	bl	8000448 <__adddf3>
 8000f66:	4602      	mov	r2, r0
 8000f68:	460b      	mov	r3, r1
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	f7ff fc21 	bl	80007b4 <__aeabi_d2uiz>
 8000f72:	4603      	mov	r3, r0
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	811a      	strh	r2, [r3, #8]
    state.value = key->calibration.idle_value;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	891b      	ldrh	r3, [r3, #8]
 8000f7e:	81bb      	strh	r3, [r7, #12]
  }

  // maybe deactivate when graph
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	89db      	ldrh	r3, [r3, #14]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d112      	bne.n	8000fae <update_key_state+0x106>
 8000f88:	89bb      	ldrh	r3, [r7, #12]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	891b      	ldrh	r3, [r3, #8]
 8000f90:	3b0a      	subs	r3, #10
 8000f92:	429a      	cmp	r2, r3
 8000f94:	db0b      	blt.n	8000fae <update_key_state+0x106>
    // maybe have an idle state and counter (if 5 cycle without changes, do nothing)
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	785b      	ldrb	r3, [r3, #1]
 8000f9a:	2b0e      	cmp	r3, #14
 8000f9c:	d901      	bls.n	8000fa2 <update_key_state+0xfa>
      return 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e05e      	b.n	8001060 <update_key_state+0x1b8>
    }
    key->idle_counter++;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	785b      	ldrb	r3, [r3, #1]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	705a      	strb	r2, [r3, #1]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000fae:	89bb      	ldrh	r3, [r7, #12]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	891b      	ldrh	r3, [r3, #8]
 8000fb6:	3b0a      	subs	r3, #10
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	db02      	blt.n	8000fc2 <update_key_state+0x11a>
    state.distance = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	81fb      	strh	r3, [r7, #14]
 8000fc0:	e008      	b.n	8000fd4 <update_key_state+0x12c>
  } else {
    state.distance = key->calibration.idle_value - state.value;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	891a      	ldrh	r2, [r3, #8]
 8000fc6:	89bb      	ldrh	r3, [r7, #12]
 8000fc8:	1ad3      	subs	r3, r2, r3
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	81fb      	strh	r3, [r7, #14]
    key->idle_counter = 0;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	705a      	strb	r2, [r3, #1]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000fd4:	89fa      	ldrh	r2, [r7, #14]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	895b      	ldrh	r3, [r3, #10]
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d902      	bls.n	8000fe4 <update_key_state+0x13c>
    key->calibration.max_distance = state.distance;
 8000fde:	89fa      	ldrh	r2, [r7, #14]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	815a      	strh	r2, [r3, #10]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	895b      	ldrh	r3, [r3, #10]
 8000fec:	3b28      	subs	r3, #40	; 0x28
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	db02      	blt.n	8000ff8 <update_key_state+0x150>
    state.distance = key->calibration.max_distance;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	895b      	ldrh	r3, [r3, #10]
 8000ff6:	81fb      	strh	r3, [r7, #14]
  }

  // Map distance in percentages
  state.distance_percentage = (state.distance * 100) / key->calibration.max_distance;
 8000ff8:	89fb      	ldrh	r3, [r7, #14]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	2364      	movs	r3, #100	; 0x64
 8000ffe:	fb02 f303 	mul.w	r3, r2, r3
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	8952      	ldrh	r2, [r2, #10]
 8001006:	fb93 f3f2 	sdiv	r3, r3, r2
 800100a:	b29b      	uxth	r3, r3
 800100c:	823b      	strh	r3, [r7, #16]

  // Update velocity
  state.velocity = state.distance_percentage - key->state.distance_percentage;
 800100e:	8a3a      	ldrh	r2, [r7, #16]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	8a1b      	ldrh	r3, [r3, #16]
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	b29b      	uxth	r3, r3
 8001018:	b21b      	sxth	r3, r3
 800101a:	827b      	strh	r3, [r7, #18]

  // Update Acceleration
  state.acceleration = (state.velocity - key->state.velocity) / 2;
 800101c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001020:	461a      	mov	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	0fda      	lsrs	r2, r3, #31
 800102c:	4413      	add	r3, r2
 800102e:	105b      	asrs	r3, r3, #1
 8001030:	b21b      	sxth	r3, r3
 8001032:	82bb      	strh	r3, [r7, #20]

  // Update jerk
  state.jerk = (state.acceleration - key->state.acceleration) / 3;
 8001034:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	4a12      	ldr	r2, [pc, #72]	; (800108c <update_key_state+0x1e4>)
 8001044:	fb82 1203 	smull	r1, r2, r2, r3
 8001048:	17db      	asrs	r3, r3, #31
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	b21b      	sxth	r3, r3
 800104e:	82fb      	strh	r3, [r7, #22]

  key->state = state;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	330c      	adds	r3, #12
 8001054:	f107 020c 	add.w	r2, r7, #12
 8001058:	ca07      	ldmia	r2, {r0, r1, r2}
 800105a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  return 1;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bdb0      	pop	{r4, r5, r7, pc}
 8001068:	9999999a 	.word	0x9999999a
 800106c:	3fd99999 	.word	0x3fd99999
 8001070:	33333333 	.word	0x33333333
 8001074:	3fe33333 	.word	0x3fe33333
 8001078:	99999998 	.word	0x99999998
 800107c:	3fc99999 	.word	0x3fc99999
 8001080:	9999999a 	.word	0x9999999a
 8001084:	3fe99999 	.word	0x3fe99999
 8001088:	20000048 	.word	0x20000048
 800108c:	55555556 	.word	0x55555556

08001090 <update_key>:

void update_key(struct key *key) {
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ff05 	bl	8000ea8 <update_key_state>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d078      	beq.n	8001196 <update_key+0x106>
   * |     |                    |
   * |-----|                    -
   *
   */

  uint32_t now = HAL_GetTick();
 80010a4:	f000 fd64 	bl	8001b70 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]
  // uint8_t is_ready_to_trigger = key->actuation.triggered_at + MIN_TIME_BETWEEN_EVENTS < now;
  // uint8_t has_moved_more_than_min = abs(key->state.distance_percentage - key->actuation.changed_at) > MIN_MOVEMENT_BETWEEN_EVENTS;
  uint8_t is_after_trigger_offset = key->state.distance_percentage > key->actuation.trigger_offset;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8a1a      	ldrh	r2, [r3, #16]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	8b9b      	ldrh	r3, [r3, #28]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	bf8c      	ite	hi
 80010b6:	2301      	movhi	r3, #1
 80010b8:	2300      	movls	r3, #0
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	72fb      	strb	r3, [r7, #11]
  uint8_t is_before_reset_offset = key->state.distance_percentage < key->actuation.trigger_offset - MIN_MOVEMENT_BETWEEN_EVENTS;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	8a1b      	ldrh	r3, [r3, #16]
 80010c2:	461a      	mov	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	8b9b      	ldrh	r3, [r3, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	429a      	cmp	r2, r3
 80010cc:	bfb4      	ite	lt
 80010ce:	2301      	movlt	r3, #1
 80010d0:	2300      	movge	r3, #0
 80010d2:	b2db      	uxtb	r3, r3
 80010d4:	72bb      	strb	r3, [r7, #10]

  switch (key->actuation.status) {
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	7e1b      	ldrb	r3, [r3, #24]
 80010da:	2b04      	cmp	r3, #4
 80010dc:	d862      	bhi.n	80011a4 <update_key+0x114>
 80010de:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <update_key+0x54>)
 80010e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e4:	080010f9 	.word	0x080010f9
 80010e8:	080010f9 	.word	0x080010f9
 80010ec:	0800112b 	.word	0x0800112b
 80010f0:	08001165 	.word	0x08001165
 80010f4:	0800117b 	.word	0x0800117b

  case STATUS_RESET:
  case STATUS_RESET_AFTER_TAP: // can be degagé si on stocke le keycode index dans la key et qu'on le cible au reset
    // if reset, can be triggered or tap
    // if (has_moved_more_than_min && is_after_trigger_offset) {
    if (is_after_trigger_offset) {
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d04d      	beq.n	800119a <update_key+0x10a>
      if (key->has_tap_layer) {
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	791b      	ldrb	r3, [r3, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <update_key+0x7e>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2202      	movs	r2, #2
 800110a:	761a      	strb	r2, [r3, #24]
 800110c:	e005      	b.n	800111a <update_key+0x8a>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2204      	movs	r2, #4
 8001112:	761a      	strb	r2, [r3, #24]
        handle_keycodes(key);
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f000 f993 	bl	8001440 <handle_keycodes>
      }
      key->actuation.changed_at = key->state.distance_percentage;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	8a1a      	ldrh	r2, [r3, #16]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	835a      	strh	r2, [r3, #26]
      key->actuation.triggered_at = now;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	68fa      	ldr	r2, [r7, #12]
 8001126:	625a      	str	r2, [r3, #36]	; 0x24
    }
    break;
 8001128:	e037      	b.n	800119a <update_key+0x10a>

  case STATUS_MIGHT_BE_TAP:
    // if might be tap, can be tap or triggered
    if (is_before_reset_offset && now - key->actuation.triggered_at <= TAP_TIMEOUT) {
 800112a:	7abb      	ldrb	r3, [r7, #10]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d00c      	beq.n	800114a <update_key+0xba>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b5a      	cmp	r3, #90	; 0x5a
 800113a:	d806      	bhi.n	800114a <update_key+0xba>
      key->actuation.status = STATUS_TAP;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2203      	movs	r2, #3
 8001140:	761a      	strb	r2, [r3, #24]
      handle_keycodes(key);
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f000 f97c 	bl	8001440 <handle_keycodes>
    } else if (now - key->actuation.triggered_at > TAP_TIMEOUT) {
      key->actuation.status = STATUS_TRIGGERED;
      handle_keycodes(key);
    }
    break;
 8001148:	e029      	b.n	800119e <update_key+0x10e>
    } else if (now - key->actuation.triggered_at > TAP_TIMEOUT) {
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b5a      	cmp	r3, #90	; 0x5a
 8001154:	d923      	bls.n	800119e <update_key+0x10e>
      key->actuation.status = STATUS_TRIGGERED;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2204      	movs	r2, #4
 800115a:	761a      	strb	r2, [r3, #24]
      handle_keycodes(key);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f96f 	bl	8001440 <handle_keycodes>
    break;
 8001162:	e01c      	b.n	800119e <update_key+0x10e>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET_AFTER_TAP;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	761a      	strb	r2, [r3, #24]
    key->actuation.changed_at = key->state.distance_percentage;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	8a1a      	ldrh	r2, [r3, #16]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	835a      	strh	r2, [r3, #26]
    handle_keycodes(key);
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f000 f964 	bl	8001440 <handle_keycodes>
    break;
 8001178:	e014      	b.n	80011a4 <update_key+0x114>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 800117a:	7abb      	ldrb	r3, [r7, #10]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d010      	beq.n	80011a2 <update_key+0x112>
      key->actuation.status = STATUS_RESET;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	761a      	strb	r2, [r3, #24]
      key->actuation.changed_at = key->state.distance_percentage;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	8a1a      	ldrh	r2, [r3, #16]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	835a      	strh	r2, [r3, #26]
      handle_keycodes(key);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f000 f956 	bl	8001440 <handle_keycodes>
    }
    break;
 8001194:	e005      	b.n	80011a2 <update_key+0x112>
    return;
 8001196:	bf00      	nop
 8001198:	e004      	b.n	80011a4 <update_key+0x114>
    break;
 800119a:	bf00      	nop
 800119c:	e002      	b.n	80011a4 <update_key+0x114>
    break;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <update_key+0x114>
    break;
 80011a2:	bf00      	nop
  }
}
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop

080011ac <keys_loop>:

void keys_loop() {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80011b2:	2300      	movs	r3, #0
 80011b4:	71fb      	strb	r3, [r7, #7]
 80011b6:	e051      	b.n	800125c <keys_loop+0xb0>
    for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80011b8:	2300      	movs	r3, #0
 80011ba:	71bb      	strb	r3, [r7, #6]
 80011bc:	e013      	b.n	80011e6 <keys_loop+0x3a>
      HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 80011be:	79bb      	ldrb	r3, [r7, #6]
 80011c0:	4a2a      	ldr	r2, [pc, #168]	; (800126c <keys_loop+0xc0>)
 80011c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c6:	b299      	uxth	r1, r3
 80011c8:	79fa      	ldrb	r2, [r7, #7]
 80011ca:	79bb      	ldrb	r3, [r7, #6]
 80011cc:	fa42 f303 	asr.w	r3, r2, r3
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	f003 0301 	and.w	r3, r3, #1
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	461a      	mov	r2, r3
 80011da:	4825      	ldr	r0, [pc, #148]	; (8001270 <keys_loop+0xc4>)
 80011dc:	f001 fb80 	bl	80028e0 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	3301      	adds	r3, #1
 80011e4:	71bb      	strb	r3, [r7, #6]
 80011e6:	79bb      	ldrb	r3, [r7, #6]
 80011e8:	2b03      	cmp	r3, #3
 80011ea:	d9e8      	bls.n	80011be <keys_loop+0x12>
    }

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	717b      	strb	r3, [r7, #5]
 80011f0:	e02b      	b.n	800124a <keys_loop+0x9e>
      HAL_ADC_Start(&hadc1);
 80011f2:	4820      	ldr	r0, [pc, #128]	; (8001274 <keys_loop+0xc8>)
 80011f4:	f000 fd30 	bl	8001c58 <HAL_ADC_Start>
      // opti possible adc channel
      HAL_ADC_PollForConversion(&hadc1, 1);
 80011f8:	2101      	movs	r1, #1
 80011fa:	481e      	ldr	r0, [pc, #120]	; (8001274 <keys_loop+0xc8>)
 80011fc:	f000 fe13 	bl	8001e26 <HAL_ADC_PollForConversion>

      if (keys[adc_channel][amux_channel].is_enabled == 1) {
 8001200:	7979      	ldrb	r1, [r7, #5]
 8001202:	79fb      	ldrb	r3, [r7, #7]
 8001204:	481c      	ldr	r0, [pc, #112]	; (8001278 <keys_loop+0xcc>)
 8001206:	461a      	mov	r2, r3
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	441a      	add	r2, r3
 800120c:	00d3      	lsls	r3, r2, #3
 800120e:	461a      	mov	r2, r3
 8001210:	460b      	mov	r3, r1
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	440b      	add	r3, r1
 8001216:	01db      	lsls	r3, r3, #7
 8001218:	4413      	add	r3, r2
 800121a:	4403      	add	r3, r0
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b01      	cmp	r3, #1
 8001220:	d110      	bne.n	8001244 <keys_loop+0x98>
        update_key(&keys[adc_channel][amux_channel]);
 8001222:	7979      	ldrb	r1, [r7, #5]
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	461a      	mov	r2, r3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	441a      	add	r2, r3
 800122c:	00d3      	lsls	r3, r2, #3
 800122e:	461a      	mov	r2, r3
 8001230:	460b      	mov	r3, r1
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	01db      	lsls	r3, r3, #7
 8001238:	4413      	add	r3, r2
 800123a:	4a0f      	ldr	r2, [pc, #60]	; (8001278 <keys_loop+0xcc>)
 800123c:	4413      	add	r3, r2
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ff26 	bl	8001090 <update_key>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001244:	797b      	ldrb	r3, [r7, #5]
 8001246:	3301      	adds	r3, #1
 8001248:	717b      	strb	r3, [r7, #5]
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	2b04      	cmp	r3, #4
 800124e:	d9d0      	bls.n	80011f2 <keys_loop+0x46>
      }
    }
    HAL_ADC_Stop(&hadc1);
 8001250:	4808      	ldr	r0, [pc, #32]	; (8001274 <keys_loop+0xc8>)
 8001252:	f000 fdb5 	bl	8001dc0 <HAL_ADC_Stop>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	3301      	adds	r3, #1
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2b0f      	cmp	r3, #15
 8001260:	d9aa      	bls.n	80011b8 <keys_loop+0xc>
  }
};
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	08008708 	.word	0x08008708
 8001270:	40020400 	.word	0x40020400
 8001274:	20000048 	.word	0x20000048
 8001278:	20000574 	.word	0x20000574

0800127c <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t col, uint16_t trigger_offset, uint16_t rapid_trigger_offset, uint8_t is_continuous_rapid_trigger_enabled) {
 800127c:	b490      	push	{r4, r7}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	4604      	mov	r4, r0
 8001284:	4608      	mov	r0, r1
 8001286:	4611      	mov	r1, r2
 8001288:	461a      	mov	r2, r3
 800128a:	4623      	mov	r3, r4
 800128c:	71fb      	strb	r3, [r7, #7]
 800128e:	4603      	mov	r3, r0
 8001290:	71bb      	strb	r3, [r7, #6]
 8001292:	460b      	mov	r3, r1
 8001294:	717b      	strb	r3, [r7, #5]
 8001296:	4613      	mov	r3, r2
 8001298:	713b      	strb	r3, [r7, #4]
  struct key *key = &keys[adc_channel][amux_channel];
 800129a:	79f9      	ldrb	r1, [r7, #7]
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	461a      	mov	r2, r3
 80012a0:	0092      	lsls	r2, r2, #2
 80012a2:	441a      	add	r2, r3
 80012a4:	00d3      	lsls	r3, r2, #3
 80012a6:	461a      	mov	r2, r3
 80012a8:	460b      	mov	r3, r1
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	440b      	add	r3, r1
 80012ae:	01db      	lsls	r3, r3, #7
 80012b0:	4413      	add	r3, r2
 80012b2:	4a21      	ldr	r2, [pc, #132]	; (8001338 <init_key+0xbc>)
 80012b4:	4413      	add	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

  key->is_enabled = 1;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
  key->has_tap_layer = keymaps[_TAP_LAYER][row][col] != ____;
 80012be:	797a      	ldrb	r2, [r7, #5]
 80012c0:	7939      	ldrb	r1, [r7, #4]
 80012c2:	481e      	ldr	r0, [pc, #120]	; (800133c <init_key+0xc0>)
 80012c4:	4613      	mov	r3, r2
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	1a9b      	subs	r3, r3, r2
 80012ca:	440b      	add	r3, r1
 80012cc:	334b      	adds	r3, #75	; 0x4b
 80012ce:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bf14      	ite	ne
 80012d6:	2301      	movne	r3, #1
 80012d8:	2300      	moveq	r3, #0
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	711a      	strb	r2, [r3, #4]
  key->modifier_bitmask = NO_MODIFIER_BITMASK;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2200      	movs	r2, #0
 80012e6:	715a      	strb	r2, [r3, #5]

  key->row = row;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	797a      	ldrb	r2, [r7, #5]
 80012ec:	709a      	strb	r2, [r3, #2]
  key->column = col;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	793a      	ldrb	r2, [r7, #4]
 80012f2:	70da      	strb	r2, [r3, #3]

  key->calibration.cycles_count = 0;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2200      	movs	r2, #0
 80012f8:	80da      	strh	r2, [r3, #6]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8001300:	811a      	strh	r2, [r3, #8]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001308:	815a      	strh	r2, [r3, #10]

  key->actuation.status = STATUS_RESET;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	761a      	strb	r2, [r3, #24]
  key->actuation.changed_at = 0;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	2200      	movs	r2, #0
 8001314:	835a      	strh	r2, [r3, #26]
  key->actuation.trigger_offset = trigger_offset;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	8b3a      	ldrh	r2, [r7, #24]
 800131a:	839a      	strh	r2, [r3, #28]
  key->actuation.rapid_trigger_offset = rapid_trigger_offset;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	8bba      	ldrh	r2, [r7, #28]
 8001320:	83da      	strh	r2, [r3, #30]
  key->actuation.is_continuous_rapid_trigger_enabled = is_continuous_rapid_trigger_enabled;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001328:	f883 2020 	strb.w	r2, [r3, #32]
}
 800132c:	bf00      	nop
 800132e:	3710      	adds	r7, #16
 8001330:	46bd      	mov	sp, r7
 8001332:	bc90      	pop	{r4, r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000574 	.word	0x20000574
 800133c:	080085dc 	.word	0x080085dc

08001340 <keys_init>:

void keys_init(uint16_t trigger_offset, uint16_t rapid_trigger_offset, uint8_t is_continuous_rapid_trigger_enabled) {
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b089      	sub	sp, #36	; 0x24
 8001344:	af04      	add	r7, sp, #16
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
 800134a:	460b      	mov	r3, r1
 800134c:	80bb      	strh	r3, [r7, #4]
 800134e:	4613      	mov	r3, r2
 8001350:	70fb      	strb	r3, [r7, #3]
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
 8001356:	e034      	b.n	80013c2 <keys_init+0x82>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8001358:	2300      	movs	r3, #0
 800135a:	73bb      	strb	r3, [r7, #14]
 800135c:	e02b      	b.n	80013b6 <keys_init+0x76>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	7bb9      	ldrb	r1, [r7, #14]
 8001362:	481c      	ldr	r0, [pc, #112]	; (80013d4 <keys_init+0x94>)
 8001364:	4613      	mov	r3, r2
 8001366:	011b      	lsls	r3, r3, #4
 8001368:	1a9b      	subs	r3, r3, r2
 800136a:	440b      	add	r3, r1
 800136c:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 8001370:	2bff      	cmp	r3, #255	; 0xff
 8001372:	d01d      	beq.n	80013b0 <keys_init+0x70>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col, trigger_offset, rapid_trigger_offset, is_continuous_rapid_trigger_enabled);
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	7bb9      	ldrb	r1, [r7, #14]
 8001378:	4816      	ldr	r0, [pc, #88]	; (80013d4 <keys_init+0x94>)
 800137a:	4613      	mov	r3, r2
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	1a9b      	subs	r3, r3, r2
 8001380:	440b      	add	r3, r1
 8001382:	f810 0013 	ldrb.w	r0, [r0, r3, lsl #1]
 8001386:	7bfa      	ldrb	r2, [r7, #15]
 8001388:	7bb9      	ldrb	r1, [r7, #14]
 800138a:	4c12      	ldr	r4, [pc, #72]	; (80013d4 <keys_init+0x94>)
 800138c:	4613      	mov	r3, r2
 800138e:	011b      	lsls	r3, r3, #4
 8001390:	1a9b      	subs	r3, r3, r2
 8001392:	440b      	add	r3, r1
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4423      	add	r3, r4
 8001398:	7859      	ldrb	r1, [r3, #1]
 800139a:	7bbc      	ldrb	r4, [r7, #14]
 800139c:	7bfa      	ldrb	r2, [r7, #15]
 800139e:	78fb      	ldrb	r3, [r7, #3]
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	88bb      	ldrh	r3, [r7, #4]
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	9300      	str	r3, [sp, #0]
 80013aa:	4623      	mov	r3, r4
 80013ac:	f7ff ff66 	bl	800127c <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	3301      	adds	r3, #1
 80013b4:	73bb      	strb	r3, [r7, #14]
 80013b6:	7bbb      	ldrb	r3, [r7, #14]
 80013b8:	2b0e      	cmp	r3, #14
 80013ba:	d9d0      	bls.n	800135e <keys_init+0x1e>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	3301      	adds	r3, #1
 80013c0:	73fb      	strb	r3, [r7, #15]
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	d9c7      	bls.n	8001358 <keys_init+0x18>
      }
    }
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	08008544 	.word	0x08008544

080013d8 <get_bitmask_for_modifier>:

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	3be0      	subs	r3, #224	; 0xe0
 80013e6:	2b07      	cmp	r3, #7
 80013e8:	d822      	bhi.n	8001430 <get_bitmask_for_modifier+0x58>
 80013ea:	a201      	add	r2, pc, #4	; (adr r2, 80013f0 <get_bitmask_for_modifier+0x18>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	08001411 	.word	0x08001411
 80013f4:	08001415 	.word	0x08001415
 80013f8:	08001419 	.word	0x08001419
 80013fc:	0800141d 	.word	0x0800141d
 8001400:	08001421 	.word	0x08001421
 8001404:	08001425 	.word	0x08001425
 8001408:	08001429 	.word	0x08001429
 800140c:	0800142d 	.word	0x0800142d
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8001410:	2301      	movs	r3, #1
 8001412:	e00e      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8001414:	2302      	movs	r3, #2
 8001416:	e00c      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 8001418:	2304      	movs	r3, #4
 800141a:	e00a      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 800141c:	2308      	movs	r3, #8
 800141e:	e008      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8001420:	2310      	movs	r3, #16
 8001422:	e006      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8001424:	2320      	movs	r3, #32
 8001426:	e004      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 8001428:	2340      	movs	r3, #64	; 0x40
 800142a:	e002      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 800142c:	2380      	movs	r3, #128	; 0x80
 800142e:	e000      	b.n	8001432 <get_bitmask_for_modifier+0x5a>
  default:
    return NO_MODIFIER_BITMASK;
 8001430:	2300      	movs	r3, #0
  }
}
 8001432:	4618      	mov	r0, r3
 8001434:	370c      	adds	r7, #12
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop

08001440 <handle_keycodes>:

void handle_keycodes(struct key *key) {
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint8_t row = key->row;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	789b      	ldrb	r3, [r3, #2]
 800144c:	72fb      	strb	r3, [r7, #11]
  uint8_t column = key->column;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	78db      	ldrb	r3, [r3, #3]
 8001452:	72bb      	strb	r3, [r7, #10]

  switch (key->actuation.status) {
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7e1b      	ldrb	r3, [r3, #24]
 8001458:	2b04      	cmp	r3, #4
 800145a:	f200 80e4 	bhi.w	8001626 <handle_keycodes+0x1e6>
 800145e:	a201      	add	r2, pc, #4	; (adr r2, 8001464 <handle_keycodes+0x24>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	080015b9 	.word	0x080015b9
 8001468:	0800156d 	.word	0x0800156d
 800146c:	08001627 	.word	0x08001627
 8001470:	080014fd 	.word	0x080014fd
 8001474:	08001479 	.word	0x08001479
  case STATUS_TRIGGERED:
    key->modifier_bitmask = get_bitmask_for_modifier(keymaps[_BASE_LAYER][row][column]);
 8001478:	7afa      	ldrb	r2, [r7, #11]
 800147a:	7ab9      	ldrb	r1, [r7, #10]
 800147c:	486c      	ldr	r0, [pc, #432]	; (8001630 <handle_keycodes+0x1f0>)
 800147e:	4613      	mov	r3, r2
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	1a9b      	subs	r3, r3, r2
 8001484:	440b      	add	r3, r1
 8001486:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800148a:	b2db      	uxtb	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff ffa3 	bl	80013d8 <get_bitmask_for_modifier>
 8001492:	4603      	mov	r3, r0
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	715a      	strb	r2, [r3, #5]
    if (key->modifier_bitmask != NO_MODIFIER_BITMASK) {
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	795b      	ldrb	r3, [r3, #5]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d00b      	beq.n	80014ba <handle_keycodes+0x7a>
      modifiers |= key->modifier_bitmask;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	795a      	ldrb	r2, [r3, #5]
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <handle_keycodes+0x1f4>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	b2da      	uxtb	r2, r3
 80014ae:	4b61      	ldr	r3, [pc, #388]	; (8001634 <handle_keycodes+0x1f4>)
 80014b0:	701a      	strb	r2, [r3, #0]
      should_send_report = 1;
 80014b2:	4b61      	ldr	r3, [pc, #388]	; (8001638 <handle_keycodes+0x1f8>)
 80014b4:	2201      	movs	r2, #1
 80014b6:	701a      	strb	r2, [r3, #0]
          should_send_report = 1;
          break;
        }
      }
    }
    break;
 80014b8:	e0b5      	b.n	8001626 <handle_keycodes+0x1e6>
      for (uint8_t i = 0; i < 6; i++) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
 80014be:	e019      	b.n	80014f4 <handle_keycodes+0xb4>
        if (keycodes[i] == 0) {
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
 80014c2:	4a5e      	ldr	r2, [pc, #376]	; (800163c <handle_keycodes+0x1fc>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d111      	bne.n	80014ee <handle_keycodes+0xae>
          keycodes[i] = keymaps[_BASE_LAYER][row][column];
 80014ca:	7afa      	ldrb	r2, [r7, #11]
 80014cc:	7ab9      	ldrb	r1, [r7, #10]
 80014ce:	4858      	ldr	r0, [pc, #352]	; (8001630 <handle_keycodes+0x1f0>)
 80014d0:	4613      	mov	r3, r2
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	1a9b      	subs	r3, r3, r2
 80014d6:	440b      	add	r3, r1
 80014d8:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	b2d1      	uxtb	r1, r2
 80014e0:	4a56      	ldr	r2, [pc, #344]	; (800163c <handle_keycodes+0x1fc>)
 80014e2:	54d1      	strb	r1, [r2, r3]
          should_send_report = 1;
 80014e4:	4b54      	ldr	r3, [pc, #336]	; (8001638 <handle_keycodes+0x1f8>)
 80014e6:	2201      	movs	r2, #1
 80014e8:	701a      	strb	r2, [r3, #0]
          break;
 80014ea:	bf00      	nop
    break;
 80014ec:	e09b      	b.n	8001626 <handle_keycodes+0x1e6>
      for (uint8_t i = 0; i < 6; i++) {
 80014ee:	7bfb      	ldrb	r3, [r7, #15]
 80014f0:	3301      	adds	r3, #1
 80014f2:	73fb      	strb	r3, [r7, #15]
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	2b05      	cmp	r3, #5
 80014f8:	d9e2      	bls.n	80014c0 <handle_keycodes+0x80>
    break;
 80014fa:	e094      	b.n	8001626 <handle_keycodes+0x1e6>

  case STATUS_TAP:
    key->modifier_bitmask = get_bitmask_for_modifier(keymaps[_TAP_LAYER][row][column]);
 80014fc:	7afa      	ldrb	r2, [r7, #11]
 80014fe:	7ab9      	ldrb	r1, [r7, #10]
 8001500:	484b      	ldr	r0, [pc, #300]	; (8001630 <handle_keycodes+0x1f0>)
 8001502:	4613      	mov	r3, r2
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	1a9b      	subs	r3, r3, r2
 8001508:	440b      	add	r3, r1
 800150a:	334b      	adds	r3, #75	; 0x4b
 800150c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	4618      	mov	r0, r3
 8001514:	f7ff ff60 	bl	80013d8 <get_bitmask_for_modifier>
 8001518:	4603      	mov	r3, r0
 800151a:	461a      	mov	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	715a      	strb	r2, [r3, #5]
    if (key->modifier_bitmask == NO_MODIFIER_BITMASK) {
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	795b      	ldrb	r3, [r3, #5]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d17d      	bne.n	8001624 <handle_keycodes+0x1e4>
      for (uint8_t i = 0; i < 6; i++) {
 8001528:	2300      	movs	r3, #0
 800152a:	73bb      	strb	r3, [r7, #14]
 800152c:	e01a      	b.n	8001564 <handle_keycodes+0x124>
        if (keycodes[i] == 0) {
 800152e:	7bbb      	ldrb	r3, [r7, #14]
 8001530:	4a42      	ldr	r2, [pc, #264]	; (800163c <handle_keycodes+0x1fc>)
 8001532:	5cd3      	ldrb	r3, [r2, r3]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d112      	bne.n	800155e <handle_keycodes+0x11e>
          keycodes[i] = keymaps[_TAP_LAYER][row][column];
 8001538:	7afa      	ldrb	r2, [r7, #11]
 800153a:	7ab9      	ldrb	r1, [r7, #10]
 800153c:	483c      	ldr	r0, [pc, #240]	; (8001630 <handle_keycodes+0x1f0>)
 800153e:	4613      	mov	r3, r2
 8001540:	011b      	lsls	r3, r3, #4
 8001542:	1a9b      	subs	r3, r3, r2
 8001544:	440b      	add	r3, r1
 8001546:	334b      	adds	r3, #75	; 0x4b
 8001548:	f830 2013 	ldrh.w	r2, [r0, r3, lsl #1]
 800154c:	7bbb      	ldrb	r3, [r7, #14]
 800154e:	b2d1      	uxtb	r1, r2
 8001550:	4a3a      	ldr	r2, [pc, #232]	; (800163c <handle_keycodes+0x1fc>)
 8001552:	54d1      	strb	r1, [r2, r3]
          should_send_report = 1;
 8001554:	4b38      	ldr	r3, [pc, #224]	; (8001638 <handle_keycodes+0x1f8>)
 8001556:	2201      	movs	r2, #1
 8001558:	701a      	strb	r2, [r3, #0]
          break;
 800155a:	bf00      	nop
        }
      }
    }
    break;
 800155c:	e062      	b.n	8001624 <handle_keycodes+0x1e4>
      for (uint8_t i = 0; i < 6; i++) {
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	3301      	adds	r3, #1
 8001562:	73bb      	strb	r3, [r7, #14]
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b05      	cmp	r3, #5
 8001568:	d9e1      	bls.n	800152e <handle_keycodes+0xee>
    break;
 800156a:	e05b      	b.n	8001624 <handle_keycodes+0x1e4>

  case STATUS_RESET_AFTER_TAP:
    if (key->modifier_bitmask == NO_MODIFIER_BITMASK) {
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	795b      	ldrb	r3, [r3, #5]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d11d      	bne.n	80015b0 <handle_keycodes+0x170>
      for (uint8_t i = 0; i < 6; i++) {
 8001574:	2300      	movs	r3, #0
 8001576:	737b      	strb	r3, [r7, #13]
 8001578:	e017      	b.n	80015aa <handle_keycodes+0x16a>
        if (keycodes[i] == keymaps[_TAP_LAYER][row][column]) {
 800157a:	7b7b      	ldrb	r3, [r7, #13]
 800157c:	4a2f      	ldr	r2, [pc, #188]	; (800163c <handle_keycodes+0x1fc>)
 800157e:	5cd3      	ldrb	r3, [r2, r3]
 8001580:	b299      	uxth	r1, r3
 8001582:	7afa      	ldrb	r2, [r7, #11]
 8001584:	7ab8      	ldrb	r0, [r7, #10]
 8001586:	4c2a      	ldr	r4, [pc, #168]	; (8001630 <handle_keycodes+0x1f0>)
 8001588:	4613      	mov	r3, r2
 800158a:	011b      	lsls	r3, r3, #4
 800158c:	1a9b      	subs	r3, r3, r2
 800158e:	4403      	add	r3, r0
 8001590:	334b      	adds	r3, #75	; 0x4b
 8001592:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001596:	4299      	cmp	r1, r3
 8001598:	d104      	bne.n	80015a4 <handle_keycodes+0x164>
          keycodes[i] = 0;
 800159a:	7b7b      	ldrb	r3, [r7, #13]
 800159c:	4a27      	ldr	r2, [pc, #156]	; (800163c <handle_keycodes+0x1fc>)
 800159e:	2100      	movs	r1, #0
 80015a0:	54d1      	strb	r1, [r2, r3]
          break;
 80015a2:	e005      	b.n	80015b0 <handle_keycodes+0x170>
      for (uint8_t i = 0; i < 6; i++) {
 80015a4:	7b7b      	ldrb	r3, [r7, #13]
 80015a6:	3301      	adds	r3, #1
 80015a8:	737b      	strb	r3, [r7, #13]
 80015aa:	7b7b      	ldrb	r3, [r7, #13]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d9e4      	bls.n	800157a <handle_keycodes+0x13a>
        }
      }
    }
    should_send_report = 1;
 80015b0:	4b21      	ldr	r3, [pc, #132]	; (8001638 <handle_keycodes+0x1f8>)
 80015b2:	2201      	movs	r2, #1
 80015b4:	701a      	strb	r2, [r3, #0]
    break;
 80015b6:	e036      	b.n	8001626 <handle_keycodes+0x1e6>

  case STATUS_RESET:
    if (key->modifier_bitmask != NO_MODIFIER_BITMASK) {
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	795b      	ldrb	r3, [r3, #5]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d010      	beq.n	80015e2 <handle_keycodes+0x1a2>
      modifiers &= ~key->modifier_bitmask;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	795b      	ldrb	r3, [r3, #5]
 80015c4:	b25b      	sxtb	r3, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	b25a      	sxtb	r2, r3
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <handle_keycodes+0x1f4>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	b25b      	sxtb	r3, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <handle_keycodes+0x1f4>)
 80015d8:	701a      	strb	r2, [r3, #0]
      key->modifier_bitmask = NO_MODIFIER_BITMASK;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	715a      	strb	r2, [r3, #5]
 80015e0:	e01c      	b.n	800161c <handle_keycodes+0x1dc>
    } else {
      for (uint8_t i = 0; i < 6; i++) {
 80015e2:	2300      	movs	r3, #0
 80015e4:	733b      	strb	r3, [r7, #12]
 80015e6:	e016      	b.n	8001616 <handle_keycodes+0x1d6>
        if (keycodes[i] == keymaps[_BASE_LAYER][row][column]) {
 80015e8:	7b3b      	ldrb	r3, [r7, #12]
 80015ea:	4a14      	ldr	r2, [pc, #80]	; (800163c <handle_keycodes+0x1fc>)
 80015ec:	5cd3      	ldrb	r3, [r2, r3]
 80015ee:	b299      	uxth	r1, r3
 80015f0:	7afa      	ldrb	r2, [r7, #11]
 80015f2:	7ab8      	ldrb	r0, [r7, #10]
 80015f4:	4c0e      	ldr	r4, [pc, #56]	; (8001630 <handle_keycodes+0x1f0>)
 80015f6:	4613      	mov	r3, r2
 80015f8:	011b      	lsls	r3, r3, #4
 80015fa:	1a9b      	subs	r3, r3, r2
 80015fc:	4403      	add	r3, r0
 80015fe:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
 8001602:	4299      	cmp	r1, r3
 8001604:	d104      	bne.n	8001610 <handle_keycodes+0x1d0>
          keycodes[i] = 0;
 8001606:	7b3b      	ldrb	r3, [r7, #12]
 8001608:	4a0c      	ldr	r2, [pc, #48]	; (800163c <handle_keycodes+0x1fc>)
 800160a:	2100      	movs	r1, #0
 800160c:	54d1      	strb	r1, [r2, r3]
          break;
 800160e:	e005      	b.n	800161c <handle_keycodes+0x1dc>
      for (uint8_t i = 0; i < 6; i++) {
 8001610:	7b3b      	ldrb	r3, [r7, #12]
 8001612:	3301      	adds	r3, #1
 8001614:	733b      	strb	r3, [r7, #12]
 8001616:	7b3b      	ldrb	r3, [r7, #12]
 8001618:	2b05      	cmp	r3, #5
 800161a:	d9e5      	bls.n	80015e8 <handle_keycodes+0x1a8>
        }
      }
    }
    should_send_report = 1;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <handle_keycodes+0x1f8>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
    break;
 8001622:	e000      	b.n	8001626 <handle_keycodes+0x1e6>
    break;
 8001624:	bf00      	nop
  }
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	080085dc 	.word	0x080085dc
 8001634:	200011f6 	.word	0x200011f6
 8001638:	200011f4 	.word	0x200011f4
 800163c:	200011f8 	.word	0x200011f8

08001640 <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	460a      	mov	r2, r1
 800164a:	71fb      	strb	r3, [r7, #7]
 800164c:	4613      	mov	r3, r2
 800164e:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TODO set a indicator for user
}
 8001650:	bf00      	nop
 8001652:	370c      	adds	r7, #12
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr

0800165c <tud_hid_report_complete_cb>:

// Invoked when sent REPORT successfully to host
// Application can use this to send the next report
// Note: For composite reports, report[0] is report ID
void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)report;
  (void)len;

  can_send_report = 1;
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <tud_hid_report_complete_cb+0x24>)
 800166e:	2201      	movs	r2, #1
 8001670:	701a      	strb	r2, [r3, #0]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	200011f5 	.word	0x200011f5

08001684 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	603b      	str	r3, [r7, #0]
 800168c:	4603      	mov	r3, r0
 800168e:	71fb      	strb	r3, [r7, #7]
 8001690:	460b      	mov	r3, r1
 8001692:	71bb      	strb	r3, [r7, #6]
 8001694:	4613      	mov	r3, r2
 8001696:	717b      	strb	r3, [r7, #5]
  (void)report_id;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 80016a6:	b480      	push	{r7}
 80016a8:	b083      	sub	sp, #12
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	603b      	str	r3, [r7, #0]
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
 80016b2:	460b      	mov	r3, r1
 80016b4:	71bb      	strb	r3, [r7, #6]
 80016b6:	4613      	mov	r3, r2
 80016b8:	717b      	strb	r3, [r7, #5]
  (void)report_id;
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016ca:	b672      	cpsid	i
}
 80016cc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80016ce:	e7fe      	b.n	80016ce <Error_Handler+0x8>

080016d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_MspInit+0x4c>)
 80016dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016de:	4a0f      	ldr	r2, [pc, #60]	; (800171c <HAL_MspInit+0x4c>)
 80016e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016e4:	6453      	str	r3, [r2, #68]	; 0x44
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_MspInit+0x4c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ee:	607b      	str	r3, [r7, #4]
 80016f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	603b      	str	r3, [r7, #0]
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_MspInit+0x4c>)
 80016f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fa:	4a08      	ldr	r2, [pc, #32]	; (800171c <HAL_MspInit+0x4c>)
 80016fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001700:	6413      	str	r3, [r2, #64]	; 0x40
 8001702:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_MspInit+0x4c>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170a:	603b      	str	r3, [r7, #0]
 800170c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	40023800 	.word	0x40023800

08001720 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08a      	sub	sp, #40	; 0x28
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001728:	f107 0314 	add.w	r3, r7, #20
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	60da      	str	r2, [r3, #12]
 8001736:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_ADC_MspInit+0x7c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d127      	bne.n	8001792 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	613b      	str	r3, [r7, #16]
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <HAL_ADC_MspInit+0x80>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	4a15      	ldr	r2, [pc, #84]	; (80017a0 <HAL_ADC_MspInit+0x80>)
 800174c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001750:	6453      	str	r3, [r2, #68]	; 0x44
 8001752:	4b13      	ldr	r3, [pc, #76]	; (80017a0 <HAL_ADC_MspInit+0x80>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001756:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_ADC_MspInit+0x80>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a0e      	ldr	r2, [pc, #56]	; (80017a0 <HAL_ADC_MspInit+0x80>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <HAL_ADC_MspInit+0x80>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0301 	and.w	r3, r3, #1
 8001776:	60fb      	str	r3, [r7, #12]
 8001778:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800177a:	23f8      	movs	r3, #248	; 0xf8
 800177c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800177e:	2303      	movs	r3, #3
 8001780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4619      	mov	r1, r3
 800178c:	4805      	ldr	r0, [pc, #20]	; (80017a4 <HAL_ADC_MspInit+0x84>)
 800178e:	f000 ff23 	bl	80025d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40012000 	.word	0x40012000
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40020000 	.word	0x40020000

080017a8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b08a      	sub	sp, #40	; 0x28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b0:	f107 0314 	add.w	r3, r7, #20
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
 80017b8:	605a      	str	r2, [r3, #4]
 80017ba:	609a      	str	r2, [r3, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80017c8:	d13a      	bne.n	8001840 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	613b      	str	r3, [r7, #16]
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a1d      	ldr	r2, [pc, #116]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	613b      	str	r3, [r7, #16]
 80017e4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017e6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ec:	2302      	movs	r3, #2
 80017ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f0:	2300      	movs	r3, #0
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017f4:	2303      	movs	r3, #3
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017f8:	230a      	movs	r3, #10
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fc:	f107 0314 	add.w	r3, r7, #20
 8001800:	4619      	mov	r1, r3
 8001802:	4812      	ldr	r0, [pc, #72]	; (800184c <HAL_PCD_MspInit+0xa4>)
 8001804:	f000 fee8 	bl	80025d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 800180a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800180c:	4a0e      	ldr	r2, [pc, #56]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 800180e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001812:	6353      	str	r3, [r2, #52]	; 0x34
 8001814:	2300      	movs	r3, #0
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	4b0b      	ldr	r3, [pc, #44]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	4a0a      	ldr	r2, [pc, #40]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 800181e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001822:	6453      	str	r3, [r2, #68]	; 0x44
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <HAL_PCD_MspInit+0xa0>)
 8001826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001828:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800182c:	60fb      	str	r3, [r7, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	2100      	movs	r1, #0
 8001834:	2043      	movs	r0, #67	; 0x43
 8001836:	f000 fe98 	bl	800256a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800183a:	2043      	movs	r0, #67	; 0x43
 800183c:	f000 feb1 	bl	80025a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001840:	bf00      	nop
 8001842:	3728      	adds	r7, #40	; 0x28
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	40020000 	.word	0x40020000

08001850 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001854:	e7fe      	b.n	8001854 <NMI_Handler+0x4>

08001856 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 800185a:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800185c:	e7fe      	b.n	800185c <HardFault_Handler+0x6>

0800185e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001862:	e7fe      	b.n	8001862 <MemManage_Handler+0x4>

08001864 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001868:	e7fe      	b.n	8001868 <BusFault_Handler+0x4>

0800186a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800186e:	e7fe      	b.n	800186e <UsageFault_Handler+0x4>

08001870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr

0800187e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
	...

0800189c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a0:	f000 f952 	bl	8001b48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80018a4:	4b03      	ldr	r3, [pc, #12]	; (80018b4 <SysTick_Handler+0x18>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	3301      	adds	r3, #1
 80018aa:	4a02      	ldr	r2, [pc, #8]	; (80018b4 <SysTick_Handler+0x18>)
 80018ac:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20001200 	.word	0x20001200

080018b8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 80018bc:	2000      	movs	r0, #0
 80018be:	f006 fb75 	bl	8007fac <dcd_int_handler>
	return;
 80018c2:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <SystemInit+0x20>)
 80018ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018d2:	4a05      	ldr	r2, [pc, #20]	; (80018e8 <SystemInit+0x20>)
 80018d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
 80018e6:	bf00      	nop
 80018e8:	e000ed00 	.word	0xe000ed00

080018ec <tud_descriptor_device_cb>:

        .bNumConfigurations = 0x01};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  return (uint8_t const *)&desc_device;
 80018f0:	4b02      	ldr	r3, [pc, #8]	; (80018fc <tud_descriptor_device_cb+0x10>)
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	08008728 	.word	0x08008728

08001900 <tud_hid_descriptor_report_cb>:
        TUD_HID_REPORT_DESC_KEYBOARD()};

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_hid_descriptor_report_cb(uint8_t instance) {
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  return desc_hid_keyboard_report;
 800190a:	4b03      	ldr	r3, [pc, #12]	; (8001918 <tud_hid_descriptor_report_cb+0x18>)
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	0800873c 	.word	0x0800873c

0800191c <tud_descriptor_configuration_cb>:
        TUD_HID_DESCRIPTOR(ITF_NUM_KEYBOARD, 0, HID_ITF_PROTOCOL_KEYBOARD, sizeof(desc_hid_keyboard_report), EPNUM_KEYBOARD, CFG_TUD_HID_EP_BUFSIZE, 10)};

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  (void)index; // for multiple configurations
  return desc_configuration;
 8001926:	4b03      	ldr	r3, [pc, #12]	; (8001934 <tud_descriptor_configuration_cb+0x18>)
}
 8001928:	4618      	mov	r0, r3
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	08008780 	.word	0x08008780

08001938 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b088      	sub	sp, #32
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	460a      	mov	r2, r1
 8001942:	71fb      	strb	r3, [r7, #7]
 8001944:	4613      	mov	r3, r2
 8001946:	80bb      	strh	r3, [r7, #4]
  (void)langid;
  size_t chr_count;

  if (index == 0) {
 8001948:	79fb      	ldrb	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d108      	bne.n	8001960 <tud_descriptor_string_cb+0x28>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 800194e:	4b3e      	ldr	r3, [pc, #248]	; (8001a48 <tud_descriptor_string_cb+0x110>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	881b      	ldrh	r3, [r3, #0]
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b3d      	ldr	r3, [pc, #244]	; (8001a4c <tud_descriptor_string_cb+0x114>)
 8001958:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
 800195e:	e026      	b.n	80019ae <tud_descriptor_string_cb+0x76>
  } else {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8001960:	79fb      	ldrb	r3, [r7, #7]
 8001962:	2b03      	cmp	r3, #3
 8001964:	d901      	bls.n	800196a <tud_descriptor_string_cb+0x32>
      return NULL;
 8001966:	2300      	movs	r3, #0
 8001968:	e06a      	b.n	8001a40 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 800196a:	79fb      	ldrb	r3, [r7, #7]
 800196c:	4a36      	ldr	r2, [pc, #216]	; (8001a48 <tud_descriptor_string_cb+0x110>)
 800196e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001972:	613b      	str	r3, [r7, #16]

    // Cap at max char
    chr_count = strlen(str);
 8001974:	6938      	ldr	r0, [r7, #16]
 8001976:	f7fe fc2f 	bl	80001d8 <strlen>
 800197a:	61f8      	str	r0, [r7, #28]
    if (chr_count > 31)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b1f      	cmp	r3, #31
 8001980:	d901      	bls.n	8001986 <tud_descriptor_string_cb+0x4e>
      chr_count = 31;
 8001982:	231f      	movs	r3, #31
 8001984:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (uint8_t i = 0; i < chr_count; i++) {
 8001986:	2300      	movs	r3, #0
 8001988:	76fb      	strb	r3, [r7, #27]
 800198a:	e00c      	b.n	80019a6 <tud_descriptor_string_cb+0x6e>
      _desc_str[1 + i] = str[i];
 800198c:	7efb      	ldrb	r3, [r7, #27]
 800198e:	693a      	ldr	r2, [r7, #16]
 8001990:	4413      	add	r3, r2
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	7efb      	ldrb	r3, [r7, #27]
 8001996:	3301      	adds	r3, #1
 8001998:	b291      	uxth	r1, r2
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <tud_descriptor_string_cb+0x114>)
 800199c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < chr_count; i++) {
 80019a0:	7efb      	ldrb	r3, [r7, #27]
 80019a2:	3301      	adds	r3, #1
 80019a4:	76fb      	strb	r3, [r7, #27]
 80019a6:	7efb      	ldrb	r3, [r7, #27]
 80019a8:	69fa      	ldr	r2, [r7, #28]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d8ee      	bhi.n	800198c <tud_descriptor_string_cb+0x54>
    }
  }

  switch (index) {
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d002      	beq.n	80019ba <tud_descriptor_string_cb+0x82>
 80019b4:	2b03      	cmp	r3, #3
 80019b6:	d009      	beq.n	80019cc <tud_descriptor_string_cb+0x94>
 80019b8:	e00b      	b.n	80019d2 <tud_descriptor_string_cb+0x9a>
  case STRID_LANGID:
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 80019ba:	4b23      	ldr	r3, [pc, #140]	; (8001a48 <tud_descriptor_string_cb+0x110>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	881b      	ldrh	r3, [r3, #0]
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	4b22      	ldr	r3, [pc, #136]	; (8001a4c <tud_descriptor_string_cb+0x114>)
 80019c4:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 80019c6:	2301      	movs	r3, #1
 80019c8:	61fb      	str	r3, [r7, #28]
    break;
 80019ca:	e02d      	b.n	8001a28 <tud_descriptor_string_cb+0xf0>

  case STRID_SERIAL:
    chr_count = 10;
 80019cc:	230a      	movs	r3, #10
 80019ce:	61fb      	str	r3, [r7, #28]
    break;
 80019d0:	e02a      	b.n	8001a28 <tud_descriptor_string_cb+0xf0>

  default:
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 80019d2:	79fb      	ldrb	r3, [r7, #7]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d901      	bls.n	80019dc <tud_descriptor_string_cb+0xa4>
      return NULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	e031      	b.n	8001a40 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4a1a      	ldr	r2, [pc, #104]	; (8001a48 <tud_descriptor_string_cb+0x110>)
 80019e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019e4:	60fb      	str	r3, [r7, #12]

    // Cap at max char
    chr_count = strlen(str);
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7fe fbf6 	bl	80001d8 <strlen>
 80019ec:	61f8      	str	r0, [r7, #28]
    size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 80019ee:	2320      	movs	r3, #32
 80019f0:	60bb      	str	r3, [r7, #8]
    if (chr_count > max_count)
 80019f2:	69fa      	ldr	r2, [r7, #28]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d901      	bls.n	80019fe <tud_descriptor_string_cb+0xc6>
      chr_count = max_count;
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (size_t i = 0; i < chr_count; i++) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	617b      	str	r3, [r7, #20]
 8001a02:	e00c      	b.n	8001a1e <tud_descriptor_string_cb+0xe6>
      _desc_str[1 + i] = str[i];
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781a      	ldrb	r2, [r3, #0]
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	b291      	uxth	r1, r2
 8001a12:	4a0e      	ldr	r2, [pc, #56]	; (8001a4c <tud_descriptor_string_cb+0x114>)
 8001a14:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < chr_count; i++) {
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	429a      	cmp	r2, r3
 8001a24:	d3ee      	bcc.n	8001a04 <tud_descriptor_string_cb+0xcc>
    }
    break;
 8001a26:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t)((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	005b      	lsls	r3, r3, #1
 8001a32:	b29b      	uxth	r3, r3
 8001a34:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001a38:	b29a      	uxth	r2, r3
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <tud_descriptor_string_cb+0x114>)
 8001a3c:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001a3e:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <tud_descriptor_string_cb+0x114>)
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	20001204 	.word	0x20001204

08001a50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a50:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a88 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a54:	f7ff ff38 	bl	80018c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a5a:	490d      	ldr	r1, [pc, #52]	; (8001a90 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a5c:	4a0d      	ldr	r2, [pc, #52]	; (8001a94 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a60:	e002      	b.n	8001a68 <LoopCopyDataInit>

08001a62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a66:	3304      	adds	r3, #4

08001a68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a6c:	d3f9      	bcc.n	8001a62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a6e:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a70:	4c0a      	ldr	r4, [pc, #40]	; (8001a9c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a74:	e001      	b.n	8001a7a <LoopFillZerobss>

08001a76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a78:	3204      	adds	r2, #4

08001a7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a7c:	d3fb      	bcc.n	8001a76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a7e:	f006 fd15 	bl	80084ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a82:	f7ff f851 	bl	8000b28 <main>
  bx  lr    
 8001a86:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001a88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a90:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001a94:	080087e0 	.word	0x080087e0
  ldr r2, =_sbss
 8001a98:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001a9c:	20001444 	.word	0x20001444

08001aa0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001aa0:	e7fe      	b.n	8001aa0 <ADC_IRQHandler>
	...

08001aa4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001aa8:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_Init+0x40>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0d      	ldr	r2, [pc, #52]	; (8001ae4 <HAL_Init+0x40>)
 8001aae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ab2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ab4:	4b0b      	ldr	r3, [pc, #44]	; (8001ae4 <HAL_Init+0x40>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a0a      	ldr	r2, [pc, #40]	; (8001ae4 <HAL_Init+0x40>)
 8001aba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001abe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac0:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_Init+0x40>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a07      	ldr	r2, [pc, #28]	; (8001ae4 <HAL_Init+0x40>)
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001acc:	2003      	movs	r0, #3
 8001ace:	f000 fd41 	bl	8002554 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad2:	200f      	movs	r0, #15
 8001ad4:	f000 f808 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad8:	f7ff fdfa 	bl	80016d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	40023c00 	.word	0x40023c00

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <HAL_InitTick+0x54>)
 8001af2:	681a      	ldr	r2, [r3, #0]
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <HAL_InitTick+0x58>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	4619      	mov	r1, r3
 8001afa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001afe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b02:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fd59 	bl	80025be <HAL_SYSTICK_Config>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e00e      	b.n	8001b34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2b0f      	cmp	r3, #15
 8001b1a:	d80a      	bhi.n	8001b32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b24:	f000 fd21 	bl	800256a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b28:	4a06      	ldr	r2, [pc, #24]	; (8001b44 <HAL_InitTick+0x5c>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e000      	b.n	8001b34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000018 	.word	0x20000018
 8001b44:	20000014 	.word	0x20000014

08001b48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_IncTick+0x20>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	461a      	mov	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_IncTick+0x24>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <HAL_IncTick+0x24>)
 8001b5a:	6013      	str	r3, [r2, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000018 	.word	0x20000018
 8001b6c:	20001248 	.word	0x20001248

08001b70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return uwTick;
 8001b74:	4b03      	ldr	r3, [pc, #12]	; (8001b84 <HAL_GetTick+0x14>)
 8001b76:	681b      	ldr	r3, [r3, #0]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	20001248 	.word	0x20001248

08001b88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b90:	f7ff ffee 	bl	8001b70 <HAL_GetTick>
 8001b94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001ba0:	d005      	beq.n	8001bae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ba2:	4b0a      	ldr	r3, [pc, #40]	; (8001bcc <HAL_Delay+0x44>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001bae:	bf00      	nop
 8001bb0:	f7ff ffde 	bl	8001b70 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d8f7      	bhi.n	8001bb0 <HAL_Delay+0x28>
  {
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20000018 	.word	0x20000018

08001bd0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e033      	b.n	8001c4e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fd96 	bl	8001720 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f003 0310 	and.w	r3, r3, #16
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d118      	bne.n	8001c40 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c16:	f023 0302 	bic.w	r3, r3, #2
 8001c1a:	f043 0202 	orr.w	r2, r3, #2
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f000 faca 	bl	80021bc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f023 0303 	bic.w	r3, r3, #3
 8001c36:	f043 0201 	orr.w	r2, r3, #1
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	641a      	str	r2, [r3, #64]	; 0x40
 8001c3e:	e001      	b.n	8001c44 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001c4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_ADC_Start+0x1a>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e097      	b.n	8001da2 <HAL_ADC_Start+0x14a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d018      	beq.n	8001cba <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689a      	ldr	r2, [r3, #8]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c98:	4b45      	ldr	r3, [pc, #276]	; (8001db0 <HAL_ADC_Start+0x158>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a45      	ldr	r2, [pc, #276]	; (8001db4 <HAL_ADC_Start+0x15c>)
 8001c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ca2:	0c9a      	lsrs	r2, r3, #18
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	4413      	add	r3, r2
 8001caa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cac:	e002      	b.n	8001cb4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	3b01      	subs	r3, #1
 8001cb2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f9      	bne.n	8001cae <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d15f      	bne.n	8001d88 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001cd0:	f023 0301 	bic.w	r3, r3, #1
 8001cd4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d007      	beq.n	8001cfa <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001cf2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d06:	d106      	bne.n	8001d16 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0c:	f023 0206 	bic.w	r2, r3, #6
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	645a      	str	r2, [r3, #68]	; 0x44
 8001d14:	e002      	b.n	8001d1c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_ADC_Start+0x160>)
 8001d26:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001d30:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 031f 	and.w	r3, r3, #31
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d129      	bne.n	8001da0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	e020      	b.n	8001da0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a16      	ldr	r2, [pc, #88]	; (8001dbc <HAL_ADC_Start+0x164>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d11b      	bne.n	8001da0 <HAL_ADC_Start+0x148>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d114      	bne.n	8001da0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	689a      	ldr	r2, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	e00b      	b.n	8001da0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f043 0210 	orr.w	r2, r3, #16
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d98:	f043 0201 	orr.w	r2, r3, #1
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001da0:	2300      	movs	r3, #0
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000
 8001db4:	431bde83 	.word	0x431bde83
 8001db8:	40012300 	.word	0x40012300
 8001dbc:	40012000 	.word	0x40012000

08001dc0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_ADC_Stop+0x16>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e021      	b.n	8001e1a <HAL_ADC_Stop+0x5a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	689a      	ldr	r2, [r3, #8]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f022 0201 	bic.w	r2, r2, #1
 8001dec:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d109      	bne.n	8001e10 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e04:	f023 0301 	bic.w	r3, r3, #1
 8001e08:	f043 0201 	orr.w	r2, r3, #1
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b084      	sub	sp, #16
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	6078      	str	r0, [r7, #4]
 8001e2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d113      	bne.n	8001e6c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e52:	d10b      	bne.n	8001e6c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f043 0220 	orr.w	r2, r3, #32
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e063      	b.n	8001f34 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001e6c:	f7ff fe80 	bl	8001b70 <HAL_GetTick>
 8001e70:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e72:	e021      	b.n	8001eb8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e7a:	d01d      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d007      	beq.n	8001e92 <HAL_ADC_PollForConversion+0x6c>
 8001e82:	f7ff fe75 	bl	8001b70 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	683a      	ldr	r2, [r7, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d212      	bcs.n	8001eb8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b02      	cmp	r3, #2
 8001e9e:	d00b      	beq.n	8001eb8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea4:	f043 0204 	orr.w	r2, r3, #4
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e03d      	b.n	8001f34 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0302 	and.w	r3, r3, #2
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d1d6      	bne.n	8001e74 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f06f 0212 	mvn.w	r2, #18
 8001ece:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d123      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d11f      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d006      	beq.n	8001f0e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d111      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d105      	bne.n	8001f32 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f043 0201 	orr.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001f32:	2300      	movs	r3, #0
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
	...

08001f58 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x1c>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e113      	b.n	800219c <HAL_ADC_ConfigChannel+0x244>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2b09      	cmp	r3, #9
 8001f82:	d925      	bls.n	8001fd0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68d9      	ldr	r1, [r3, #12]
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	461a      	mov	r2, r3
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	3b1e      	subs	r3, #30
 8001f9a:	2207      	movs	r2, #7
 8001f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa0:	43da      	mvns	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68d9      	ldr	r1, [r3, #12]
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	b29b      	uxth	r3, r3
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4403      	add	r3, r0
 8001fc2:	3b1e      	subs	r3, #30
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	e022      	b.n	8002016 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	6919      	ldr	r1, [r3, #16]
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4613      	mov	r3, r2
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	4413      	add	r3, r2
 8001fe4:	2207      	movs	r2, #7
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	400a      	ands	r2, r1
 8001ff2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	6919      	ldr	r1, [r3, #16]
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	4603      	mov	r3, r0
 8002008:	005b      	lsls	r3, r3, #1
 800200a:	4403      	add	r3, r0
 800200c:	409a      	lsls	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2b06      	cmp	r3, #6
 800201c:	d824      	bhi.n	8002068 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685a      	ldr	r2, [r3, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	3b05      	subs	r3, #5
 8002030:	221f      	movs	r2, #31
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	43da      	mvns	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	400a      	ands	r2, r1
 800203e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	4613      	mov	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	4413      	add	r3, r2
 8002058:	3b05      	subs	r3, #5
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	635a      	str	r2, [r3, #52]	; 0x34
 8002066:	e04c      	b.n	8002102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	2b0c      	cmp	r3, #12
 800206e:	d824      	bhi.n	80020ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	3b23      	subs	r3, #35	; 0x23
 8002082:	221f      	movs	r2, #31
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	43da      	mvns	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	400a      	ands	r2, r1
 8002090:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	b29b      	uxth	r3, r3
 800209e:	4618      	mov	r0, r3
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b23      	subs	r3, #35	; 0x23
 80020ac:	fa00 f203 	lsl.w	r2, r0, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	430a      	orrs	r2, r1
 80020b6:	631a      	str	r2, [r3, #48]	; 0x30
 80020b8:	e023      	b.n	8002102 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	3b41      	subs	r3, #65	; 0x41
 80020cc:	221f      	movs	r2, #31
 80020ce:	fa02 f303 	lsl.w	r3, r2, r3
 80020d2:	43da      	mvns	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	400a      	ands	r2, r1
 80020da:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	4618      	mov	r0, r3
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685a      	ldr	r2, [r3, #4]
 80020ee:	4613      	mov	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	4413      	add	r3, r2
 80020f4:	3b41      	subs	r3, #65	; 0x41
 80020f6:	fa00 f203 	lsl.w	r2, r0, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	430a      	orrs	r2, r1
 8002100:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <HAL_ADC_ConfigChannel+0x250>)
 8002104:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a28      	ldr	r2, [pc, #160]	; (80021ac <HAL_ADC_ConfigChannel+0x254>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d10f      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1d8>
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b12      	cmp	r3, #18
 8002116:	d10b      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a1d      	ldr	r2, [pc, #116]	; (80021ac <HAL_ADC_ConfigChannel+0x254>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d12b      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x23a>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a1c      	ldr	r2, [pc, #112]	; (80021b0 <HAL_ADC_ConfigChannel+0x258>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d003      	beq.n	800214c <HAL_ADC_ConfigChannel+0x1f4>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2b11      	cmp	r3, #17
 800214a:	d122      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_ADC_ConfigChannel+0x258>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d111      	bne.n	8002192 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800216e:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <HAL_ADC_ConfigChannel+0x25c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <HAL_ADC_ConfigChannel+0x260>)
 8002174:	fba2 2303 	umull	r2, r3, r2, r3
 8002178:	0c9a      	lsrs	r2, r3, #18
 800217a:	4613      	mov	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4413      	add	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002184:	e002      	b.n	800218c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	3b01      	subs	r3, #1
 800218a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1f9      	bne.n	8002186 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	40012300 	.word	0x40012300
 80021ac:	40012000 	.word	0x40012000
 80021b0:	10000012 	.word	0x10000012
 80021b4:	20000000 	.word	0x20000000
 80021b8:	431bde83 	.word	0x431bde83

080021bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021bc:	b480      	push	{r7}
 80021be:	b085      	sub	sp, #20
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c4:	4b79      	ldr	r3, [pc, #484]	; (80023ac <ADC_Init+0x1f0>)
 80021c6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685a      	ldr	r2, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	6859      	ldr	r1, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	021a      	lsls	r2, r3, #8
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	430a      	orrs	r2, r1
 8002204:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002214:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	6859      	ldr	r1, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689a      	ldr	r2, [r3, #8]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68da      	ldr	r2, [r3, #12]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	430a      	orrs	r2, r1
 8002248:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224e:	4a58      	ldr	r2, [pc, #352]	; (80023b0 <ADC_Init+0x1f4>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d022      	beq.n	800229a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002262:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6899      	ldr	r1, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	6899      	ldr	r1, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	430a      	orrs	r2, r1
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	e00f      	b.n	80022ba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	689a      	ldr	r2, [r3, #8]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 0202 	bic.w	r2, r2, #2
 80022c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6899      	ldr	r1, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	7e1b      	ldrb	r3, [r3, #24]
 80022d4:	005a      	lsls	r2, r3, #1
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	430a      	orrs	r2, r1
 80022dc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01b      	beq.n	8002320 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022f6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002306:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6859      	ldr	r1, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002312:	3b01      	subs	r3, #1
 8002314:	035a      	lsls	r2, r3, #13
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	e007      	b.n	8002330 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800232e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800233e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	3b01      	subs	r3, #1
 800234c:	051a      	lsls	r2, r3, #20
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	430a      	orrs	r2, r1
 8002354:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002364:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6899      	ldr	r1, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002372:	025a      	lsls	r2, r3, #9
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	430a      	orrs	r2, r1
 800237a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	689a      	ldr	r2, [r3, #8]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800238a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	6899      	ldr	r1, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
 8002396:	029a      	lsls	r2, r3, #10
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	430a      	orrs	r2, r1
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	40012300 	.word	0x40012300
 80023b0:	0f000001 	.word	0x0f000001

080023b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023c4:	4b0c      	ldr	r3, [pc, #48]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ca:	68ba      	ldr	r2, [r7, #8]
 80023cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023d0:	4013      	ands	r3, r2
 80023d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023e6:	4a04      	ldr	r2, [pc, #16]	; (80023f8 <__NVIC_SetPriorityGrouping+0x44>)
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	60d3      	str	r3, [r2, #12]
}
 80023ec:	bf00      	nop
 80023ee:	3714      	adds	r7, #20
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr
 80023f8:	e000ed00 	.word	0xe000ed00

080023fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002400:	4b04      	ldr	r3, [pc, #16]	; (8002414 <__NVIC_GetPriorityGrouping+0x18>)
 8002402:	68db      	ldr	r3, [r3, #12]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	f003 0307 	and.w	r3, r3, #7
}
 800240a:	4618      	mov	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	e000ed00 	.word	0xe000ed00

08002418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002426:	2b00      	cmp	r3, #0
 8002428:	db0b      	blt.n	8002442 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800242a:	79fb      	ldrb	r3, [r7, #7]
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	4907      	ldr	r1, [pc, #28]	; (8002450 <__NVIC_EnableIRQ+0x38>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	095b      	lsrs	r3, r3, #5
 8002438:	2001      	movs	r0, #1
 800243a:	fa00 f202 	lsl.w	r2, r0, r2
 800243e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002442:	bf00      	nop
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	e000e100 	.word	0xe000e100

08002454 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	6039      	str	r1, [r7, #0]
 800245e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	db0a      	blt.n	800247e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	b2da      	uxtb	r2, r3
 800246c:	490c      	ldr	r1, [pc, #48]	; (80024a0 <__NVIC_SetPriority+0x4c>)
 800246e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002472:	0112      	lsls	r2, r2, #4
 8002474:	b2d2      	uxtb	r2, r2
 8002476:	440b      	add	r3, r1
 8002478:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800247c:	e00a      	b.n	8002494 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	b2da      	uxtb	r2, r3
 8002482:	4908      	ldr	r1, [pc, #32]	; (80024a4 <__NVIC_SetPriority+0x50>)
 8002484:	79fb      	ldrb	r3, [r7, #7]
 8002486:	f003 030f 	and.w	r3, r3, #15
 800248a:	3b04      	subs	r3, #4
 800248c:	0112      	lsls	r2, r2, #4
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	440b      	add	r3, r1
 8002492:	761a      	strb	r2, [r3, #24]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	e000e100 	.word	0xe000e100
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b089      	sub	sp, #36	; 0x24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 0307 	and.w	r3, r3, #7
 80024ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	f1c3 0307 	rsb	r3, r3, #7
 80024c2:	2b04      	cmp	r3, #4
 80024c4:	bf28      	it	cs
 80024c6:	2304      	movcs	r3, #4
 80024c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3304      	adds	r3, #4
 80024ce:	2b06      	cmp	r3, #6
 80024d0:	d902      	bls.n	80024d8 <NVIC_EncodePriority+0x30>
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b03      	subs	r3, #3
 80024d6:	e000      	b.n	80024da <NVIC_EncodePriority+0x32>
 80024d8:	2300      	movs	r3, #0
 80024da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	43da      	mvns	r2, r3
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	401a      	ands	r2, r3
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	fa01 f303 	lsl.w	r3, r1, r3
 80024fa:	43d9      	mvns	r1, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002500:	4313      	orrs	r3, r2
         );
}
 8002502:	4618      	mov	r0, r3
 8002504:	3724      	adds	r7, #36	; 0x24
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
	...

08002510 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b082      	sub	sp, #8
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3b01      	subs	r3, #1
 800251c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002520:	d301      	bcc.n	8002526 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002522:	2301      	movs	r3, #1
 8002524:	e00f      	b.n	8002546 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002526:	4a0a      	ldr	r2, [pc, #40]	; (8002550 <SysTick_Config+0x40>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800252e:	210f      	movs	r1, #15
 8002530:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002534:	f7ff ff8e 	bl	8002454 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002538:	4b05      	ldr	r3, [pc, #20]	; (8002550 <SysTick_Config+0x40>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800253e:	4b04      	ldr	r3, [pc, #16]	; (8002550 <SysTick_Config+0x40>)
 8002540:	2207      	movs	r2, #7
 8002542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	e000e010 	.word	0xe000e010

08002554 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7ff ff29 	bl	80023b4 <__NVIC_SetPriorityGrouping>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800256a:	b580      	push	{r7, lr}
 800256c:	b086      	sub	sp, #24
 800256e:	af00      	add	r7, sp, #0
 8002570:	4603      	mov	r3, r0
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800257c:	f7ff ff3e 	bl	80023fc <__NVIC_GetPriorityGrouping>
 8002580:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	6978      	ldr	r0, [r7, #20]
 8002588:	f7ff ff8e 	bl	80024a8 <NVIC_EncodePriority>
 800258c:	4602      	mov	r2, r0
 800258e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f7ff ff5d 	bl	8002454 <__NVIC_SetPriority>
}
 800259a:	bf00      	nop
 800259c:	3718      	adds	r7, #24
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b082      	sub	sp, #8
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	4603      	mov	r3, r0
 80025aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7ff ff31 	bl	8002418 <__NVIC_EnableIRQ>
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b082      	sub	sp, #8
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025c6:	6878      	ldr	r0, [r7, #4]
 80025c8:	f7ff ffa2 	bl	8002510 <SysTick_Config>
 80025cc:	4603      	mov	r3, r0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
	...

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e159      	b.n	80028a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 8148 	bne.w	80028a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	2b01      	cmp	r3, #1
 800261c:	d005      	beq.n	800262a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002626:	2b02      	cmp	r3, #2
 8002628:	d130      	bne.n	800268c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	2203      	movs	r2, #3
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	005b      	lsls	r3, r3, #1
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	4313      	orrs	r3, r2
 8002652:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	43db      	mvns	r3, r3
 800266a:	69ba      	ldr	r2, [r7, #24]
 800266c:	4013      	ands	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	f003 0201 	and.w	r2, r3, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4313      	orrs	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	2b03      	cmp	r3, #3
 8002696:	d017      	beq.n	80026c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	005b      	lsls	r3, r3, #1
 80026a2:	2203      	movs	r2, #3
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	43db      	mvns	r3, r3
 80026aa:	69ba      	ldr	r2, [r7, #24]
 80026ac:	4013      	ands	r3, r2
 80026ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	69ba      	ldr	r2, [r7, #24]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69ba      	ldr	r2, [r7, #24]
 80026c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d123      	bne.n	800271c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80a2 	beq.w	80028a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b57      	ldr	r3, [pc, #348]	; (80028c0 <HAL_GPIO_Init+0x2e8>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a56      	ldr	r2, [pc, #344]	; (80028c0 <HAL_GPIO_Init+0x2e8>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b54      	ldr	r3, [pc, #336]	; (80028c0 <HAL_GPIO_Init+0x2e8>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a52      	ldr	r2, [pc, #328]	; (80028c4 <HAL_GPIO_Init+0x2ec>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a49      	ldr	r2, [pc, #292]	; (80028c8 <HAL_GPIO_Init+0x2f0>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d019      	beq.n	80027da <HAL_GPIO_Init+0x202>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_GPIO_Init+0x2f4>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d013      	beq.n	80027d6 <HAL_GPIO_Init+0x1fe>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a47      	ldr	r2, [pc, #284]	; (80028d0 <HAL_GPIO_Init+0x2f8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00d      	beq.n	80027d2 <HAL_GPIO_Init+0x1fa>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a46      	ldr	r2, [pc, #280]	; (80028d4 <HAL_GPIO_Init+0x2fc>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d007      	beq.n	80027ce <HAL_GPIO_Init+0x1f6>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a45      	ldr	r2, [pc, #276]	; (80028d8 <HAL_GPIO_Init+0x300>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d101      	bne.n	80027ca <HAL_GPIO_Init+0x1f2>
 80027c6:	2304      	movs	r3, #4
 80027c8:	e008      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e006      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027ce:	2303      	movs	r3, #3
 80027d0:	e004      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027d2:	2302      	movs	r3, #2
 80027d4:	e002      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_GPIO_Init+0x204>
 80027da:	2300      	movs	r3, #0
 80027dc:	69fa      	ldr	r2, [r7, #28]
 80027de:	f002 0203 	and.w	r2, r2, #3
 80027e2:	0092      	lsls	r2, r2, #2
 80027e4:	4093      	lsls	r3, r2
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80027ec:	4935      	ldr	r1, [pc, #212]	; (80028c4 <HAL_GPIO_Init+0x2ec>)
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	089b      	lsrs	r3, r3, #2
 80027f2:	3302      	adds	r3, #2
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027fa:	4b38      	ldr	r3, [pc, #224]	; (80028dc <HAL_GPIO_Init+0x304>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	43db      	mvns	r3, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4013      	ands	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002812:	2b00      	cmp	r3, #0
 8002814:	d003      	beq.n	800281e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800281e:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002824:	4b2d      	ldr	r3, [pc, #180]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800282a:	693b      	ldr	r3, [r7, #16]
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002848:	4a24      	ldr	r2, [pc, #144]	; (80028dc <HAL_GPIO_Init+0x304>)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800284e:	4b23      	ldr	r3, [pc, #140]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002872:	4a1a      	ldr	r2, [pc, #104]	; (80028dc <HAL_GPIO_Init+0x304>)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002878:	4b18      	ldr	r3, [pc, #96]	; (80028dc <HAL_GPIO_Init+0x304>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002890:	2b00      	cmp	r3, #0
 8002892:	d003      	beq.n	800289c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	4313      	orrs	r3, r2
 800289a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800289c:	4a0f      	ldr	r2, [pc, #60]	; (80028dc <HAL_GPIO_Init+0x304>)
 800289e:	69bb      	ldr	r3, [r7, #24]
 80028a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b0f      	cmp	r3, #15
 80028ac:	f67f aea2 	bls.w	80025f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028b0:	bf00      	nop
 80028b2:	bf00      	nop
 80028b4:	3724      	adds	r7, #36	; 0x24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800
 80028c8:	40020000 	.word	0x40020000
 80028cc:	40020400 	.word	0x40020400
 80028d0:	40020800 	.word	0x40020800
 80028d4:	40020c00 	.word	0x40020c00
 80028d8:	40021000 	.word	0x40021000
 80028dc:	40013c00 	.word	0x40013c00

080028e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	460b      	mov	r3, r1
 80028ea:	807b      	strh	r3, [r7, #2]
 80028ec:	4613      	mov	r3, r2
 80028ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80028f0:	787b      	ldrb	r3, [r7, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d003      	beq.n	80028fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028f6:	887a      	ldrh	r2, [r7, #2]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80028fc:	e003      	b.n	8002906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80028fe:	887b      	ldrh	r3, [r7, #2]
 8002900:	041a      	lsls	r2, r3, #16
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	619a      	str	r2, [r3, #24]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr

08002912 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002912:	b580      	push	{r7, lr}
 8002914:	b086      	sub	sp, #24
 8002916:	af02      	add	r7, sp, #8
 8002918:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d101      	bne.n	8002924 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e101      	b.n	8002b28 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002930:	b2db      	uxtb	r3, r3
 8002932:	2b00      	cmp	r3, #0
 8002934:	d106      	bne.n	8002944 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe ff32 	bl	80017a8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2203      	movs	r2, #3
 8002948:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002952:	d102      	bne.n	800295a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2200      	movs	r2, #0
 8002958:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4618      	mov	r0, r3
 8002960:	f000 fd6e 	bl	8003440 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7c1a      	ldrb	r2, [r3, #16]
 800296c:	f88d 2000 	strb.w	r2, [sp]
 8002970:	3304      	adds	r3, #4
 8002972:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002974:	f000 fd00 	bl	8003378 <USB_CoreInit>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2202      	movs	r2, #2
 8002982:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e0ce      	b.n	8002b28 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2100      	movs	r1, #0
 8002990:	4618      	mov	r0, r3
 8002992:	f000 fd66 	bl	8003462 <USB_SetCurrentMode>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d005      	beq.n	80029a8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2202      	movs	r2, #2
 80029a0:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0bf      	b.n	8002b28 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029a8:	2300      	movs	r3, #0
 80029aa:	73fb      	strb	r3, [r7, #15]
 80029ac:	e04a      	b.n	8002a44 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	3315      	adds	r3, #21
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80029c2:	7bfa      	ldrb	r2, [r7, #15]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	3314      	adds	r3, #20
 80029d2:	7bfa      	ldrb	r2, [r7, #15]
 80029d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80029d6:	7bfa      	ldrb	r2, [r7, #15]
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	b298      	uxth	r0, r3
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	332e      	adds	r3, #46	; 0x2e
 80029ea:	4602      	mov	r2, r0
 80029ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80029ee:	7bfa      	ldrb	r2, [r7, #15]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	00db      	lsls	r3, r3, #3
 80029f6:	4413      	add	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3318      	adds	r3, #24
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002a02:	7bfa      	ldrb	r2, [r7, #15]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	331c      	adds	r3, #28
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002a16:	7bfa      	ldrb	r2, [r7, #15]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3320      	adds	r3, #32
 8002a26:	2200      	movs	r2, #0
 8002a28:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002a2a:	7bfa      	ldrb	r2, [r7, #15]
 8002a2c:	6879      	ldr	r1, [r7, #4]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	00db      	lsls	r3, r3, #3
 8002a32:	4413      	add	r3, r2
 8002a34:	009b      	lsls	r3, r3, #2
 8002a36:	440b      	add	r3, r1
 8002a38:	3324      	adds	r3, #36	; 0x24
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	3301      	adds	r3, #1
 8002a42:	73fb      	strb	r3, [r7, #15]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	791b      	ldrb	r3, [r3, #4]
 8002a48:	7bfa      	ldrb	r2, [r7, #15]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d3af      	bcc.n	80029ae <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a4e:	2300      	movs	r3, #0
 8002a50:	73fb      	strb	r3, [r7, #15]
 8002a52:	e044      	b.n	8002ade <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002a54:	7bfa      	ldrb	r2, [r7, #15]
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	440b      	add	r3, r1
 8002a62:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002a66:	2200      	movs	r2, #0
 8002a68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	00db      	lsls	r3, r3, #3
 8002a72:	4413      	add	r3, r2
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002a7c:	7bfa      	ldrb	r2, [r7, #15]
 8002a7e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	4413      	add	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002a92:	2200      	movs	r2, #0
 8002a94:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002a96:	7bfa      	ldrb	r2, [r7, #15]
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002abe:	2200      	movs	r2, #0
 8002ac0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002ac2:	7bfa      	ldrb	r2, [r7, #15]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	4413      	add	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	440b      	add	r3, r1
 8002ad0:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ad8:	7bfb      	ldrb	r3, [r7, #15]
 8002ada:	3301      	adds	r3, #1
 8002adc:	73fb      	strb	r3, [r7, #15]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	791b      	ldrb	r3, [r3, #4]
 8002ae2:	7bfa      	ldrb	r2, [r7, #15]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d3b5      	bcc.n	8002a54 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7c1a      	ldrb	r2, [r3, #16]
 8002af0:	f88d 2000 	strb.w	r2, [sp]
 8002af4:	3304      	adds	r3, #4
 8002af6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002af8:	f000 fd00 	bl	80034fc <USB_DevInit>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2202      	movs	r2, #2
 8002b06:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e00c      	b.n	8002b28 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fec8 	bl	80038b6 <USB_DevDisconnect>

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e267      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0301 	and.w	r3, r3, #1
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d075      	beq.n	8002c3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 030c 	and.w	r3, r3, #12
 8002b56:	2b04      	cmp	r3, #4
 8002b58:	d00c      	beq.n	8002b74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b62:	2b08      	cmp	r3, #8
 8002b64:	d112      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b66:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b72:	d10b      	bne.n	8002b8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b74:	4b7e      	ldr	r3, [pc, #504]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d05b      	beq.n	8002c38 <HAL_RCC_OscConfig+0x108>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d157      	bne.n	8002c38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e242      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b94:	d106      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x74>
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a75      	ldr	r2, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	e01d      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bac:	d10c      	bne.n	8002bc8 <HAL_RCC_OscConfig+0x98>
 8002bae:	4b70      	ldr	r3, [pc, #448]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a6f      	ldr	r2, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb8:	6013      	str	r3, [r2, #0]
 8002bba:	4b6d      	ldr	r3, [pc, #436]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a6c      	ldr	r2, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc4:	6013      	str	r3, [r2, #0]
 8002bc6:	e00b      	b.n	8002be0 <HAL_RCC_OscConfig+0xb0>
 8002bc8:	4b69      	ldr	r3, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a68      	ldr	r2, [pc, #416]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	6013      	str	r3, [r2, #0]
 8002bd4:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a65      	ldr	r2, [pc, #404]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d013      	beq.n	8002c10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be8:	f7fe ffc2 	bl	8001b70 <HAL_GetTick>
 8002bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bf0:	f7fe ffbe 	bl	8001b70 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	; 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e207      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0xc0>
 8002c0e:	e014      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c10:	f7fe ffae 	bl	8001b70 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c18:	f7fe ffaa 	bl	8001b70 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e1f3      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c2a:	4b51      	ldr	r3, [pc, #324]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d1f0      	bne.n	8002c18 <HAL_RCC_OscConfig+0xe8>
 8002c36:	e000      	b.n	8002c3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d063      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c46:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 030c 	and.w	r3, r3, #12
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c5a:	2b08      	cmp	r3, #8
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1c7      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCC_OscConfig+0x244>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe ff63 	bl	8001b70 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe ff5f 	bl	8001b70 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1a8      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4925      	ldr	r1, [pc, #148]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x244>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe ff42 	bl	8001b70 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe ff3e 	bl	8001b70 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e187      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d036      	beq.n	8002d88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_RCC_OscConfig+0x248>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe ff22 	bl	8001b70 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe ff1e 	bl	8001b70 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e167      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x240>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x200>
 8002d4e:	e01b      	b.n	8002d88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x248>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d56:	f7fe ff0b 	bl	8001b70 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	e00e      	b.n	8002d7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fe ff07 	bl	8001b70 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d907      	bls.n	8002d7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e150      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470000 	.word	0x42470000
 8002d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ea      	bne.n	8002d5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8097 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b7d      	ldr	r3, [pc, #500]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a7c      	ldr	r2, [pc, #496]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b7a      	ldr	r3, [pc, #488]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b77      	ldr	r3, [pc, #476]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d118      	bne.n	8002e04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b74      	ldr	r3, [pc, #464]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a73      	ldr	r2, [pc, #460]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fec7 	bl	8001b70 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fe fec3 	bl	8001b70 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e10c      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x474>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x2ea>
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a63      	ldr	r2, [pc, #396]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x324>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x30c>
 8002e22:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a5e      	ldr	r2, [pc, #376]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	4a5b      	ldr	r2, [pc, #364]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0x324>
 8002e3c:	4b58      	ldr	r3, [pc, #352]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a57      	ldr	r2, [pc, #348]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a54      	ldr	r2, [pc, #336]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e4e:	f023 0304 	bic.w	r3, r3, #4
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d015      	beq.n	8002e88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fe88 	bl	8001b70 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe fe84 	bl	8001b70 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0cb      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	4b49      	ldr	r3, [pc, #292]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ee      	beq.n	8002e64 <HAL_RCC_OscConfig+0x334>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e88:	f7fe fe72 	bl	8001b70 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fe6e 	bl	8001b70 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0b5      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea6:	4b3e      	ldr	r3, [pc, #248]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4a38      	ldr	r2, [pc, #224]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80a1 	beq.w	8003010 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ece:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d05c      	beq.n	8002f94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d141      	bne.n	8002f66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fe42 	bl	8001b70 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fe3e 	bl	8001b70 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e087      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b27      	ldr	r3, [pc, #156]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	491b      	ldr	r1, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f38:	4b1b      	ldr	r3, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3e:	f7fe fe17 	bl	8001b70 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f44:	e008      	b.n	8002f58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f46:	f7fe fe13 	bl	8001b70 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d901      	bls.n	8002f58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e05c      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0f0      	beq.n	8002f46 <HAL_RCC_OscConfig+0x416>
 8002f64:	e054      	b.n	8003010 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f66:	4b10      	ldr	r3, [pc, #64]	; (8002fa8 <HAL_RCC_OscConfig+0x478>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fe00 	bl	8001b70 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f74:	f7fe fdfc 	bl	8001b70 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e045      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	4b06      	ldr	r3, [pc, #24]	; (8002fa0 <HAL_RCC_OscConfig+0x470>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d1f0      	bne.n	8002f74 <HAL_RCC_OscConfig+0x444>
 8002f92:	e03d      	b.n	8003010 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d107      	bne.n	8002fac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e038      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	40007000 	.word	0x40007000
 8002fa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x4ec>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d028      	beq.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d121      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d111      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0cc      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003034:	4b68      	ldr	r3, [pc, #416]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0307 	and.w	r3, r3, #7
 800303c:	683a      	ldr	r2, [r7, #0]
 800303e:	429a      	cmp	r2, r3
 8003040:	d90c      	bls.n	800305c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003042:	4b65      	ldr	r3, [pc, #404]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003044:	683a      	ldr	r2, [r7, #0]
 8003046:	b2d2      	uxtb	r2, r2
 8003048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800304a:	4b63      	ldr	r3, [pc, #396]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	683a      	ldr	r2, [r7, #0]
 8003054:	429a      	cmp	r2, r3
 8003056:	d001      	beq.n	800305c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0b8      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0302 	and.w	r3, r3, #2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d020      	beq.n	80030aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0304 	and.w	r3, r3, #4
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003074:	4b59      	ldr	r3, [pc, #356]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	4a58      	ldr	r2, [pc, #352]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800307a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800307e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d005      	beq.n	8003098 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800308c:	4b53      	ldr	r3, [pc, #332]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	4a52      	ldr	r2, [pc, #328]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003096:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	494d      	ldr	r1, [pc, #308]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d044      	beq.n	8003140 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d119      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e07f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d003      	beq.n	80030de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030da:	2b03      	cmp	r3, #3
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030de:	4b3f      	ldr	r3, [pc, #252]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d109      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e06f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030ee:	4b3b      	ldr	r3, [pc, #236]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0302 	and.w	r3, r3, #2
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d101      	bne.n	80030fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e067      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030fe:	4b37      	ldr	r3, [pc, #220]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f023 0203 	bic.w	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	4934      	ldr	r1, [pc, #208]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 800310c:	4313      	orrs	r3, r2
 800310e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003110:	f7fe fd2e 	bl	8001b70 <HAL_GetTick>
 8003114:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003116:	e00a      	b.n	800312e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003118:	f7fe fd2a 	bl	8001b70 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	f241 3288 	movw	r2, #5000	; 0x1388
 8003126:	4293      	cmp	r3, r2
 8003128:	d901      	bls.n	800312e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e04f      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	4b2b      	ldr	r3, [pc, #172]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	f003 020c 	and.w	r2, r3, #12
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	429a      	cmp	r2, r3
 800313e:	d1eb      	bne.n	8003118 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003140:	4b25      	ldr	r3, [pc, #148]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0307 	and.w	r3, r3, #7
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d20c      	bcs.n	8003168 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800314e:	4b22      	ldr	r3, [pc, #136]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003150:	683a      	ldr	r2, [r7, #0]
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003156:	4b20      	ldr	r3, [pc, #128]	; (80031d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	683a      	ldr	r2, [r7, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e032      	b.n	80031ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d008      	beq.n	8003186 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003174:	4b19      	ldr	r3, [pc, #100]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	4916      	ldr	r1, [pc, #88]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0308 	and.w	r3, r3, #8
 800318e:	2b00      	cmp	r3, #0
 8003190:	d009      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003192:	4b12      	ldr	r3, [pc, #72]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	490e      	ldr	r1, [pc, #56]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80031a6:	f000 f821 	bl	80031ec <HAL_RCC_GetSysClockFreq>
 80031aa:	4602      	mov	r2, r0
 80031ac:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <HAL_RCC_ClockConfig+0x1bc>)
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	091b      	lsrs	r3, r3, #4
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	490a      	ldr	r1, [pc, #40]	; (80031e0 <HAL_RCC_ClockConfig+0x1c0>)
 80031b8:	5ccb      	ldrb	r3, [r1, r3]
 80031ba:	fa22 f303 	lsr.w	r3, r2, r3
 80031be:	4a09      	ldr	r2, [pc, #36]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 80031c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031c2:	4b09      	ldr	r3, [pc, #36]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7fe fc8e 	bl	8001ae8 <HAL_InitTick>

  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
 80031d6:	bf00      	nop
 80031d8:	40023c00 	.word	0x40023c00
 80031dc:	40023800 	.word	0x40023800
 80031e0:	08008718 	.word	0x08008718
 80031e4:	20000000 	.word	0x20000000
 80031e8:	20000014 	.word	0x20000014

080031ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031f0:	b090      	sub	sp, #64	; 0x40
 80031f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	637b      	str	r3, [r7, #52]	; 0x34
 80031f8:	2300      	movs	r3, #0
 80031fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031fc:	2300      	movs	r3, #0
 80031fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003204:	4b59      	ldr	r3, [pc, #356]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f003 030c 	and.w	r3, r3, #12
 800320c:	2b08      	cmp	r3, #8
 800320e:	d00d      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x40>
 8003210:	2b08      	cmp	r3, #8
 8003212:	f200 80a1 	bhi.w	8003358 <HAL_RCC_GetSysClockFreq+0x16c>
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_RCC_GetSysClockFreq+0x34>
 800321a:	2b04      	cmp	r3, #4
 800321c:	d003      	beq.n	8003226 <HAL_RCC_GetSysClockFreq+0x3a>
 800321e:	e09b      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003220:	4b53      	ldr	r3, [pc, #332]	; (8003370 <HAL_RCC_GetSysClockFreq+0x184>)
 8003222:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003224:	e09b      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003226:	4b53      	ldr	r3, [pc, #332]	; (8003374 <HAL_RCC_GetSysClockFreq+0x188>)
 8003228:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800322a:	e098      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800322c:	4b4f      	ldr	r3, [pc, #316]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003234:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003236:	4b4d      	ldr	r3, [pc, #308]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d028      	beq.n	8003294 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003242:	4b4a      	ldr	r3, [pc, #296]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	099b      	lsrs	r3, r3, #6
 8003248:	2200      	movs	r2, #0
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	627a      	str	r2, [r7, #36]	; 0x24
 800324e:	6a3b      	ldr	r3, [r7, #32]
 8003250:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003254:	2100      	movs	r1, #0
 8003256:	4b47      	ldr	r3, [pc, #284]	; (8003374 <HAL_RCC_GetSysClockFreq+0x188>)
 8003258:	fb03 f201 	mul.w	r2, r3, r1
 800325c:	2300      	movs	r3, #0
 800325e:	fb00 f303 	mul.w	r3, r0, r3
 8003262:	4413      	add	r3, r2
 8003264:	4a43      	ldr	r2, [pc, #268]	; (8003374 <HAL_RCC_GetSysClockFreq+0x188>)
 8003266:	fba0 1202 	umull	r1, r2, r0, r2
 800326a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800326c:	460a      	mov	r2, r1
 800326e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003272:	4413      	add	r3, r2
 8003274:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003278:	2200      	movs	r2, #0
 800327a:	61bb      	str	r3, [r7, #24]
 800327c:	61fa      	str	r2, [r7, #28]
 800327e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003282:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003286:	f7fd fab5 	bl	80007f4 <__aeabi_uldivmod>
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4613      	mov	r3, r2
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003292:	e053      	b.n	800333c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003294:	4b35      	ldr	r3, [pc, #212]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	2200      	movs	r2, #0
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	617a      	str	r2, [r7, #20]
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80032a6:	f04f 0b00 	mov.w	fp, #0
 80032aa:	4652      	mov	r2, sl
 80032ac:	465b      	mov	r3, fp
 80032ae:	f04f 0000 	mov.w	r0, #0
 80032b2:	f04f 0100 	mov.w	r1, #0
 80032b6:	0159      	lsls	r1, r3, #5
 80032b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032bc:	0150      	lsls	r0, r2, #5
 80032be:	4602      	mov	r2, r0
 80032c0:	460b      	mov	r3, r1
 80032c2:	ebb2 080a 	subs.w	r8, r2, sl
 80032c6:	eb63 090b 	sbc.w	r9, r3, fp
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80032d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80032da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80032de:	ebb2 0408 	subs.w	r4, r2, r8
 80032e2:	eb63 0509 	sbc.w	r5, r3, r9
 80032e6:	f04f 0200 	mov.w	r2, #0
 80032ea:	f04f 0300 	mov.w	r3, #0
 80032ee:	00eb      	lsls	r3, r5, #3
 80032f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80032f4:	00e2      	lsls	r2, r4, #3
 80032f6:	4614      	mov	r4, r2
 80032f8:	461d      	mov	r5, r3
 80032fa:	eb14 030a 	adds.w	r3, r4, sl
 80032fe:	603b      	str	r3, [r7, #0]
 8003300:	eb45 030b 	adc.w	r3, r5, fp
 8003304:	607b      	str	r3, [r7, #4]
 8003306:	f04f 0200 	mov.w	r2, #0
 800330a:	f04f 0300 	mov.w	r3, #0
 800330e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003312:	4629      	mov	r1, r5
 8003314:	028b      	lsls	r3, r1, #10
 8003316:	4621      	mov	r1, r4
 8003318:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800331c:	4621      	mov	r1, r4
 800331e:	028a      	lsls	r2, r1, #10
 8003320:	4610      	mov	r0, r2
 8003322:	4619      	mov	r1, r3
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	2200      	movs	r2, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	60fa      	str	r2, [r7, #12]
 800332c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003330:	f7fd fa60 	bl	80007f4 <__aeabi_uldivmod>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4613      	mov	r3, r2
 800333a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_GetSysClockFreq+0x180>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0c1b      	lsrs	r3, r3, #16
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	3301      	adds	r3, #1
 8003348:	005b      	lsls	r3, r3, #1
 800334a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800334c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800334e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003350:	fbb2 f3f3 	udiv	r3, r2, r3
 8003354:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003356:	e002      	b.n	800335e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003358:	4b05      	ldr	r3, [pc, #20]	; (8003370 <HAL_RCC_GetSysClockFreq+0x184>)
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800335c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800335e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003360:	4618      	mov	r0, r3
 8003362:	3740      	adds	r7, #64	; 0x40
 8003364:	46bd      	mov	sp, r7
 8003366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800336a:	bf00      	nop
 800336c:	40023800 	.word	0x40023800
 8003370:	00f42400 	.word	0x00f42400
 8003374:	018cba80 	.word	0x018cba80

08003378 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003378:	b084      	sub	sp, #16
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	f107 001c 	add.w	r0, r7, #28
 8003386:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800338a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800338e:	2b01      	cmp	r3, #1
 8003390:	d123      	bne.n	80033da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003396:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80033a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80033ba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d105      	bne.n	80033ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 faa0 	bl	8003914 <USB_CoreReset>
 80033d4:	4603      	mov	r3, r0
 80033d6:	73fb      	strb	r3, [r7, #15]
 80033d8:	e01b      	b.n	8003412 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa94 	bl	8003914 <USB_CoreReset>
 80033ec:	4603      	mov	r3, r0
 80033ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80033f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d106      	bne.n	8003406 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	639a      	str	r2, [r3, #56]	; 0x38
 8003404:	e005      	b.n	8003412 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003412:	7fbb      	ldrb	r3, [r7, #30]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10b      	bne.n	8003430 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	f043 0206 	orr.w	r2, r3, #6
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	689b      	ldr	r3, [r3, #8]
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003430:	7bfb      	ldrb	r3, [r7, #15]
}
 8003432:	4618      	mov	r0, r3
 8003434:	3710      	adds	r7, #16
 8003436:	46bd      	mov	sp, r7
 8003438:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800343c:	b004      	add	sp, #16
 800343e:	4770      	bx	lr

08003440 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f023 0201 	bic.w	r2, r3, #1
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	370c      	adds	r7, #12
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr

08003462 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b084      	sub	sp, #16
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
 800346a:	460b      	mov	r3, r1
 800346c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800346e:	2300      	movs	r3, #0
 8003470:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d115      	bne.n	80034b0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003490:	200a      	movs	r0, #10
 8003492:	f7fe fb79 	bl	8001b88 <HAL_Delay>
      ms += 10U;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	330a      	adds	r3, #10
 800349a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa2b 	bl	80038f8 <USB_GetMode>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d01e      	beq.n	80034e6 <USB_SetCurrentMode+0x84>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2bc7      	cmp	r3, #199	; 0xc7
 80034ac:	d9f0      	bls.n	8003490 <USB_SetCurrentMode+0x2e>
 80034ae:	e01a      	b.n	80034e6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80034b0:	78fb      	ldrb	r3, [r7, #3]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d115      	bne.n	80034e2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80034c2:	200a      	movs	r0, #10
 80034c4:	f7fe fb60 	bl	8001b88 <HAL_Delay>
      ms += 10U;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	330a      	adds	r3, #10
 80034cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f000 fa12 	bl	80038f8 <USB_GetMode>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d005      	beq.n	80034e6 <USB_SetCurrentMode+0x84>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2bc7      	cmp	r3, #199	; 0xc7
 80034de:	d9f0      	bls.n	80034c2 <USB_SetCurrentMode+0x60>
 80034e0:	e001      	b.n	80034e6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e005      	b.n	80034f2 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2bc8      	cmp	r3, #200	; 0xc8
 80034ea:	d101      	bne.n	80034f0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e000      	b.n	80034f2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
	...

080034fc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034fc:	b084      	sub	sp, #16
 80034fe:	b580      	push	{r7, lr}
 8003500:	b086      	sub	sp, #24
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
 8003506:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800350a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800350e:	2300      	movs	r3, #0
 8003510:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003516:	2300      	movs	r3, #0
 8003518:	613b      	str	r3, [r7, #16]
 800351a:	e009      	b.n	8003530 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	3340      	adds	r3, #64	; 0x40
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	3301      	adds	r3, #1
 800352e:	613b      	str	r3, [r7, #16]
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	2b0e      	cmp	r3, #14
 8003534:	d9f2      	bls.n	800351c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003536:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11c      	bne.n	8003578 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003562:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
 8003576:	e00b      	b.n	8003590 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003596:	461a      	mov	r2, r3
 8003598:	2300      	movs	r3, #0
 800359a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800359c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10d      	bne.n	80035c0 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80035a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d104      	bne.n	80035b6 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80035ac:	2100      	movs	r1, #0
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f968 	bl	8003884 <USB_SetDevSpeed>
 80035b4:	e008      	b.n	80035c8 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80035b6:	2101      	movs	r1, #1
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 f963 	bl	8003884 <USB_SetDevSpeed>
 80035be:	e003      	b.n	80035c8 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80035c0:	2103      	movs	r1, #3
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f95e 	bl	8003884 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80035c8:	2110      	movs	r1, #16
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 f8fa 	bl	80037c4 <USB_FlushTxFifo>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f000 f924 	bl	8003828 <USB_FlushRxFifo>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80035e6:	2301      	movs	r3, #1
 80035e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f0:	461a      	mov	r2, r3
 80035f2:	2300      	movs	r3, #0
 80035f4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035fc:	461a      	mov	r2, r3
 80035fe:	2300      	movs	r3, #0
 8003600:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003608:	461a      	mov	r2, r3
 800360a:	2300      	movs	r3, #0
 800360c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	e043      	b.n	800369c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	4413      	add	r3, r2
 800361c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800362a:	d118      	bne.n	800365e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10a      	bne.n	8003648 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800363e:	461a      	mov	r2, r3
 8003640:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	e013      	b.n	8003670 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	461a      	mov	r2, r3
 8003656:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800365a:	6013      	str	r3, [r2, #0]
 800365c:	e008      	b.n	8003670 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800365e:	693b      	ldr	r3, [r7, #16]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	4413      	add	r3, r2
 8003666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366a:	461a      	mov	r2, r3
 800366c:	2300      	movs	r3, #0
 800366e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	015a      	lsls	r2, r3, #5
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	4413      	add	r3, r2
 8003678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800367c:	461a      	mov	r2, r3
 800367e:	2300      	movs	r3, #0
 8003680:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	015a      	lsls	r2, r3, #5
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	4413      	add	r3, r2
 800368a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368e:	461a      	mov	r2, r3
 8003690:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003694:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	3301      	adds	r3, #1
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80036a0:	461a      	mov	r2, r3
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d3b5      	bcc.n	8003614 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80036a8:	2300      	movs	r3, #0
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e043      	b.n	8003736 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036c4:	d118      	bne.n	80036f8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10a      	bne.n	80036e2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d8:	461a      	mov	r2, r3
 80036da:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80036de:	6013      	str	r3, [r2, #0]
 80036e0:	e013      	b.n	800370a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	015a      	lsls	r2, r3, #5
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4413      	add	r3, r2
 80036ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036ee:	461a      	mov	r2, r3
 80036f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e008      	b.n	800370a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	015a      	lsls	r2, r3, #5
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4413      	add	r3, r2
 8003700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003704:	461a      	mov	r2, r3
 8003706:	2300      	movs	r3, #0
 8003708:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	4413      	add	r3, r2
 8003712:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003716:	461a      	mov	r2, r3
 8003718:	2300      	movs	r3, #0
 800371a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	4413      	add	r3, r2
 8003724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003728:	461a      	mov	r2, r3
 800372a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800372e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	3301      	adds	r3, #1
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800373a:	461a      	mov	r2, r3
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4293      	cmp	r3, r2
 8003740:	d3b5      	bcc.n	80036ae <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	68fa      	ldr	r2, [r7, #12]
 800374c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003754:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003762:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003764:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	f043 0210 	orr.w	r2, r3, #16
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699a      	ldr	r2, [r3, #24]
 800377c:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <USB_DevInit+0x2c4>)
 800377e:	4313      	orrs	r3, r2
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003784:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003788:	2b00      	cmp	r3, #0
 800378a:	d005      	beq.n	8003798 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f043 0208 	orr.w	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003798:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800379c:	2b01      	cmp	r3, #1
 800379e:	d107      	bne.n	80037b0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	699b      	ldr	r3, [r3, #24]
 80037a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037a8:	f043 0304 	orr.w	r3, r3, #4
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80037b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037bc:	b004      	add	sp, #16
 80037be:	4770      	bx	lr
 80037c0:	803c3800 	.word	0x803c3800

080037c4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	3301      	adds	r3, #1
 80037d6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80037de:	d901      	bls.n	80037e4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e01b      	b.n	800381c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	daf2      	bge.n	80037d2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80037ec:	2300      	movs	r3, #0
 80037ee:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	019b      	lsls	r3, r3, #6
 80037f4:	f043 0220 	orr.w	r2, r3, #32
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	3301      	adds	r3, #1
 8003800:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003808:	d901      	bls.n	800380e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e006      	b.n	800381c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	f003 0320 	and.w	r3, r3, #32
 8003816:	2b20      	cmp	r3, #32
 8003818:	d0f0      	beq.n	80037fc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	3301      	adds	r3, #1
 8003838:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003840:	d901      	bls.n	8003846 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e018      	b.n	8003878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	691b      	ldr	r3, [r3, #16]
 800384a:	2b00      	cmp	r3, #0
 800384c:	daf2      	bge.n	8003834 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2210      	movs	r2, #16
 8003856:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	3301      	adds	r3, #1
 800385c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003864:	d901      	bls.n	800386a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e006      	b.n	8003878 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0310 	and.w	r3, r3, #16
 8003872:	2b10      	cmp	r3, #16
 8003874:	d0f0      	beq.n	8003858 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	460b      	mov	r3, r1
 800388e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	78fb      	ldrb	r3, [r7, #3]
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a4:	4313      	orrs	r3, r2
 80038a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80038a8:	2300      	movs	r3, #0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3714      	adds	r7, #20
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr

080038b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80038b6:	b480      	push	{r7}
 80038b8:	b085      	sub	sp, #20
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80038d0:	f023 0303 	bic.w	r3, r3, #3
 80038d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	f003 0301 	and.w	r3, r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr

08003914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800392c:	d901      	bls.n	8003932 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e01b      	b.n	800396a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	2b00      	cmp	r3, #0
 8003938:	daf2      	bge.n	8003920 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	691b      	ldr	r3, [r3, #16]
 8003942:	f043 0201 	orr.w	r2, r3, #1
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	3301      	adds	r3, #1
 800394e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003956:	d901      	bls.n	800395c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003958:	2303      	movs	r3, #3
 800395a:	e006      	b.n	800396a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	691b      	ldr	r3, [r3, #16]
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b01      	cmp	r3, #1
 8003966:	d0f0      	beq.n	800394a <USB_CoreReset+0x36>

  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3714      	adds	r7, #20
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr
	...

08003978 <get_index_by_itfnum>:

CFG_TUD_MEM_SECTION tu_static hidd_interface_t _hidd_itf[CFG_TUD_HID];

/*------------- Helpers -------------*/
static inline uint8_t get_index_by_itfnum(uint8_t itf_num)
{
 8003978:	b480      	push	{r7}
 800397a:	b085      	sub	sp, #20
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8003982:	2300      	movs	r3, #0
 8003984:	73fb      	strb	r3, [r7, #15]
 8003986:	e00f      	b.n	80039a8 <get_index_by_itfnum+0x30>
	{
		if ( itf_num == _hidd_itf[i].itf_num ) return i;
 8003988:	7bfa      	ldrb	r2, [r7, #15]
 800398a:	490c      	ldr	r1, [pc, #48]	; (80039bc <get_index_by_itfnum+0x44>)
 800398c:	4613      	mov	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	79fa      	ldrb	r2, [r7, #7]
 800399a:	429a      	cmp	r2, r3
 800399c:	d101      	bne.n	80039a2 <get_index_by_itfnum+0x2a>
 800399e:	7bfb      	ldrb	r3, [r7, #15]
 80039a0:	e006      	b.n	80039b0 <get_index_by_itfnum+0x38>
	for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	3301      	adds	r3, #1
 80039a6:	73fb      	strb	r3, [r7, #15]
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d0ec      	beq.n	8003988 <get_index_by_itfnum+0x10>
	}

	return 0xFF;
 80039ae:	23ff      	movs	r3, #255	; 0xff
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	3714      	adds	r7, #20
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	2000124c 	.word	0x2000124c

080039c0 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 80039ca:	2300      	movs	r3, #0
 80039cc:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 80039ce:	79fa      	ldrb	r2, [r7, #7]
 80039d0:	491b      	ldr	r1, [pc, #108]	; (8003a40 <tud_hid_n_ready+0x80>)
 80039d2:	4613      	mov	r3, r2
 80039d4:	00db      	lsls	r3, r3, #3
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3301      	adds	r3, #1
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	73bb      	strb	r3, [r7, #14]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 80039e2:	f001 f947 	bl	8004c74 <tud_mounted>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d009      	beq.n	8003a00 <tud_hid_n_ready+0x40>
 80039ec:	f001 f954 	bl	8004c98 <tud_suspended>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f083 0301 	eor.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d001      	beq.n	8003a00 <tud_hid_n_ready+0x40>
 80039fc:	2301      	movs	r3, #1
 80039fe:	e000      	b.n	8003a02 <tud_hid_n_ready+0x42>
 8003a00:	2300      	movs	r3, #0
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d010      	beq.n	8003a2e <tud_hid_n_ready+0x6e>
 8003a0c:	7bbb      	ldrb	r3, [r7, #14]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00d      	beq.n	8003a2e <tud_hid_n_ready+0x6e>
 8003a12:	7bba      	ldrb	r2, [r7, #14]
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f002 fc19 	bl	8006250 <usbd_edpt_busy>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f083 0301 	eor.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <tud_hid_n_ready+0x6e>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <tud_hid_n_ready+0x70>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	b2db      	uxtb	r3, r3
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	2000124c 	.word	0x2000124c

08003a44 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const* report, uint16_t len)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08c      	sub	sp, #48	; 0x30
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	603a      	str	r2, [r7, #0]
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	4603      	mov	r3, r0
 8003a50:	71fb      	strb	r3, [r7, #7]
 8003a52:	460b      	mov	r3, r1
 8003a54:	71bb      	strb	r3, [r7, #6]
 8003a56:	4613      	mov	r3, r2
 8003a58:	80bb      	strh	r3, [r7, #4]
  uint8_t const rhport = 0;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  hidd_interface_t * p_hid = &_hidd_itf[instance];
 8003a60:	79fa      	ldrb	r2, [r7, #7]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	1a9b      	subs	r3, r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4a31      	ldr	r2, [pc, #196]	; (8003b30 <tud_hid_n_report+0xec>)
 8003a6c:	4413      	add	r3, r2
 8003a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  // claim endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_hid->ep_in) );
 8003a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a72:	785a      	ldrb	r2, [r3, #1]
 8003a74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f002 fb48 	bl	8006110 <usbd_edpt_claim>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f083 0301 	eor.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <tud_hid_n_report+0x4c>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	e04a      	b.n	8003b26 <tud_hid_n_report+0xe2>

  // prepare data
  if (report_id)
 8003a90:	79bb      	ldrb	r3, [r7, #6]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d021      	beq.n	8003ada <tud_hid_n_report+0x96>
  {
    p_hid->epin_buf[0] = report_id;
 8003a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a98:	79ba      	ldrb	r2, [r7, #6]
 8003a9a:	721a      	strb	r2, [r3, #8]
    TU_VERIFY(0 == tu_memcpy_s(p_hid->epin_buf+1, CFG_TUD_HID_EP_BUFSIZE-1, report, len));
 8003a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a9e:	3308      	adds	r3, #8
 8003aa0:	1c5a      	adds	r2, r3, #1
 8003aa2:	88bb      	ldrh	r3, [r7, #4]
 8003aa4:	627a      	str	r2, [r7, #36]	; 0x24
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	623a      	str	r2, [r7, #32]
 8003aaa:	683a      	ldr	r2, [r7, #0]
 8003aac:	61fa      	str	r2, [r7, #28]
 8003aae:	61bb      	str	r3, [r7, #24]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 8003ab0:	6a3a      	ldr	r2, [r7, #32]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d202      	bcs.n	8003abe <tud_hid_n_report+0x7a>
    return -1;
 8003ab8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003abc:	e005      	b.n	8003aca <tud_hid_n_report+0x86>
  }
  memcpy(dest, src, count);
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	69f9      	ldr	r1, [r7, #28]
 8003ac2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ac4:	f004 fd16 	bl	80084f4 <memcpy>
  return 0;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <tud_hid_n_report+0x8e>
 8003ace:	2300      	movs	r3, #0
 8003ad0:	e029      	b.n	8003b26 <tud_hid_n_report+0xe2>
    len++;
 8003ad2:	88bb      	ldrh	r3, [r7, #4]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	80bb      	strh	r3, [r7, #4]
 8003ad8:	e01a      	b.n	8003b10 <tud_hid_n_report+0xcc>
  }else
  {
    TU_VERIFY(0 == tu_memcpy_s(p_hid->epin_buf, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8003ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003adc:	f103 0208 	add.w	r2, r3, #8
 8003ae0:	88bb      	ldrh	r3, [r7, #4]
 8003ae2:	617a      	str	r2, [r7, #20]
 8003ae4:	2208      	movs	r2, #8
 8003ae6:	613a      	str	r2, [r7, #16]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	60fa      	str	r2, [r7, #12]
 8003aec:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d202      	bcs.n	8003afc <tud_hid_n_report+0xb8>
    return -1;
 8003af6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003afa:	e005      	b.n	8003b08 <tud_hid_n_report+0xc4>
  memcpy(dest, src, count);
 8003afc:	68ba      	ldr	r2, [r7, #8]
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	6978      	ldr	r0, [r7, #20]
 8003b02:	f004 fcf7 	bl	80084f4 <memcpy>
  return 0;
 8003b06:	2300      	movs	r3, #0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <tud_hid_n_report+0xcc>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e00a      	b.n	8003b26 <tud_hid_n_report+0xe2>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_hid->epin_buf, len);
 8003b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b12:	7859      	ldrb	r1, [r3, #1]
 8003b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b16:	f103 0208 	add.w	r2, r3, #8
 8003b1a:	88bb      	ldrh	r3, [r7, #4]
 8003b1c:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8003b20:	f002 fb20 	bl	8006164 <usbd_edpt_xfer>
 8003b24:	4603      	mov	r3, r0
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	3730      	adds	r7, #48	; 0x30
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	2000124c 	.word	0x2000124c

08003b34 <tud_hid_n_keyboard_report>:
{
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, uint8_t keycode[6])
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	71fb      	strb	r3, [r7, #7]
 8003b40:	460b      	mov	r3, r1
 8003b42:	71bb      	strb	r3, [r7, #6]
 8003b44:	4613      	mov	r3, r2
 8003b46:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;

  report.modifier = modifier;
 8003b48:	797b      	ldrb	r3, [r7, #5]
 8003b4a:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	727b      	strb	r3, [r7, #9]

  if ( keycode )
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d007      	beq.n	8003b66 <tud_hid_n_keyboard_report+0x32>
  {
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	f107 030a 	add.w	r3, r7, #10
 8003b5c:	6811      	ldr	r1, [r2, #0]
 8003b5e:	6019      	str	r1, [r3, #0]
 8003b60:	8892      	ldrh	r2, [r2, #4]
 8003b62:	809a      	strh	r2, [r3, #4]
 8003b64:	e007      	b.n	8003b76 <tud_hid_n_keyboard_report+0x42>
  }else
  {
    tu_memclr(report.keycode, 6);
 8003b66:	f107 0308 	add.w	r3, r7, #8
 8003b6a:	3302      	adds	r3, #2
 8003b6c:	2206      	movs	r2, #6
 8003b6e:	2100      	movs	r1, #0
 8003b70:	4618      	mov	r0, r3
 8003b72:	f004 fc92 	bl	800849a <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8003b76:	f107 0208 	add.w	r2, r7, #8
 8003b7a:	79b9      	ldrb	r1, [r7, #6]
 8003b7c:	79f8      	ldrb	r0, [r7, #7]
 8003b7e:	2308      	movs	r3, #8
 8003b80:	f7ff ff60 	bl	8003a44 <tud_hid_n_report>
 8003b84:	4603      	mov	r3, r0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}

08003b8e <hidd_init>:

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void)
{
 8003b8e:	b580      	push	{r7, lr}
 8003b90:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8003b92:	2000      	movs	r0, #0
 8003b94:	f000 f802 	bl	8003b9c <hidd_reset>
}
 8003b98:	bf00      	nop
 8003b9a:	bd80      	pop	{r7, pc}

08003b9c <hidd_reset>:

void hidd_reset(uint8_t rhport)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b082      	sub	sp, #8
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8003ba6:	221c      	movs	r2, #28
 8003ba8:	2100      	movs	r1, #0
 8003baa:	4803      	ldr	r0, [pc, #12]	; (8003bb8 <hidd_reset+0x1c>)
 8003bac:	f004 fc75 	bl	800849a <memset>
}
 8003bb0:	bf00      	nop
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	2000124c 	.word	0x2000124c

08003bbc <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
 {
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b092      	sub	sp, #72	; 0x48
 8003bc0:	af02      	add	r7, sp, #8
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	6039      	str	r1, [r7, #0]
 8003bc6:	71fb      	strb	r3, [r7, #7]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	795b      	ldrb	r3, [r3, #5]
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d001      	beq.n	8003bd8 <hidd_open+0x1c>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	e0c8      	b.n	8003d6a <hidd_open+0x1ae>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len =
      (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	791b      	ldrb	r3, [r3, #4]
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	461a      	mov	r2, r3
 8003be0:	00d2      	lsls	r2, r2, #3
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b29b      	uxth	r3, r3
  uint16_t const drv_len =
 8003be6:	3312      	adds	r3, #18
 8003be8:	873b      	strh	r3, [r7, #56]	; 0x38
  TU_ASSERT(max_len >= drv_len, 0);
 8003bea:	88ba      	ldrh	r2, [r7, #4]
 8003bec:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d20a      	bcs.n	8003c08 <hidd_open+0x4c>
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <hidd_open+0x1b8>)
 8003bf4:	623b      	str	r3, [r7, #32]
 8003bf6:	6a3b      	ldr	r3, [r7, #32]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d000      	beq.n	8003c04 <hidd_open+0x48>
 8003c02:	be00      	bkpt	0x0000
 8003c04:	2300      	movs	r3, #0
 8003c06:	e0b0      	b.n	8003d6a <hidd_open+0x1ae>

  // Find available interface
  hidd_interface_t * p_hid = NULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t hid_id;
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c12:	e01a      	b.n	8003c4a <hidd_open+0x8e>
  {
    if ( _hidd_itf[hid_id].ep_in == 0 )
 8003c14:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003c18:	4957      	ldr	r1, [pc, #348]	; (8003d78 <hidd_open+0x1bc>)
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	1a9b      	subs	r3, r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	440b      	add	r3, r1
 8003c24:	3301      	adds	r3, #1
 8003c26:	781b      	ldrb	r3, [r3, #0]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d109      	bne.n	8003c40 <hidd_open+0x84>
    {
      p_hid = &_hidd_itf[hid_id];
 8003c2c:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	1a9b      	subs	r3, r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4a4f      	ldr	r2, [pc, #316]	; (8003d78 <hidd_open+0x1bc>)
 8003c3a:	4413      	add	r3, r2
 8003c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8003c3e:	e008      	b.n	8003c52 <hidd_open+0x96>
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8003c40:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c44:	3301      	adds	r3, #1
 8003c46:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003c4a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d0e0      	beq.n	8003c14 <hidd_open+0x58>
    }
  }
  TU_ASSERT(p_hid, 0);
 8003c52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d10a      	bne.n	8003c6e <hidd_open+0xb2>
 8003c58:	4b46      	ldr	r3, [pc, #280]	; (8003d74 <hidd_open+0x1b8>)
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d000      	beq.n	8003c6a <hidd_open+0xae>
 8003c68:	be00      	bkpt	0x0000
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	e07d      	b.n	8003d6a <hidd_open+0x1ae>

  uint8_t const *p_desc = (uint8_t const *) desc_itf;
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	637b      	str	r3, [r7, #52]	; 0x34
 8003c72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c74:	61bb      	str	r3, [r7, #24]
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	461a      	mov	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8003c84:	637b      	str	r3, [r7, #52]	; 0x34
 8003c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c88:	61fb      	str	r3, [r7, #28]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8003c90:	2b21      	cmp	r3, #33	; 0x21
 8003c92:	d00a      	beq.n	8003caa <hidd_open+0xee>
 8003c94:	4b37      	ldr	r3, [pc, #220]	; (8003d74 <hidd_open+0x1b8>)
 8003c96:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0301 	and.w	r3, r3, #1
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d000      	beq.n	8003ca6 <hidd_open+0xea>
 8003ca4:	be00      	bkpt	0x0000
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e05f      	b.n	8003d6a <hidd_open+0x1ae>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *) p_desc;
 8003caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003cae:	619a      	str	r2, [r3, #24]
 8003cb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cb2:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	781b      	ldrb	r3, [r3, #0]
 8003cbc:	461a      	mov	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8003cc2:	637b      	str	r3, [r7, #52]	; 0x34
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	7919      	ldrb	r1, [r3, #4]
 8003cc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cca:	3302      	adds	r3, #2
 8003ccc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003cce:	3201      	adds	r2, #1
 8003cd0:	79f8      	ldrb	r0, [r7, #7]
 8003cd2:	9201      	str	r2, [sp, #4]
 8003cd4:	9300      	str	r3, [sp, #0]
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	460a      	mov	r2, r1
 8003cda:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003cdc:	f002 f96c 	bl	8005fb8 <usbd_open_edpt_pair>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	f083 0301 	eor.w	r3, r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d00a      	beq.n	8003d02 <hidd_open+0x146>
 8003cec:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <hidd_open+0x1b8>)
 8003cee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d000      	beq.n	8003cfe <hidd_open+0x142>
 8003cfc:	be00      	bkpt	0x0000
 8003cfe:	2300      	movs	r3, #0
 8003d00:	e033      	b.n	8003d6a <hidd_open+0x1ae>

  if ( desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT ) p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	799b      	ldrb	r3, [r3, #6]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d103      	bne.n	8003d12 <hidd_open+0x156>
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	79da      	ldrb	r2, [r3, #7]
 8003d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d10:	70da      	strb	r2, [r3, #3]

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8003d12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d14:	2201      	movs	r2, #1
 8003d16:	711a      	strb	r2, [r3, #4]
  p_hid->itf_num       = desc_itf->bInterfaceNumber;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	789a      	ldrb	r2, [r3, #2]
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const*) p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8003d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	3307      	adds	r3, #7
 8003d26:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	881a      	ldrh	r2, [r3, #0]
 8003d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d2e:	80da      	strh	r2, [r3, #6]

  // Prepare for output endpoint
  if (p_hid->ep_out)
 8003d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d32:	789b      	ldrb	r3, [r3, #2]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d017      	beq.n	8003d68 <hidd_open+0x1ac>
  {
    if ( !usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)) )
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	7899      	ldrb	r1, [r3, #2]
 8003d3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3e:	f103 0210 	add.w	r2, r3, #16
 8003d42:	79f8      	ldrb	r0, [r7, #7]
 8003d44:	2308      	movs	r3, #8
 8003d46:	f002 fa0d 	bl	8006164 <usbd_edpt_xfer>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	f083 0301 	eor.w	r3, r3, #1
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d008      	beq.n	8003d68 <hidd_open+0x1ac>
    {
      TU_LOG_FAILED();
      TU_BREAKPOINT();
 8003d56:	4b07      	ldr	r3, [pc, #28]	; (8003d74 <hidd_open+0x1b8>)
 8003d58:	633b      	str	r3, [r7, #48]	; 0x30
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d000      	beq.n	8003d68 <hidd_open+0x1ac>
 8003d66:	be00      	bkpt	0x0000
    }
  }

  return drv_len;
 8003d68:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3740      	adds	r7, #64	; 0x40
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	e000edf0 	.word	0xe000edf0
 8003d78:	2000124c 	.word	0x2000124c

08003d7c <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b092      	sub	sp, #72	; 0x48
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	4603      	mov	r3, r0
 8003d84:	603a      	str	r2, [r7, #0]
 8003d86:	71fb      	strb	r3, [r7, #7]
 8003d88:	460b      	mov	r3, r1
 8003d8a:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	781b      	ldrb	r3, [r3, #0]
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	b2db      	uxtb	r3, r3
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d001      	beq.n	8003d9e <hidd_control_xfer_cb+0x22>
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e1b8      	b.n	8004110 <hidd_control_xfer_cb+0x394>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t) request->wIndex);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	889b      	ldrh	r3, [r3, #4]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7ff fde6 	bl	8003978 <get_index_by_itfnum>
 8003dac:	4603      	mov	r3, r0
 8003dae:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8003db2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d001      	beq.n	8003dbe <hidd_control_xfer_cb+0x42>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e1a8      	b.n	8004110 <hidd_control_xfer_cb+0x394>

  hidd_interface_t* p_hid = &_hidd_itf[hid_itf];
 8003dbe:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	00db      	lsls	r3, r3, #3
 8003dc6:	1a9b      	subs	r3, r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4a9a      	ldr	r2, [pc, #616]	; (8004034 <hidd_control_xfer_cb+0x2b8>)
 8003dcc:	4413      	add	r3, r2
 8003dce:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d146      	bne.n	8003e6c <hidd_control_xfer_cb+0xf0>
  {
    //------------- STD Request -------------//
    if ( stage == CONTROL_STAGE_SETUP )
 8003dde:	79bb      	ldrb	r3, [r7, #6]
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	f040 8194 	bne.w	800410e <hidd_control_xfer_cb+0x392>
    {
      uint8_t const desc_type  = tu_u16_high(request->wValue);
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	885b      	ldrh	r3, [r3, #2]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003dee:	8b7b      	ldrh	r3, [r7, #26]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      //uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	785b      	ldrb	r3, [r3, #1]
 8003dfe:	2b06      	cmp	r3, #6
 8003e00:	d11c      	bne.n	8003e3c <hidd_control_xfer_cb+0xc0>
 8003e02:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e06:	2b21      	cmp	r3, #33	; 0x21
 8003e08:	d118      	bne.n	8003e3c <hidd_control_xfer_cb+0xc0>
      {
        TU_VERIFY(p_hid->hid_descriptor);
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <hidd_control_xfer_cb+0x9a>
 8003e12:	2300      	movs	r3, #0
 8003e14:	e17c      	b.n	8004110 <hidd_control_xfer_cb+0x394>
        TU_VERIFY(tud_control_xfer(rhport, request, (void*)(uintptr_t) p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	699a      	ldr	r2, [r3, #24]
 8003e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	79f8      	ldrb	r0, [r7, #7]
 8003e24:	6839      	ldr	r1, [r7, #0]
 8003e26:	f002 fb95 	bl	8006554 <tud_control_xfer>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	f083 0301 	eor.w	r3, r3, #1
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 816b 	beq.w	800410e <hidd_control_xfer_cb+0x392>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	e169      	b.n	8004110 <hidd_control_xfer_cb+0x394>
      }
      else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT)
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	785b      	ldrb	r3, [r3, #1]
 8003e40:	2b06      	cmp	r3, #6
 8003e42:	d111      	bne.n	8003e68 <hidd_control_xfer_cb+0xec>
 8003e44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e48:	2b22      	cmp	r3, #34	; 0x22
 8003e4a:	d10d      	bne.n	8003e68 <hidd_control_xfer_cb+0xec>
      {
        uint8_t const * desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8003e4c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fd fd55 	bl	8001900 <tud_hid_descriptor_report_cb>
 8003e56:	61f8      	str	r0, [r7, #28]
        tud_control_xfer(rhport, request, (void*)(uintptr_t) desc_report, p_hid->report_desc_len);
 8003e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e5a:	88db      	ldrh	r3, [r3, #6]
 8003e5c:	79f8      	ldrb	r0, [r7, #7]
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	6839      	ldr	r1, [r7, #0]
 8003e62:	f002 fb77 	bl	8006554 <tud_control_xfer>
      {
 8003e66:	e152      	b.n	800410e <hidd_control_xfer_cb+0x392>
      }
      else
      {
        return false; // stall unsupported request
 8003e68:	2300      	movs	r3, #0
 8003e6a:	e151      	b.n	8004110 <hidd_control_xfer_cb+0x394>
      }
    }
  }
  else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b20      	cmp	r3, #32
 8003e78:	f040 813c 	bne.w	80040f4 <hidd_control_xfer_cb+0x378>
  {
    //------------- Class Specific Request -------------//
    switch( request->bRequest )
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	785b      	ldrb	r3, [r3, #1]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	2b0a      	cmp	r3, #10
 8003e84:	f200 8134 	bhi.w	80040f0 <hidd_control_xfer_cb+0x374>
 8003e88:	a201      	add	r2, pc, #4	; (adr r2, 8003e90 <hidd_control_xfer_cb+0x114>)
 8003e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e8e:	bf00      	nop
 8003e90:	08003ebd 	.word	0x08003ebd
 8003e94:	08004089 	.word	0x08004089
 8003e98:	0800409f 	.word	0x0800409f
 8003e9c:	080040f1 	.word	0x080040f1
 8003ea0:	080040f1 	.word	0x080040f1
 8003ea4:	080040f1 	.word	0x080040f1
 8003ea8:	080040f1 	.word	0x080040f1
 8003eac:	080040f1 	.word	0x080040f1
 8003eb0:	08003f81 	.word	0x08003f81
 8003eb4:	0800403d 	.word	0x0800403d
 8003eb8:	080040b5 	.word	0x080040b5
    {
      case HID_REQ_CONTROL_GET_REPORT:
        if ( stage == CONTROL_STAGE_SETUP )
 8003ebc:	79bb      	ldrb	r3, [r7, #6]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	f040 811a 	bne.w	80040f8 <hidd_control_xfer_cb+0x37c>
        {
          uint8_t const report_type = tu_u16_high(request->wValue);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	885b      	ldrh	r3, [r3, #2]
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	827b      	strh	r3, [r7, #18]
 8003ecc:	8a7b      	ldrh	r3, [r7, #18]
 8003ece:	0a1b      	lsrs	r3, r3, #8
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	b2db      	uxtb	r3, r3
 8003ed4:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          uint8_t const report_id   = tu_u16_low(request->wValue);
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	885b      	ldrh	r3, [r3, #2]
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003ee0:	8abb      	ldrh	r3, [r7, #20]
 8003ee2:	b2db      	uxtb	r3, r3
 8003ee4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

          uint8_t* report_buf = p_hid->epin_buf;
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	3308      	adds	r3, #8
 8003eec:	63fb      	str	r3, [r7, #60]	; 0x3c
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	88db      	ldrh	r3, [r3, #6]
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	833b      	strh	r3, [r7, #24]
 8003ef6:	2308      	movs	r3, #8
 8003ef8:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003efa:	8b3a      	ldrh	r2, [r7, #24]
 8003efc:	8afb      	ldrh	r3, [r7, #22]
 8003efe:	4293      	cmp	r3, r2
 8003f00:	bf28      	it	cs
 8003f02:	4613      	movcs	r3, r2
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	877b      	strh	r3, [r7, #58]	; 0x3a

          uint16_t xferlen = 0;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	873b      	strh	r3, [r7, #56]	; 0x38

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1) )
 8003f0c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d00e      	beq.n	8003f32 <hidd_control_xfer_cb+0x1b6>
 8003f14:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d90b      	bls.n	8003f32 <hidd_control_xfer_cb+0x1b6>
          {
            *report_buf++ = report_id;
 8003f1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8003f24:	701a      	strb	r2, [r3, #0]
            req_len--;
 8003f26:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	877b      	strh	r3, [r7, #58]	; 0x3a

            xferlen++;
 8003f2c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f2e:	3301      	adds	r3, #1
 8003f30:	873b      	strh	r3, [r7, #56]	; 0x38
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8003f32:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8003f36:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 8003f3a:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 8003f3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	f7fd fb9e 	bl	8001684 <tud_hid_get_report_cb>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f4e:	4413      	add	r3, r2
 8003f50:	873b      	strh	r3, [r7, #56]	; 0x38
          TU_ASSERT( xferlen > 0 );
 8003f52:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d10a      	bne.n	8003f6e <hidd_control_xfer_cb+0x1f2>
 8003f58:	4b37      	ldr	r3, [pc, #220]	; (8004038 <hidd_control_xfer_cb+0x2bc>)
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d000      	beq.n	8003f6a <hidd_control_xfer_cb+0x1ee>
 8003f68:	be00      	bkpt	0x0000
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	e0d0      	b.n	8004110 <hidd_control_xfer_cb+0x394>

          tud_control_xfer(rhport, request, p_hid->epin_buf, xferlen);
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	f103 0208 	add.w	r2, r3, #8
 8003f74:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003f76:	79f8      	ldrb	r0, [r7, #7]
 8003f78:	6839      	ldr	r1, [r7, #0]
 8003f7a:	f002 faeb 	bl	8006554 <tud_control_xfer>
        }
      break;
 8003f7e:	e0bb      	b.n	80040f8 <hidd_control_xfer_cb+0x37c>

      case  HID_REQ_CONTROL_SET_REPORT:
        if ( stage == CONTROL_STAGE_SETUP )
 8003f80:	79bb      	ldrb	r3, [r7, #6]
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	d111      	bne.n	8003faa <hidd_control_xfer_cb+0x22e>
        {
          TU_VERIFY(request->wLength <= sizeof(p_hid->epout_buf));
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	88db      	ldrh	r3, [r3, #6]
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d901      	bls.n	8003f94 <hidd_control_xfer_cb+0x218>
 8003f90:	2300      	movs	r3, #0
 8003f92:	e0bd      	b.n	8004110 <hidd_control_xfer_cb+0x394>
          tud_control_xfer(rhport, request, p_hid->epout_buf, request->wLength);
 8003f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f96:	f103 0210 	add.w	r2, r3, #16
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	88db      	ldrh	r3, [r3, #6]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	79f8      	ldrb	r0, [r7, #7]
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	f002 fad6 	bl	8006554 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
      break;
 8003fa8:	e0a8      	b.n	80040fc <hidd_control_xfer_cb+0x380>
        else if ( stage == CONTROL_STAGE_ACK )
 8003faa:	79bb      	ldrb	r3, [r7, #6]
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	f040 80a5 	bne.w	80040fc <hidd_control_xfer_cb+0x380>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	885b      	ldrh	r3, [r3, #2]
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003fba:	897b      	ldrh	r3, [r7, #10]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          uint8_t const report_id   = tu_u16_low(request->wValue);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	885b      	ldrh	r3, [r3, #2]
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8003fce:	89bb      	ldrh	r3, [r7, #12]
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          uint8_t const* report_buf = p_hid->epout_buf;
 8003fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd8:	3310      	adds	r3, #16
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	88db      	ldrh	r3, [r3, #6]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	823b      	strh	r3, [r7, #16]
 8003fe4:	2308      	movs	r3, #8
 8003fe6:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8003fe8:	8a3a      	ldrh	r2, [r7, #16]
 8003fea:	89fb      	ldrh	r3, [r7, #14]
 8003fec:	4293      	cmp	r3, r2
 8003fee:	bf28      	it	cs
 8003ff0:	4613      	movcs	r3, r2
 8003ff2:	b29b      	uxth	r3, r3
 8003ff4:	867b      	strh	r3, [r7, #50]	; 0x32
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0]) )
 8003ff6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d00e      	beq.n	800401c <hidd_control_xfer_cb+0x2a0>
 8003ffe:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004000:	2b01      	cmp	r3, #1
 8004002:	d90b      	bls.n	800401c <hidd_control_xfer_cb+0x2a0>
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800400c:	429a      	cmp	r2, r3
 800400e:	d105      	bne.n	800401c <hidd_control_xfer_cb+0x2a0>
            report_buf++;
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	3301      	adds	r3, #1
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
            report_len--;
 8004016:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004018:	3b01      	subs	r3, #1
 800401a:	867b      	strh	r3, [r7, #50]	; 0x32
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 800401c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8004020:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8004024:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 8004028:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800402a:	9300      	str	r3, [sp, #0]
 800402c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402e:	f7fd fb3a 	bl	80016a6 <tud_hid_set_report_cb>
      break;
 8004032:	e063      	b.n	80040fc <hidd_control_xfer_cb+0x380>
 8004034:	2000124c 	.word	0x2000124c
 8004038:	e000edf0 	.word	0xe000edf0

      case HID_REQ_CONTROL_SET_IDLE:
        if ( stage == CONTROL_STAGE_SETUP )
 800403c:	79bb      	ldrb	r3, [r7, #6]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d15e      	bne.n	8004100 <hidd_control_xfer_cb+0x384>
        {
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	885b      	ldrh	r3, [r3, #2]
 8004046:	b29b      	uxth	r3, r3
 8004048:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800404a:	893b      	ldrh	r3, [r7, #8]
 800404c:	0a1b      	lsrs	r3, r3, #8
 800404e:	b29b      	uxth	r3, r3
 8004050:	b2da      	uxtb	r2, r3
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	715a      	strb	r2, [r3, #5]
          if ( tud_hid_set_idle_cb )
 8004056:	4b30      	ldr	r3, [pc, #192]	; (8004118 <hidd_control_xfer_cb+0x39c>)
 8004058:	2b00      	cmp	r3, #0
 800405a:	d00f      	beq.n	800407c <hidd_control_xfer_cb+0x300>
          {
            // stall request if callback return false
            TU_VERIFY( tud_hid_set_idle_cb( hid_itf, p_hid->idle_rate) );
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	795a      	ldrb	r2, [r3, #5]
 8004060:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f3af 8000 	nop.w
 800406c:	4603      	mov	r3, r0
 800406e:	f083 0301 	eor.w	r3, r3, #1
 8004072:	b2db      	uxtb	r3, r3
 8004074:	2b00      	cmp	r3, #0
 8004076:	d001      	beq.n	800407c <hidd_control_xfer_cb+0x300>
 8004078:	2300      	movs	r3, #0
 800407a:	e049      	b.n	8004110 <hidd_control_xfer_cb+0x394>
          }

          tud_control_status(rhport, request);
 800407c:	79fb      	ldrb	r3, [r7, #7]
 800407e:	6839      	ldr	r1, [r7, #0]
 8004080:	4618      	mov	r0, r3
 8004082:	f002 f9f5 	bl	8006470 <tud_control_status>
        }
      break;
 8004086:	e03b      	b.n	8004100 <hidd_control_xfer_cb+0x384>

      case HID_REQ_CONTROL_GET_IDLE:
        if ( stage == CONTROL_STAGE_SETUP )
 8004088:	79bb      	ldrb	r3, [r7, #6]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d13a      	bne.n	8004104 <hidd_control_xfer_cb+0x388>
        {
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 800408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004090:	1d5a      	adds	r2, r3, #5
 8004092:	79f8      	ldrb	r0, [r7, #7]
 8004094:	2301      	movs	r3, #1
 8004096:	6839      	ldr	r1, [r7, #0]
 8004098:	f002 fa5c 	bl	8006554 <tud_control_xfer>
        }
      break;
 800409c:	e032      	b.n	8004104 <hidd_control_xfer_cb+0x388>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if ( stage == CONTROL_STAGE_SETUP )
 800409e:	79bb      	ldrb	r3, [r7, #6]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d131      	bne.n	8004108 <hidd_control_xfer_cb+0x38c>
        {
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 80040a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a6:	1d1a      	adds	r2, r3, #4
 80040a8:	79f8      	ldrb	r0, [r7, #7]
 80040aa:	2301      	movs	r3, #1
 80040ac:	6839      	ldr	r1, [r7, #0]
 80040ae:	f002 fa51 	bl	8006554 <tud_control_xfer>
        }
      break;
 80040b2:	e029      	b.n	8004108 <hidd_control_xfer_cb+0x38c>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if ( stage == CONTROL_STAGE_SETUP )
 80040b4:	79bb      	ldrb	r3, [r7, #6]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d105      	bne.n	80040c6 <hidd_control_xfer_cb+0x34a>
        {
          tud_control_status(rhport, request);
 80040ba:	79fb      	ldrb	r3, [r7, #7]
 80040bc:	6839      	ldr	r1, [r7, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f002 f9d6 	bl	8006470 <tud_control_status>
          if (tud_hid_set_protocol_cb)
          {
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
          }
        }
      break;
 80040c4:	e022      	b.n	800410c <hidd_control_xfer_cb+0x390>
        else if ( stage == CONTROL_STAGE_ACK )
 80040c6:	79bb      	ldrb	r3, [r7, #6]
 80040c8:	2b03      	cmp	r3, #3
 80040ca:	d11f      	bne.n	800410c <hidd_control_xfer_cb+0x390>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	885b      	ldrh	r3, [r3, #2]
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d6:	711a      	strb	r2, [r3, #4]
          if (tud_hid_set_protocol_cb)
 80040d8:	4b10      	ldr	r3, [pc, #64]	; (800411c <hidd_control_xfer_cb+0x3a0>)
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d016      	beq.n	800410c <hidd_control_xfer_cb+0x390>
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 80040de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e0:	791a      	ldrb	r2, [r3, #4]
 80040e2:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fd faa9 	bl	8001640 <tud_hid_set_protocol_cb>
      break;
 80040ee:	e00d      	b.n	800410c <hidd_control_xfer_cb+0x390>

      default: return false; // stall unsupported request
 80040f0:	2300      	movs	r3, #0
 80040f2:	e00d      	b.n	8004110 <hidd_control_xfer_cb+0x394>
    }
  }else
  {
    return false; // stall unsupported request
 80040f4:	2300      	movs	r3, #0
 80040f6:	e00b      	b.n	8004110 <hidd_control_xfer_cb+0x394>
      break;
 80040f8:	bf00      	nop
 80040fa:	e008      	b.n	800410e <hidd_control_xfer_cb+0x392>
      break;
 80040fc:	bf00      	nop
 80040fe:	e006      	b.n	800410e <hidd_control_xfer_cb+0x392>
      break;
 8004100:	bf00      	nop
 8004102:	e004      	b.n	800410e <hidd_control_xfer_cb+0x392>
      break;
 8004104:	bf00      	nop
 8004106:	e002      	b.n	800410e <hidd_control_xfer_cb+0x392>
      break;
 8004108:	bf00      	nop
 800410a:	e000      	b.n	800410e <hidd_control_xfer_cb+0x392>
      break;
 800410c:	bf00      	nop
  }

  return true;
 800410e:	2301      	movs	r3, #1
}
 8004110:	4618      	mov	r0, r3
 8004112:	3740      	adds	r7, #64	; 0x40
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	00000000 	.word	0x00000000
 800411c:	08001641 	.word	0x08001641

08004120 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b088      	sub	sp, #32
 8004124:	af02      	add	r7, sp, #8
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4603      	mov	r3, r0
 800412a:	71fb      	strb	r3, [r7, #7]
 800412c:	460b      	mov	r3, r1
 800412e:	71bb      	strb	r3, [r7, #6]
 8004130:	4613      	mov	r3, r2
 8004132:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t instance = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	75fb      	strb	r3, [r7, #23]
  hidd_interface_t * p_hid = _hidd_itf;
 8004138:	4b36      	ldr	r3, [pc, #216]	; (8004214 <hidd_xfer_cb+0xf4>)
 800413a:	613b      	str	r3, [r7, #16]

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++)
 800413c:	2300      	movs	r3, #0
 800413e:	75fb      	strb	r3, [r7, #23]
 8004140:	e014      	b.n	800416c <hidd_xfer_cb+0x4c>
  {
    p_hid = &_hidd_itf[instance];
 8004142:	7dfa      	ldrb	r2, [r7, #23]
 8004144:	4613      	mov	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	4a31      	ldr	r2, [pc, #196]	; (8004214 <hidd_xfer_cb+0xf4>)
 800414e:	4413      	add	r3, r2
 8004150:	613b      	str	r3, [r7, #16]
    if ( (ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in) ) break;
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	789b      	ldrb	r3, [r3, #2]
 8004156:	79ba      	ldrb	r2, [r7, #6]
 8004158:	429a      	cmp	r2, r3
 800415a:	d00a      	beq.n	8004172 <hidd_xfer_cb+0x52>
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	785b      	ldrb	r3, [r3, #1]
 8004160:	79ba      	ldrb	r2, [r7, #6]
 8004162:	429a      	cmp	r2, r3
 8004164:	d005      	beq.n	8004172 <hidd_xfer_cb+0x52>
  for (instance = 0; instance < CFG_TUD_HID; instance++)
 8004166:	7dfb      	ldrb	r3, [r7, #23]
 8004168:	3301      	adds	r3, #1
 800416a:	75fb      	strb	r3, [r7, #23]
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0e7      	beq.n	8004142 <hidd_xfer_cb+0x22>
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8004172:	7dfb      	ldrb	r3, [r7, #23]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <hidd_xfer_cb+0x6e>
 8004178:	4b27      	ldr	r3, [pc, #156]	; (8004218 <hidd_xfer_cb+0xf8>)
 800417a:	60bb      	str	r3, [r7, #8]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d000      	beq.n	800418a <hidd_xfer_cb+0x6a>
 8004188:	be00      	bkpt	0x0000
 800418a:	2300      	movs	r3, #0
 800418c:	e03d      	b.n	800420a <hidd_xfer_cb+0xea>

  // Sent report successfully
  if (ep_addr == p_hid->ep_in)
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	785b      	ldrb	r3, [r3, #1]
 8004192:	79ba      	ldrb	r2, [r7, #6]
 8004194:	429a      	cmp	r2, r3
 8004196:	d10c      	bne.n	80041b2 <hidd_xfer_cb+0x92>
  {
    if (tud_hid_report_complete_cb)
 8004198:	4b20      	ldr	r3, [pc, #128]	; (800421c <hidd_xfer_cb+0xfc>)
 800419a:	2b00      	cmp	r3, #0
 800419c:	d034      	beq.n	8004208 <hidd_xfer_cb+0xe8>
    {
      tud_hid_report_complete_cb(instance, p_hid->epin_buf, (uint16_t) xferred_bytes);
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	f103 0108 	add.w	r1, r3, #8
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	7dfb      	ldrb	r3, [r7, #23]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fd fa56 	bl	800165c <tud_hid_report_complete_cb>
 80041b0:	e02a      	b.n	8004208 <hidd_xfer_cb+0xe8>
    }
  }
  // Received report
  else if (ep_addr == p_hid->ep_out)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	789b      	ldrb	r3, [r3, #2]
 80041b6:	79ba      	ldrb	r2, [r7, #6]
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d125      	bne.n	8004208 <hidd_xfer_cb+0xe8>
  {
    tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_INVALID, p_hid->epout_buf, (uint16_t) xferred_bytes);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	f103 0210 	add.w	r2, r3, #16
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	7df8      	ldrb	r0, [r7, #23]
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	4613      	mov	r3, r2
 80041cc:	2200      	movs	r2, #0
 80041ce:	2100      	movs	r1, #0
 80041d0:	f7fd fa69 	bl	80016a6 <tud_hid_set_report_cb>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	7899      	ldrb	r1, [r3, #2]
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f103 0210 	add.w	r2, r3, #16
 80041de:	79f8      	ldrb	r0, [r7, #7]
 80041e0:	2308      	movs	r3, #8
 80041e2:	f001 ffbf 	bl	8006164 <usbd_edpt_xfer>
 80041e6:	4603      	mov	r3, r0
 80041e8:	f083 0301 	eor.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <hidd_xfer_cb+0xe8>
 80041f2:	4b09      	ldr	r3, [pc, #36]	; (8004218 <hidd_xfer_cb+0xf8>)
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d000      	beq.n	8004204 <hidd_xfer_cb+0xe4>
 8004202:	be00      	bkpt	0x0000
 8004204:	2300      	movs	r3, #0
 8004206:	e000      	b.n	800420a <hidd_xfer_cb+0xea>
  }

  return true;
 8004208:	2301      	movs	r3, #1
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	2000124c 	.word	0x2000124c
 8004218:	e000edf0 	.word	0xe000edf0
 800421c:	0800165d 	.word	0x0800165d

08004220 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b08a      	sub	sp, #40	; 0x28
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	4613      	mov	r3, r2
 800422c:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004238:	e00b      	b.n	8004252 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 800423a:	6a3b      	ldr	r3, [r7, #32]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	61ba      	str	r2, [r7, #24]
 8004242:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	601a      	str	r2, [r3, #0]
}
 800424a:	bf00      	nop
    ff_buf += 4;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	3304      	adds	r3, #4
 8004250:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8004252:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004254:	1e5a      	subs	r2, r3, #1
 8004256:	84fa      	strh	r2, [r7, #38]	; 0x26
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1ee      	bne.n	800423a <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 0303 	and.w	r3, r3, #3
 8004264:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004266:	7ffb      	ldrb	r3, [r7, #31]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d009      	beq.n	8004280 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8004272:	7ffa      	ldrb	r2, [r7, #31]
 8004274:	f107 0310 	add.w	r3, r7, #16
 8004278:	4619      	mov	r1, r3
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f004 f93a 	bl	80084f4 <memcpy>
  }
}
 8004280:	bf00      	nop
 8004282:	3728      	adds	r7, #40	; 0x28
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08a      	sub	sp, #40	; 0x28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	4613      	mov	r3, r2
 8004294:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	089b      	lsrs	r3, r3, #2
 800429e:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80042a0:	e008      	b.n	80042b4 <_ff_pull_const_addr+0x2c>
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	3304      	adds	r3, #4
 80042b2:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80042b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042b6:	1e5a      	subs	r2, r3, #1
 80042b8:	84fa      	strh	r2, [r7, #38]	; 0x26
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f1      	bne.n	80042a2 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 80042be:	88fb      	ldrh	r3, [r7, #6]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80042c8:	7ffb      	ldrb	r3, [r7, #31]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 80042ce:	2300      	movs	r3, #0
 80042d0:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 80042d2:	7ffa      	ldrb	r2, [r7, #31]
 80042d4:	f107 0314 	add.w	r3, r7, #20
 80042d8:	68b9      	ldr	r1, [r7, #8]
 80042da:	4618      	mov	r0, r3
 80042dc:	f004 f90a 	bl	80084f4 <memcpy>

    *reg_tx = tmp32;
 80042e0:	697a      	ldr	r2, [r7, #20]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	601a      	str	r2, [r3, #0]
  }
}
 80042e6:	bf00      	nop
 80042e8:	3728      	adds	r7, #40	; 0x28
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b084      	sub	sp, #16
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	60f8      	str	r0, [r7, #12]
 80042f6:	60b9      	str	r1, [r7, #8]
 80042f8:	4613      	mov	r3, r2
 80042fa:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	88fa      	ldrh	r2, [r7, #6]
 8004302:	68f9      	ldr	r1, [r7, #12]
 8004304:	88c9      	ldrh	r1, [r1, #6]
 8004306:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800430a:	b289      	uxth	r1, r1
 800430c:	fb01 f202 	mul.w	r2, r1, r2
 8004310:	1898      	adds	r0, r3, r2
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	88db      	ldrh	r3, [r3, #6]
 8004316:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800431a:	b29b      	uxth	r3, r3
 800431c:	461a      	mov	r2, r3
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	f004 f8e8 	bl	80084f4 <memcpy>
}
 8004324:	bf00      	nop
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08e      	sub	sp, #56	; 0x38
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	4611      	mov	r1, r2
 8004338:	461a      	mov	r2, r3
 800433a:	460b      	mov	r3, r1
 800433c:	80fb      	strh	r3, [r7, #6]
 800433e:	4613      	mov	r3, r2
 8004340:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	889a      	ldrh	r2, [r3, #4]
 8004346:	88bb      	ldrh	r3, [r7, #4]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 800434c:	88fa      	ldrh	r2, [r7, #6]
 800434e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	88db      	ldrh	r3, [r3, #6]
 8004358:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800435c:	b29b      	uxth	r3, r3
 800435e:	461a      	mov	r2, r3
 8004360:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004362:	fb13 f302 	smulbb	r3, r3, r2
 8004366:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	88db      	ldrh	r3, [r3, #6]
 800436c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004370:	b29b      	uxth	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004376:	fb13 f302 	smulbb	r3, r3, r2
 800437a:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	88ba      	ldrh	r2, [r7, #4]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	88c9      	ldrh	r1, [r1, #6]
 8004386:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800438a:	b289      	uxth	r1, r1
 800438c:	fb01 f202 	mul.w	r2, r1, r2
 8004390:	4413      	add	r3, r2
 8004392:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8004394:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <_ff_push_n+0x76>
 800439c:	2b01      	cmp	r3, #1
 800439e:	d022      	beq.n	80043e6 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 80043a0:	e09e      	b.n	80044e0 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80043a2:	88fa      	ldrh	r2, [r7, #6]
 80043a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d80d      	bhi.n	80043c6 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80043aa:	88fb      	ldrh	r3, [r7, #6]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	88d2      	ldrh	r2, [r2, #6]
 80043b0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80043b4:	b292      	uxth	r2, r2
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043c0:	f004 f898 	bl	80084f4 <memcpy>
      break;
 80043c4:	e08c      	b.n	80044e0 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80043c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043c8:	461a      	mov	r2, r3
 80043ca:	68b9      	ldr	r1, [r7, #8]
 80043cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043ce:	f004 f891 	bl	80084f4 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6818      	ldr	r0, [r3, #0]
 80043d6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80043d8:	68ba      	ldr	r2, [r7, #8]
 80043da:	4413      	add	r3, r2
 80043dc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80043de:	4619      	mov	r1, r3
 80043e0:	f004 f888 	bl	80084f4 <memcpy>
      break;
 80043e4:	e07c      	b.n	80044e0 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d80f      	bhi.n	800440e <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	88db      	ldrh	r3, [r3, #6]
 80043f2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	461a      	mov	r2, r3
 80043fa:	88fb      	ldrh	r3, [r7, #6]
 80043fc:	fb13 f302 	smulbb	r3, r3, r2
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004408:	f7ff ff0a 	bl	8004220 <_ff_push_const_addr>
      break;
 800440c:	e067      	b.n	80044de <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800440e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004410:	f023 0303 	bic.w	r3, r3, #3
 8004414:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8004416:	8c3b      	ldrh	r3, [r7, #32]
 8004418:	461a      	mov	r2, r3
 800441a:	68b9      	ldr	r1, [r7, #8]
 800441c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800441e:	f7ff feff 	bl	8004220 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8004422:	8c3b      	ldrh	r3, [r7, #32]
 8004424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004426:	4413      	add	r3, r2
 8004428:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 800442a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800442c:	b2db      	uxtb	r3, r3
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004436:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800443a:	2b00      	cmp	r3, #0
 800443c:	d043      	beq.n	80044c6 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8004442:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004446:	b29b      	uxth	r3, r3
 8004448:	f1c3 0304 	rsb	r3, r3, #4
 800444c:	b29a      	uxth	r2, r3
 800444e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004450:	837b      	strh	r3, [r7, #26]
 8004452:	4613      	mov	r3, r2
 8004454:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004456:	8b7a      	ldrh	r2, [r7, #26]
 8004458:	8b3b      	ldrh	r3, [r7, #24]
 800445a:	4293      	cmp	r3, r2
 800445c:	bf28      	it	cs
 800445e:	4613      	movcs	r3, r2
 8004460:	b29b      	uxth	r3, r3
 8004462:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8004466:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800446a:	b29b      	uxth	r3, r3
 800446c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8004478:	f107 0314 	add.w	r3, r7, #20
 800447c:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800447e:	e007      	b.n	8004490 <_ff_push_n+0x164>
 8004480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004482:	1c53      	adds	r3, r2, #1
 8004484:	62bb      	str	r3, [r7, #40]	; 0x28
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	1c59      	adds	r1, r3, #1
 800448a:	6339      	str	r1, [r7, #48]	; 0x30
 800448c:	7812      	ldrb	r2, [r2, #0]
 800448e:	701a      	strb	r2, [r3, #0]
 8004490:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004494:	1e5a      	subs	r2, r3, #1
 8004496:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80044a4:	e007      	b.n	80044b6 <_ff_push_n+0x18a>
 80044a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044a8:	1c53      	adds	r3, r2, #1
 80044aa:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ae:	1c59      	adds	r1, r3, #1
 80044b0:	6339      	str	r1, [r7, #48]	; 0x30
 80044b2:	7812      	ldrb	r2, [r2, #0]
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80044ba:	1e5a      	subs	r2, r3, #1
 80044bc:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1f0      	bne.n	80044a6 <_ff_push_n+0x17a>
 80044c4:	e002      	b.n	80044cc <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 80044cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d005      	beq.n	80044de <_ff_push_n+0x1b2>
 80044d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80044d4:	461a      	mov	r2, r3
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044da:	f7ff fea1 	bl	8004220 <_ff_push_const_addr>
      break;
 80044de:	bf00      	nop
}
 80044e0:	bf00      	nop
 80044e2:	3738      	adds	r7, #56	; 0x38
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	4613      	mov	r3, r2
 80044f4:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	88fa      	ldrh	r2, [r7, #6]
 80044fc:	68f9      	ldr	r1, [r7, #12]
 80044fe:	88c9      	ldrh	r1, [r1, #6]
 8004500:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004504:	b289      	uxth	r1, r1
 8004506:	fb01 f202 	mul.w	r2, r1, r2
 800450a:	1899      	adds	r1, r3, r2
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	88db      	ldrh	r3, [r3, #6]
 8004510:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004514:	b29b      	uxth	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	68b8      	ldr	r0, [r7, #8]
 800451a:	f003 ffeb 	bl	80084f4 <memcpy>
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}

08004526 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8004526:	b580      	push	{r7, lr}
 8004528:	b08e      	sub	sp, #56	; 0x38
 800452a:	af00      	add	r7, sp, #0
 800452c:	60f8      	str	r0, [r7, #12]
 800452e:	60b9      	str	r1, [r7, #8]
 8004530:	4611      	mov	r1, r2
 8004532:	461a      	mov	r2, r3
 8004534:	460b      	mov	r3, r1
 8004536:	80fb      	strh	r3, [r7, #6]
 8004538:	4613      	mov	r3, r2
 800453a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	889a      	ldrh	r2, [r3, #4]
 8004540:	88bb      	ldrh	r3, [r7, #4]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8004546:	88fa      	ldrh	r2, [r7, #6]
 8004548:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800454a:	1ad3      	subs	r3, r2, r3
 800454c:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	88db      	ldrh	r3, [r3, #6]
 8004552:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004556:	b29b      	uxth	r3, r3
 8004558:	461a      	mov	r2, r3
 800455a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800455c:	fb13 f302 	smulbb	r3, r3, r2
 8004560:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	88db      	ldrh	r3, [r3, #6]
 8004566:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800456a:	b29b      	uxth	r3, r3
 800456c:	461a      	mov	r2, r3
 800456e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004570:	fb13 f302 	smulbb	r3, r3, r2
 8004574:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	88ba      	ldrh	r2, [r7, #4]
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	88c9      	ldrh	r1, [r1, #6]
 8004580:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004584:	b289      	uxth	r1, r1
 8004586:	fb01 f202 	mul.w	r2, r1, r2
 800458a:	4413      	add	r3, r2
 800458c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800458e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <_ff_pull_n+0x76>
 8004596:	2b01      	cmp	r3, #1
 8004598:	d022      	beq.n	80045e0 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 800459a:	e0a0      	b.n	80046de <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800459c:	88fa      	ldrh	r2, [r7, #6]
 800459e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045a0:	429a      	cmp	r2, r3
 80045a2:	d80d      	bhi.n	80045c0 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80045a4:	88fb      	ldrh	r3, [r7, #6]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	88d2      	ldrh	r2, [r2, #6]
 80045aa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80045ae:	b292      	uxth	r2, r2
 80045b0:	fb02 f303 	mul.w	r3, r2, r3
 80045b4:	461a      	mov	r2, r3
 80045b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045b8:	68b8      	ldr	r0, [r7, #8]
 80045ba:	f003 ff9b 	bl	80084f4 <memcpy>
    break;
 80045be:	e08e      	b.n	80046de <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 80045c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045c2:	461a      	mov	r2, r3
 80045c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045c6:	68b8      	ldr	r0, [r7, #8]
 80045c8:	f003 ff94 	bl	80084f4 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 80045cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	18d0      	adds	r0, r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045d8:	4619      	mov	r1, r3
 80045da:	f003 ff8b 	bl	80084f4 <memcpy>
    break;
 80045de:	e07e      	b.n	80046de <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80045e0:	88fa      	ldrh	r2, [r7, #6]
 80045e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d80f      	bhi.n	8004608 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	88db      	ldrh	r3, [r3, #6]
 80045ec:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	461a      	mov	r2, r3
 80045f4:	88fb      	ldrh	r3, [r7, #6]
 80045f6:	fb13 f302 	smulbb	r3, r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	461a      	mov	r2, r3
 80045fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004600:	68b8      	ldr	r0, [r7, #8]
 8004602:	f7ff fe41 	bl	8004288 <_ff_pull_const_addr>
    break;
 8004606:	e069      	b.n	80046dc <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8004608:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800460a:	f023 0303 	bic.w	r3, r3, #3
 800460e:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8004610:	8c3b      	ldrh	r3, [r7, #32]
 8004612:	461a      	mov	r2, r3
 8004614:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004616:	68b8      	ldr	r0, [r7, #8]
 8004618:	f7ff fe36 	bl	8004288 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 800461c:	8c3b      	ldrh	r3, [r7, #32]
 800461e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004620:	4413      	add	r3, r2
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 8004624:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004626:	b2db      	uxtb	r3, r3
 8004628:	f003 0303 	and.w	r3, r3, #3
 800462c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 8004630:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004634:	2b00      	cmp	r3, #0
 8004636:	d045      	beq.n	80046c4 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800463c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004640:	b29b      	uxth	r3, r3
 8004642:	f1c3 0304 	rsb	r3, r3, #4
 8004646:	b29a      	uxth	r2, r3
 8004648:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800464a:	837b      	strh	r3, [r7, #26]
 800464c:	4613      	mov	r3, r2
 800464e:	833b      	strh	r3, [r7, #24]
 8004650:	8b7a      	ldrh	r2, [r7, #26]
 8004652:	8b3b      	ldrh	r3, [r7, #24]
 8004654:	4293      	cmp	r3, r2
 8004656:	bf28      	it	cs
 8004658:	4613      	movcs	r3, r2
 800465a:	b29b      	uxth	r3, r3
 800465c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 8004660:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004664:	b29b      	uxth	r3, r3
 8004666:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004670:	f107 0314 	add.w	r3, r7, #20
 8004674:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8004676:	e007      	b.n	8004688 <_ff_pull_n+0x162>
 8004678:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800467a:	1c53      	adds	r3, r2, #1
 800467c:	633b      	str	r3, [r7, #48]	; 0x30
 800467e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004680:	1c59      	adds	r1, r3, #1
 8004682:	62b9      	str	r1, [r7, #40]	; 0x28
 8004684:	7812      	ldrb	r2, [r2, #0]
 8004686:	701a      	strb	r2, [r3, #0]
 8004688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800468c:	1e5a      	subs	r2, r3, #1
 800468e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1f0      	bne.n	8004678 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800469c:	e007      	b.n	80046ae <_ff_pull_n+0x188>
 800469e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046a0:	1c53      	adds	r3, r2, #1
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
 80046a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a6:	1c59      	adds	r1, r3, #1
 80046a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80046aa:	7812      	ldrb	r2, [r2, #0]
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80046b2:	1e5a      	subs	r2, r3, #1
 80046b4:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1f0      	bne.n	800469e <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 80046bc:	697a      	ldr	r2, [r7, #20]
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	601a      	str	r2, [r3, #0]
 80046c2:	e002      	b.n	80046ca <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 80046ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <_ff_pull_n+0x1b6>
 80046d0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80046d2:	461a      	mov	r2, r3
 80046d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046d6:	68b8      	ldr	r0, [r7, #8]
 80046d8:	f7ff fdd6 	bl	8004288 <_ff_pull_const_addr>
    break;
 80046dc:	bf00      	nop
  }
}
 80046de:	bf00      	nop
 80046e0:	3738      	adds	r7, #56	; 0x38
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 80046e6:	b480      	push	{r7}
 80046e8:	b085      	sub	sp, #20
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	80fb      	strh	r3, [r7, #6]
 80046f0:	460b      	mov	r3, r1
 80046f2:	80bb      	strh	r3, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 80046f8:	88ba      	ldrh	r2, [r7, #4]
 80046fa:	887b      	ldrh	r3, [r7, #2]
 80046fc:	4413      	add	r3, r2
 80046fe:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8004700:	88ba      	ldrh	r2, [r7, #4]
 8004702:	89fb      	ldrh	r3, [r7, #14]
 8004704:	429a      	cmp	r2, r3
 8004706:	d804      	bhi.n	8004712 <advance_index+0x2c>
 8004708:	89fa      	ldrh	r2, [r7, #14]
 800470a:	88fb      	ldrh	r3, [r7, #6]
 800470c:	005b      	lsls	r3, r3, #1
 800470e:	429a      	cmp	r2, r3
 8004710:	db08      	blt.n	8004724 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	005b      	lsls	r3, r3, #1
 8004716:	b29b      	uxth	r3, r3
 8004718:	425b      	negs	r3, r3
 800471a:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 800471c:	89fa      	ldrh	r2, [r7, #14]
 800471e:	89bb      	ldrh	r3, [r7, #12]
 8004720:	4413      	add	r3, r2
 8004722:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8004724:	89fb      	ldrh	r3, [r7, #14]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b08a      	sub	sp, #40	; 0x28
 8004736:	af00      	add	r7, sp, #0
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	4611      	mov	r1, r2
 800473e:	461a      	mov	r2, r3
 8004740:	460b      	mov	r3, r1
 8004742:	80fb      	strh	r3, [r7, #6]
 8004744:	4613      	mov	r3, r2
 8004746:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	889b      	ldrh	r3, [r3, #4]
 800474c:	847b      	strh	r3, [r7, #34]	; 0x22
 800474e:	88fb      	ldrh	r3, [r7, #6]
 8004750:	843b      	strh	r3, [r7, #32]
 8004752:	88bb      	ldrh	r3, [r7, #4]
 8004754:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004756:	8c3a      	ldrh	r2, [r7, #32]
 8004758:	8bfb      	ldrh	r3, [r7, #30]
 800475a:	429a      	cmp	r2, r3
 800475c:	d304      	bcc.n	8004768 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800475e:	8c3a      	ldrh	r2, [r7, #32]
 8004760:	8bfb      	ldrh	r3, [r7, #30]
 8004762:	1ad3      	subs	r3, r2, r3
 8004764:	b29b      	uxth	r3, r3
 8004766:	e008      	b.n	800477a <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004768:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	b29a      	uxth	r2, r3
 800476e:	8c39      	ldrh	r1, [r7, #32]
 8004770:	8bfb      	ldrh	r3, [r7, #30]
 8004772:	1acb      	subs	r3, r1, r3
 8004774:	b29b      	uxth	r3, r3
 8004776:	4413      	add	r3, r2
 8004778:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800477a:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800477c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <_tu_fifo_peek+0x54>
 8004782:	2300      	movs	r3, #0
 8004784:	e037      	b.n	80047f6 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	889b      	ldrh	r3, [r3, #4]
 800478a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800478c:	429a      	cmp	r2, r3
 800478e:	d91b      	bls.n	80047c8 <_tu_fifo_peek+0x96>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	61bb      	str	r3, [r7, #24]
 8004794:	88fb      	ldrh	r3, [r7, #6]
 8004796:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	889b      	ldrh	r3, [r3, #4]
 800479c:	8afa      	ldrh	r2, [r7, #22]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d305      	bcc.n	80047ae <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	889b      	ldrh	r3, [r3, #4]
 80047a6:	8afa      	ldrh	r2, [r7, #22]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	82bb      	strh	r3, [r7, #20]
 80047ac:	e004      	b.n	80047b8 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80047ae:	69bb      	ldr	r3, [r7, #24]
 80047b0:	889a      	ldrh	r2, [r3, #4]
 80047b2:	8afb      	ldrh	r3, [r7, #22]
 80047b4:	4413      	add	r3, r2
 80047b6:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	8aba      	ldrh	r2, [r7, #20]
 80047bc:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80047be:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80047c0:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	889b      	ldrh	r3, [r3, #4]
 80047c6:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	889b      	ldrh	r3, [r3, #4]
 80047cc:	827b      	strh	r3, [r7, #18]
 80047ce:	88bb      	ldrh	r3, [r7, #4]
 80047d0:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80047d2:	e003      	b.n	80047dc <_tu_fifo_peek+0xaa>
 80047d4:	8a3a      	ldrh	r2, [r7, #16]
 80047d6:	8a7b      	ldrh	r3, [r7, #18]
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	823b      	strh	r3, [r7, #16]
 80047dc:	8a7a      	ldrh	r2, [r7, #18]
 80047de:	8a3b      	ldrh	r3, [r7, #16]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d9f7      	bls.n	80047d4 <_tu_fifo_peek+0xa2>
  return idx;
 80047e4:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80047e6:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 80047e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047ea:	461a      	mov	r2, r3
 80047ec:	68b9      	ldr	r1, [r7, #8]
 80047ee:	68f8      	ldr	r0, [r7, #12]
 80047f0:	f7ff fe7a 	bl	80044e8 <_ff_pull>

  return true;
 80047f4:	2301      	movs	r3, #1
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3728      	adds	r7, #40	; 0x28
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08c      	sub	sp, #48	; 0x30
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	4611      	mov	r1, r2
 800480a:	461a      	mov	r2, r3
 800480c:	460b      	mov	r3, r1
 800480e:	80fb      	strh	r3, [r7, #6]
 8004810:	4613      	mov	r3, r2
 8004812:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	889b      	ldrh	r3, [r3, #4]
 8004818:	847b      	strh	r3, [r7, #34]	; 0x22
 800481a:	88bb      	ldrh	r3, [r7, #4]
 800481c:	843b      	strh	r3, [r7, #32]
 800481e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004820:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8004822:	8c3a      	ldrh	r2, [r7, #32]
 8004824:	8bfb      	ldrh	r3, [r7, #30]
 8004826:	429a      	cmp	r2, r3
 8004828:	d304      	bcc.n	8004834 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 800482a:	8c3a      	ldrh	r2, [r7, #32]
 800482c:	8bfb      	ldrh	r3, [r7, #30]
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	e008      	b.n	8004846 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004836:	005b      	lsls	r3, r3, #1
 8004838:	b29a      	uxth	r2, r3
 800483a:	8c39      	ldrh	r1, [r7, #32]
 800483c:	8bfb      	ldrh	r3, [r7, #30]
 800483e:	1acb      	subs	r3, r1, r3
 8004840:	b29b      	uxth	r3, r3
 8004842:	4413      	add	r3, r2
 8004844:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8004846:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8004848:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800484a:	2b00      	cmp	r3, #0
 800484c:	d101      	bne.n	8004852 <_tu_fifo_peek_n+0x54>
 800484e:	2300      	movs	r3, #0
 8004850:	e041      	b.n	80048d6 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	889b      	ldrh	r3, [r3, #4]
 8004856:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004858:	429a      	cmp	r2, r3
 800485a:	d91b      	bls.n	8004894 <_tu_fifo_peek_n+0x96>
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	61bb      	str	r3, [r7, #24]
 8004860:	88bb      	ldrh	r3, [r7, #4]
 8004862:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	889b      	ldrh	r3, [r3, #4]
 8004868:	8afa      	ldrh	r2, [r7, #22]
 800486a:	429a      	cmp	r2, r3
 800486c:	d305      	bcc.n	800487a <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	889b      	ldrh	r3, [r3, #4]
 8004872:	8afa      	ldrh	r2, [r7, #22]
 8004874:	1ad3      	subs	r3, r2, r3
 8004876:	82bb      	strh	r3, [r7, #20]
 8004878:	e004      	b.n	8004884 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	889a      	ldrh	r2, [r3, #4]
 800487e:	8afb      	ldrh	r3, [r7, #22]
 8004880:	4413      	add	r3, r2
 8004882:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	8aba      	ldrh	r2, [r7, #20]
 8004888:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800488a:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800488c:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	889b      	ldrh	r3, [r3, #4]
 8004892:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8004894:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004896:	88fb      	ldrh	r3, [r7, #6]
 8004898:	429a      	cmp	r2, r3
 800489a:	d201      	bcs.n	80048a0 <_tu_fifo_peek_n+0xa2>
 800489c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800489e:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	889b      	ldrh	r3, [r3, #4]
 80048a4:	827b      	strh	r3, [r7, #18]
 80048a6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80048a8:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80048aa:	e003      	b.n	80048b4 <_tu_fifo_peek_n+0xb6>
 80048ac:	8a3a      	ldrh	r2, [r7, #16]
 80048ae:	8a7b      	ldrh	r3, [r7, #18]
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	823b      	strh	r3, [r7, #16]
 80048b4:	8a7a      	ldrh	r2, [r7, #18]
 80048b6:	8a3b      	ldrh	r3, [r7, #16]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d9f7      	bls.n	80048ac <_tu_fifo_peek_n+0xae>
  return idx;
 80048bc:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80048be:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 80048c0:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80048c2:	88fa      	ldrh	r2, [r7, #6]
 80048c4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80048c8:	9300      	str	r3, [sp, #0]
 80048ca:	460b      	mov	r3, r1
 80048cc:	68b9      	ldr	r1, [r7, #8]
 80048ce:	68f8      	ldr	r0, [r7, #12]
 80048d0:	f7ff fe29 	bl	8004526 <_ff_pull_n>

  return n;
 80048d4:	88fb      	ldrh	r3, [r7, #6]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3728      	adds	r7, #40	; 0x28
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}

080048de <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b092      	sub	sp, #72	; 0x48
 80048e2:	af02      	add	r7, sp, #8
 80048e4:	60f8      	str	r0, [r7, #12]
 80048e6:	60b9      	str	r1, [r7, #8]
 80048e8:	4611      	mov	r1, r2
 80048ea:	461a      	mov	r2, r3
 80048ec:	460b      	mov	r3, r1
 80048ee:	80fb      	strh	r3, [r7, #6]
 80048f0:	4613      	mov	r3, r2
 80048f2:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 80048f4:	88fb      	ldrh	r3, [r7, #6]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <_tu_fifo_write_n+0x20>
 80048fa:	2300      	movs	r3, #0
 80048fc:	e0bc      	b.n	8004a78 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	891b      	ldrh	r3, [r3, #8]
 8004902:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	895b      	ldrh	r3, [r3, #10]
 8004908:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	79db      	ldrb	r3, [r3, #7]
 8004912:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d036      	beq.n	8004990 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	889b      	ldrh	r3, [r3, #4]
 8004926:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004928:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800492a:	853b      	strh	r3, [r7, #40]	; 0x28
 800492c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800492e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004930:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004932:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004934:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004936:	847b      	strh	r3, [r7, #34]	; 0x22
 8004938:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800493a:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 800493c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800493e:	8c3b      	ldrh	r3, [r7, #32]
 8004940:	429a      	cmp	r2, r3
 8004942:	d304      	bcc.n	800494e <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8004944:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004946:	8c3b      	ldrh	r3, [r7, #32]
 8004948:	1ad3      	subs	r3, r2, r3
 800494a:	b29b      	uxth	r3, r3
 800494c:	e008      	b.n	8004960 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800494e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	b29a      	uxth	r2, r3
 8004954:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004956:	8c3b      	ldrh	r3, [r7, #32]
 8004958:	1acb      	subs	r3, r1, r3
 800495a:	b29b      	uxth	r3, r3
 800495c:	4413      	add	r3, r2
 800495e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004960:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004962:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004964:	8bfb      	ldrh	r3, [r7, #30]
 8004966:	429a      	cmp	r2, r3
 8004968:	d904      	bls.n	8004974 <_tu_fifo_write_n+0x96>
 800496a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800496c:	8bfb      	ldrh	r3, [r7, #30]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	e000      	b.n	8004976 <_tu_fifo_write_n+0x98>
 8004974:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004976:	867b      	strh	r3, [r7, #50]	; 0x32
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800497c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800497e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004980:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004982:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004984:	4293      	cmp	r3, r2
 8004986:	bf28      	it	cs
 8004988:	4613      	movcs	r3, r2
 800498a:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 800498c:	80fb      	strh	r3, [r7, #6]
 800498e:	e04b      	b.n	8004a28 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	889b      	ldrh	r3, [r3, #4]
 8004994:	88fa      	ldrh	r2, [r7, #6]
 8004996:	429a      	cmp	r2, r3
 8004998:	d317      	bcc.n	80049ca <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 800499a:	797b      	ldrb	r3, [r7, #5]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d10e      	bne.n	80049be <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80049a0:	88fb      	ldrh	r3, [r7, #6]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	8892      	ldrh	r2, [r2, #4]
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	88d2      	ldrh	r2, [r2, #6]
 80049ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80049b0:	b292      	uxth	r2, r2
 80049b2:	fb02 f303 	mul.w	r3, r2, r3
 80049b6:	461a      	mov	r2, r3
 80049b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ba:	4413      	add	r3, r2
 80049bc:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	889b      	ldrh	r3, [r3, #4]
 80049c2:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 80049c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049c6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80049c8:	e02e      	b.n	8004a28 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	889b      	ldrh	r3, [r3, #4]
 80049ce:	83bb      	strh	r3, [r7, #28]
 80049d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80049d2:	837b      	strh	r3, [r7, #26]
 80049d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80049d6:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 80049d8:	8b7a      	ldrh	r2, [r7, #26]
 80049da:	8b3b      	ldrh	r3, [r7, #24]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d304      	bcc.n	80049ea <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 80049e0:	8b7a      	ldrh	r2, [r7, #26]
 80049e2:	8b3b      	ldrh	r3, [r7, #24]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	e008      	b.n	80049fc <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80049ea:	8bbb      	ldrh	r3, [r7, #28]
 80049ec:	005b      	lsls	r3, r3, #1
 80049ee:	b29a      	uxth	r2, r3
 80049f0:	8b79      	ldrh	r1, [r7, #26]
 80049f2:	8b3b      	ldrh	r3, [r7, #24]
 80049f4:	1acb      	subs	r3, r1, r3
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	4413      	add	r3, r2
 80049fa:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 80049fc:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 80049fe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004a00:	88fb      	ldrh	r3, [r7, #6]
 8004a02:	441a      	add	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	889b      	ldrh	r3, [r3, #4]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	db0c      	blt.n	8004a28 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	8898      	ldrh	r0, [r3, #4]
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	889a      	ldrh	r2, [r3, #4]
 8004a16:	88fb      	ldrh	r3, [r7, #6]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a1e:	4619      	mov	r1, r3
 8004a20:	f7ff fe61 	bl	80046e6 <advance_index>
 8004a24:	4603      	mov	r3, r0
 8004a26:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8004a28:	88fb      	ldrh	r3, [r7, #6]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d023      	beq.n	8004a76 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	889b      	ldrh	r3, [r3, #4]
 8004a32:	82fb      	strh	r3, [r7, #22]
 8004a34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004a36:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8004a38:	e003      	b.n	8004a42 <_tu_fifo_write_n+0x164>
 8004a3a:	8aba      	ldrh	r2, [r7, #20]
 8004a3c:	8afb      	ldrh	r3, [r7, #22]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	82bb      	strh	r3, [r7, #20]
 8004a42:	8afa      	ldrh	r2, [r7, #22]
 8004a44:	8abb      	ldrh	r3, [r7, #20]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d9f7      	bls.n	8004a3a <_tu_fifo_write_n+0x15c>
  return idx;
 8004a4a:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004a4c:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8004a4e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004a50:	88fa      	ldrh	r2, [r7, #6]
 8004a52:	797b      	ldrb	r3, [r7, #5]
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	460b      	mov	r3, r1
 8004a58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004a5a:	68f8      	ldr	r0, [r7, #12]
 8004a5c:	f7ff fc66 	bl	800432c <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	889b      	ldrh	r3, [r3, #4]
 8004a64:	88fa      	ldrh	r2, [r7, #6]
 8004a66:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff fe3c 	bl	80046e6 <advance_index>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	461a      	mov	r2, r3
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004a76:	88fb      	ldrh	r3, [r7, #6]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3740      	adds	r7, #64	; 0x40
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b086      	sub	sp, #24
 8004a84:	af02      	add	r7, sp, #8
 8004a86:	60f8      	str	r0, [r7, #12]
 8004a88:	60b9      	str	r1, [r7, #8]
 8004a8a:	4611      	mov	r1, r2
 8004a8c:	461a      	mov	r2, r3
 8004a8e:	460b      	mov	r3, r1
 8004a90:	80fb      	strh	r3, [r7, #6]
 8004a92:	4613      	mov	r3, r2
 8004a94:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	891b      	ldrh	r3, [r3, #8]
 8004a9a:	b298      	uxth	r0, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	895b      	ldrh	r3, [r3, #10]
 8004aa0:	b29b      	uxth	r3, r3
 8004aa2:	88f9      	ldrh	r1, [r7, #6]
 8004aa4:	797a      	ldrb	r2, [r7, #5]
 8004aa6:	9201      	str	r2, [sp, #4]
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	4603      	mov	r3, r0
 8004aac:	460a      	mov	r2, r1
 8004aae:	68b9      	ldr	r1, [r7, #8]
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f7ff fea4 	bl	80047fe <_tu_fifo_peek_n>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8898      	ldrh	r0, [r3, #4]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	895b      	ldrh	r3, [r3, #10]
 8004ac2:	b29b      	uxth	r3, r3
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	f7ff fe0d 	bl	80046e6 <advance_index>
 8004acc:	4603      	mov	r3, r0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	8899      	ldrh	r1, [r3, #4]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	891b      	ldrh	r3, [r3, #8]
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	895b      	ldrh	r3, [r3, #10]
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	81f9      	strh	r1, [r7, #14]
 8004af8:	81ba      	strh	r2, [r7, #12]
 8004afa:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004afc:	89ba      	ldrh	r2, [r7, #12]
 8004afe:	897b      	ldrh	r3, [r7, #10]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d304      	bcc.n	8004b0e <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004b04:	89ba      	ldrh	r2, [r7, #12]
 8004b06:	897b      	ldrh	r3, [r7, #10]
 8004b08:	1ad3      	subs	r3, r2, r3
 8004b0a:	b29b      	uxth	r3, r3
 8004b0c:	e008      	b.n	8004b20 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004b0e:	89fb      	ldrh	r3, [r7, #14]
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	89b9      	ldrh	r1, [r7, #12]
 8004b16:	897b      	ldrh	r3, [r7, #10]
 8004b18:	1acb      	subs	r3, r1, r3
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	4413      	add	r3, r2
 8004b1e:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004b20:	687a      	ldr	r2, [r7, #4]
 8004b22:	8892      	ldrh	r2, [r2, #4]
 8004b24:	4293      	cmp	r3, r2
 8004b26:	bf2c      	ite	cs
 8004b28:	2301      	movcs	r3, #1
 8004b2a:	2300      	movcc	r3, #0
 8004b2c:	b2db      	uxtb	r3, r3
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3714      	adds	r7, #20
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr

08004b3a <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	891b      	ldrh	r3, [r3, #8]
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	895b      	ldrh	r3, [r3, #10]
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	6839      	ldr	r1, [r7, #0]
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f7ff fded 	bl	8004732 <_tu_fifo_peek>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	8898      	ldrh	r0, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	895b      	ldrh	r3, [r3, #10]
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	7bfa      	ldrb	r2, [r7, #15]
 8004b68:	b292      	uxth	r2, r2
 8004b6a:	4619      	mov	r1, r3
 8004b6c:	f7ff fdbb 	bl	80046e6 <advance_index>
 8004b70:	4603      	mov	r3, r0
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <tu_fifo_read_n_const_addr_full_words>:
{
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	60f8      	str	r0, [r7, #12]
 8004b8a:	60b9      	str	r1, [r7, #8]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004b90:	88fa      	ldrh	r2, [r7, #6]
 8004b92:	2301      	movs	r3, #1
 8004b94:	68b9      	ldr	r1, [r7, #8]
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff ff72 	bl	8004a80 <_tu_fifo_read_n>
 8004b9c:	4603      	mov	r3, r0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3710      	adds	r7, #16
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b086      	sub	sp, #24
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
 8004bae:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	891b      	ldrh	r3, [r3, #8]
 8004bb4:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff ff91 	bl	8004ade <tu_fifo_full>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00c      	beq.n	8004bdc <tu_fifo_write+0x36>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	79db      	ldrb	r3, [r3, #7]
 8004bc6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	f083 0301 	eor.w	r3, r3, #1
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <tu_fifo_write+0x36>
  {
    ret = false;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	75fb      	strb	r3, [r7, #23]
 8004bda:	e022      	b.n	8004c22 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	889b      	ldrh	r3, [r3, #4]
 8004be0:	823b      	strh	r3, [r7, #16]
 8004be2:	8abb      	ldrh	r3, [r7, #20]
 8004be4:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8004be6:	e003      	b.n	8004bf0 <tu_fifo_write+0x4a>
 8004be8:	89fa      	ldrh	r2, [r7, #14]
 8004bea:	8a3b      	ldrh	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	81fb      	strh	r3, [r7, #14]
 8004bf0:	8a3a      	ldrh	r2, [r7, #16]
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d9f7      	bls.n	8004be8 <tu_fifo_write+0x42>
  return idx;
 8004bf8:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004bfa:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8004bfc:	8a7b      	ldrh	r3, [r7, #18]
 8004bfe:	461a      	mov	r2, r3
 8004c00:	6839      	ldr	r1, [r7, #0]
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f7ff fb73 	bl	80042ee <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	889b      	ldrh	r3, [r3, #4]
 8004c0c:	8ab9      	ldrh	r1, [r7, #20]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff fd68 	bl	80046e6 <advance_index>
 8004c16:	4603      	mov	r3, r0
 8004c18:	461a      	mov	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	811a      	strh	r2, [r3, #8]

    ret = true;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004c22:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	60b9      	str	r1, [r7, #8]
 8004c36:	4613      	mov	r3, r2
 8004c38:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004c3a:	88fa      	ldrh	r2, [r7, #6]
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fe4c 	bl	80048de <_tu_fifo_write_n>
 8004c46:	4603      	mov	r3, r0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b083      	sub	sp, #12
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8004c64:	2301      	movs	r3, #1
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
	...

08004c74 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8004c78:	4b06      	ldr	r3, [pc, #24]	; (8004c94 <tud_mounted+0x20>)
 8004c7a:	785b      	ldrb	r3, [r3, #1]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	bf14      	ite	ne
 8004c82:	2301      	movne	r3, #1
 8004c84:	2300      	moveq	r3, #0
 8004c86:	b2db      	uxtb	r3, r3
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	20001268 	.word	0x20001268

08004c98 <tud_suspended>:

bool tud_suspended(void)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8004c9c:	4b07      	ldr	r3, [pc, #28]	; (8004cbc <tud_suspended+0x24>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	bf14      	ite	ne
 8004caa:	2301      	movne	r3, #1
 8004cac:	2300      	moveq	r3, #0
 8004cae:	b2db      	uxtb	r3, r3
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	20001268 	.word	0x20001268

08004cc0 <tud_remote_wakeup>:

bool tud_remote_wakeup(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en );
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	; (8004d04 <tud_remote_wakeup+0x44>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00d      	beq.n	8004cee <tud_remote_wakeup+0x2e>
 8004cd2:	4b0c      	ldr	r3, [pc, #48]	; (8004d04 <tud_remote_wakeup+0x44>)
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	f003 0310 	and.w	r3, r3, #16
 8004cda:	b2db      	uxtb	r3, r3
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d006      	beq.n	8004cee <tud_remote_wakeup+0x2e>
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <tud_remote_wakeup+0x44>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	b2db      	uxtb	r3, r3
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d101      	bne.n	8004cf2 <tud_remote_wakeup+0x32>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e005      	b.n	8004cfe <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <tud_remote_wakeup+0x48>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f002 fa2c 	bl	8007154 <dcd_remote_wakeup>
  return true;
 8004cfc:	2301      	movs	r3, #1
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	bd80      	pop	{r7, pc}
 8004d02:	bf00      	nop
 8004d04:	20001268 	.word	0x20001268
 8004d08:	20000019 	.word	0x20000019

08004d0c <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <tud_inited+0x1c>)
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	2bff      	cmp	r3, #255	; 0xff
 8004d16:	bf14      	ite	ne
 8004d18:	2301      	movne	r3, #1
 8004d1a:	2300      	moveq	r3, #0
 8004d1c:	b2db      	uxtb	r3, r3
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d26:	4770      	bx	lr
 8004d28:	20000019 	.word	0x20000019

08004d2c <tud_init>:

bool tud_init (uint8_t rhport)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	; 0x28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	4603      	mov	r3, r0
 8004d34:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8004d36:	f7ff ffe9 	bl	8004d0c <tud_inited>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <tud_init+0x18>
 8004d40:	2301      	movs	r3, #1
 8004d42:	e078      	b.n	8004e36 <tud_init+0x10a>
  TU_LOG_USBD("USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8004d44:	222b      	movs	r2, #43	; 0x2b
 8004d46:	2100      	movs	r1, #0
 8004d48:	483d      	ldr	r0, [pc, #244]	; (8004e40 <tud_init+0x114>)
 8004d4a:	f003 fba6 	bl	800849a <memset>
 8004d4e:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <tud_init+0x118>)
 8004d50:	617b      	str	r3, [r7, #20]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	3304      	adds	r3, #4
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7ff ff7a 	bl	8004c50 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004d5c:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8004d5e:	4a3a      	ldr	r2, [pc, #232]	; (8004e48 <tud_init+0x11c>)
 8004d60:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <tud_init+0x11c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d10a      	bne.n	8004d80 <tud_init+0x54>
 8004d6a:	4b38      	ldr	r3, [pc, #224]	; (8004e4c <tud_init+0x120>)
 8004d6c:	61bb      	str	r3, [r7, #24]
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d000      	beq.n	8004d7c <tud_init+0x50>
 8004d7a:	be00      	bkpt	0x0000
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e05a      	b.n	8004e36 <tud_init+0x10a>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8004d80:	4b33      	ldr	r3, [pc, #204]	; (8004e50 <tud_init+0x124>)
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8004d86:	4833      	ldr	r0, [pc, #204]	; (8004e54 <tud_init+0x128>)
 8004d88:	f3af 8000 	nop.w
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4a32      	ldr	r2, [pc, #200]	; (8004e58 <tud_init+0x12c>)
 8004d90:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004d92:	2300      	movs	r3, #0
 8004d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004d98:	e03b      	b.n	8004e12 <tud_init+0xe6>
 8004d9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d9e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004da0:	2300      	movs	r3, #0
 8004da2:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004da4:	4b2b      	ldr	r3, [pc, #172]	; (8004e54 <tud_init+0x128>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	7cfa      	ldrb	r2, [r7, #19]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d209      	bcs.n	8004dc2 <tud_init+0x96>
    driver = &_app_driver[drvid];
 8004dae:	4b2a      	ldr	r3, [pc, #168]	; (8004e58 <tud_init+0x12c>)
 8004db0:	6819      	ldr	r1, [r3, #0]
 8004db2:	7cfa      	ldrb	r2, [r7, #19]
 8004db4:	4613      	mov	r3, r2
 8004db6:	005b      	lsls	r3, r3, #1
 8004db8:	4413      	add	r3, r2
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	440b      	add	r3, r1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	e00f      	b.n	8004de2 <tud_init+0xb6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004dc2:	4b24      	ldr	r3, [pc, #144]	; (8004e54 <tud_init+0x128>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	7cfa      	ldrb	r2, [r7, #19]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d80a      	bhi.n	8004de2 <tud_init+0xb6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004dcc:	7cfb      	ldrb	r3, [r7, #19]
 8004dce:	4a21      	ldr	r2, [pc, #132]	; (8004e54 <tud_init+0x128>)
 8004dd0:	7812      	ldrb	r2, [r2, #0]
 8004dd2:	1a9a      	subs	r2, r3, r2
 8004dd4:	4613      	mov	r3, r2
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	4413      	add	r3, r2
 8004dda:	00db      	lsls	r3, r3, #3
 8004ddc:	4a1f      	ldr	r2, [pc, #124]	; (8004e5c <tud_init+0x130>)
 8004dde:	4413      	add	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]
  return driver;
 8004de2:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8004de4:	623b      	str	r3, [r7, #32]
    TU_ASSERT(driver);
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d10a      	bne.n	8004e02 <tud_init+0xd6>
 8004dec:	4b17      	ldr	r3, [pc, #92]	; (8004e4c <tud_init+0x120>)
 8004dee:	61fb      	str	r3, [r7, #28]
 8004df0:	69fb      	ldr	r3, [r7, #28]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f003 0301 	and.w	r3, r3, #1
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d000      	beq.n	8004dfe <tud_init+0xd2>
 8004dfc:	be00      	bkpt	0x0000
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e019      	b.n	8004e36 <tud_init+0x10a>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8004e02:	6a3b      	ldr	r3, [r7, #32]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004e08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004e12:	4b10      	ldr	r3, [pc, #64]	; (8004e54 <tud_init+0x128>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d9bd      	bls.n	8004d9a <tud_init+0x6e>
  }

  _usbd_rhport = rhport;
 8004e1e:	4a10      	ldr	r2, [pc, #64]	; (8004e60 <tud_init+0x134>)
 8004e20:	79fb      	ldrb	r3, [r7, #7]
 8004e22:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8004e24:	79fb      	ldrb	r3, [r7, #7]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 f8a8 	bl	8006f7c <dcd_init>
  dcd_int_enable(rhport);
 8004e2c:	79fb      	ldrb	r3, [r7, #7]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f002 f92c 	bl	800708c <dcd_int_enable>

  return true;
 8004e34:	2301      	movs	r3, #1
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3728      	adds	r7, #40	; 0x28
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	20001268 	.word	0x20001268
 8004e44:	2000001c 	.word	0x2000001c
 8004e48:	2000135c 	.word	0x2000135c
 8004e4c:	e000edf0 	.word	0xe000edf0
 8004e50:	00000000 	.word	0x00000000
 8004e54:	20001298 	.word	0x20001298
 8004e58:	20001294 	.word	0x20001294
 8004e5c:	080087a8 	.word	0x080087a8
 8004e60:	20000019 	.word	0x20000019

08004e64 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b088      	sub	sp, #32
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004e6e:	2300      	movs	r3, #0
 8004e70:	77fb      	strb	r3, [r7, #31]
 8004e72:	e039      	b.n	8004ee8 <configuration_reset+0x84>
 8004e74:	7ffb      	ldrb	r3, [r7, #31]
 8004e76:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004e7c:	4b27      	ldr	r3, [pc, #156]	; (8004f1c <configuration_reset+0xb8>)
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	7cfa      	ldrb	r2, [r7, #19]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d209      	bcs.n	8004e9a <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 8004e86:	4b26      	ldr	r3, [pc, #152]	; (8004f20 <configuration_reset+0xbc>)
 8004e88:	6819      	ldr	r1, [r3, #0]
 8004e8a:	7cfa      	ldrb	r2, [r7, #19]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	005b      	lsls	r3, r3, #1
 8004e90:	4413      	add	r3, r2
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	440b      	add	r3, r1
 8004e96:	60fb      	str	r3, [r7, #12]
 8004e98:	e00f      	b.n	8004eba <configuration_reset+0x56>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004e9a:	4b20      	ldr	r3, [pc, #128]	; (8004f1c <configuration_reset+0xb8>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	7cfa      	ldrb	r2, [r7, #19]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d80a      	bhi.n	8004eba <configuration_reset+0x56>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004ea4:	7cfb      	ldrb	r3, [r7, #19]
 8004ea6:	4a1d      	ldr	r2, [pc, #116]	; (8004f1c <configuration_reset+0xb8>)
 8004ea8:	7812      	ldrb	r2, [r2, #0]
 8004eaa:	1a9a      	subs	r2, r3, r2
 8004eac:	4613      	mov	r3, r2
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00db      	lsls	r3, r3, #3
 8004eb4:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <configuration_reset+0xc0>)
 8004eb6:	4413      	add	r3, r2
 8004eb8:	60fb      	str	r3, [r7, #12]
  return driver;
 8004eba:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8004ebc:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver, );
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d109      	bne.n	8004ed8 <configuration_reset+0x74>
 8004ec4:	4b18      	ldr	r3, [pc, #96]	; (8004f28 <configuration_reset+0xc4>)
 8004ec6:	617b      	str	r3, [r7, #20]
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01e      	beq.n	8004f12 <configuration_reset+0xae>
 8004ed4:	be00      	bkpt	0x0000
 8004ed6:	e01c      	b.n	8004f12 <configuration_reset+0xae>
    driver->reset(rhport);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	79fa      	ldrb	r2, [r7, #7]
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004ee2:	7ffb      	ldrb	r3, [r7, #31]
 8004ee4:	3301      	adds	r3, #1
 8004ee6:	77fb      	strb	r3, [r7, #31]
 8004ee8:	4b0c      	ldr	r3, [pc, #48]	; (8004f1c <configuration_reset+0xb8>)
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	7ffa      	ldrb	r2, [r7, #31]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d9c0      	bls.n	8004e74 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8004ef2:	222b      	movs	r2, #43	; 0x2b
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	480d      	ldr	r0, [pc, #52]	; (8004f2c <configuration_reset+0xc8>)
 8004ef8:	f003 facf 	bl	800849a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8004efc:	2210      	movs	r2, #16
 8004efe:	21ff      	movs	r1, #255	; 0xff
 8004f00:	480b      	ldr	r0, [pc, #44]	; (8004f30 <configuration_reset+0xcc>)
 8004f02:	f003 faca 	bl	800849a <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8004f06:	220c      	movs	r2, #12
 8004f08:	21ff      	movs	r1, #255	; 0xff
 8004f0a:	480a      	ldr	r0, [pc, #40]	; (8004f34 <configuration_reset+0xd0>)
 8004f0c:	f003 fac5 	bl	800849a <memset>
 8004f10:	e000      	b.n	8004f14 <configuration_reset+0xb0>
    TU_ASSERT(driver, );
 8004f12:	bf00      	nop
}
 8004f14:	3720      	adds	r7, #32
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20001298 	.word	0x20001298
 8004f20:	20001294 	.word	0x20001294
 8004f24:	080087a8 	.word	0x080087a8
 8004f28:	e000edf0 	.word	0xe000edf0
 8004f2c:	20001268 	.word	0x20001268
 8004f30:	2000126b 	.word	0x2000126b
 8004f34:	2000127b 	.word	0x2000127b

08004f38 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b082      	sub	sp, #8
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	4603      	mov	r3, r0
 8004f40:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7ff ff8d 	bl	8004e64 <configuration_reset>
  usbd_control_reset();
 8004f4a:	f001 fb73 	bl	8006634 <usbd_control_reset>
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 8004f58:	b590      	push	{r4, r7, lr}
 8004f5a:	b093      	sub	sp, #76	; 0x4c
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 8004f64:	f7ff fed2 	bl	8004d0c <tud_inited>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	f083 0301 	eor.w	r3, r3, #1
 8004f6e:	b2db      	uxtb	r3, r3
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f040 814c 	bne.w	800520e <tud_task_ext+0x2b6>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8004f76:	4baa      	ldr	r3, [pc, #680]	; (8005220 <tud_task_ext+0x2c8>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f7c:	f107 030c 	add.w	r3, r7, #12
 8004f80:	633b      	str	r3, [r7, #48]	; 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	62bb      	str	r3, [r7, #40]	; 0x28
  qhdl->interrupt_set(false);
 8004f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	2000      	movs	r0, #0
 8004f90:	4798      	blx	r3
}
 8004f92:	bf00      	nop

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8004f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f96:	3304      	adds	r3, #4
 8004f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff fdcd 	bl	8004b3a <tu_fifo_read>
 8004fa0:	4603      	mov	r3, r0
 8004fa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(true);
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2001      	movs	r0, #1
 8004fb0:	4798      	blx	r3
}
 8004fb2:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8004fb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fb8:	f083 0301 	eor.w	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	f040 8127 	bne.w	8005212 <tud_task_ext+0x2ba>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8004fc4:	7b7b      	ldrb	r3, [r7, #13]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	2b07      	cmp	r3, #7
 8004fca:	f200 810a 	bhi.w	80051e2 <tud_task_ext+0x28a>
 8004fce:	a201      	add	r2, pc, #4	; (adr r2, 8004fd4 <tud_task_ext+0x7c>)
 8004fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd4:	08004ff5 	.word	0x08004ff5
 8004fd8:	08005005 	.word	0x08005005
 8004fdc:	080051e3 	.word	0x080051e3
 8004fe0:	08005189 	.word	0x08005189
 8004fe4:	080051b9 	.word	0x080051b9
 8004fe8:	0800501b 	.word	0x0800501b
 8004fec:	08005089 	.word	0x08005089
 8004ff0:	080051d3 	.word	0x080051d3
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8004ff4:	7b3b      	ldrb	r3, [r7, #12]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7ff ff9e 	bl	8004f38 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 8004ffc:	7c3a      	ldrb	r2, [r7, #16]
 8004ffe:	4b89      	ldr	r3, [pc, #548]	; (8005224 <tud_task_ext+0x2cc>)
 8005000:	709a      	strb	r2, [r3, #2]
      break;
 8005002:	e103      	b.n	800520c <tud_task_ext+0x2b4>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8005004:	7b3b      	ldrb	r3, [r7, #12]
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff ff96 	bl	8004f38 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 800500c:	4b86      	ldr	r3, [pc, #536]	; (8005228 <tud_task_ext+0x2d0>)
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 80f1 	beq.w	80051f6 <tud_task_ext+0x29e>
 8005014:	f3af 8000 	nop.w
      break;
 8005018:	e0ed      	b.n	80051f6 <tud_task_ext+0x29e>
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        TU_LOG_USBD("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 800501a:	4a82      	ldr	r2, [pc, #520]	; (8005224 <tud_task_ext+0x2cc>)
 800501c:	7813      	ldrb	r3, [r2, #0]
 800501e:	f043 0301 	orr.w	r3, r3, #1
 8005022:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8005024:	4a7f      	ldr	r2, [pc, #508]	; (8005224 <tud_task_ext+0x2cc>)
 8005026:	7fd3      	ldrb	r3, [r2, #31]
 8005028:	f36f 0300 	bfc	r3, #0, #1
 800502c:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800502e:	4a7d      	ldr	r2, [pc, #500]	; (8005224 <tud_task_ext+0x2cc>)
 8005030:	7fd3      	ldrb	r3, [r2, #31]
 8005032:	f36f 0382 	bfc	r3, #2, #1
 8005036:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 8005038:	4a7a      	ldr	r2, [pc, #488]	; (8005224 <tud_task_ext+0x2cc>)
 800503a:	f892 3020 	ldrb.w	r3, [r2, #32]
 800503e:	f36f 0300 	bfc	r3, #0, #1
 8005042:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 8005046:	4a77      	ldr	r2, [pc, #476]	; (8005224 <tud_task_ext+0x2cc>)
 8005048:	f892 3020 	ldrb.w	r3, [r2, #32]
 800504c:	f36f 0382 	bfc	r3, #2, #1
 8005050:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 8005054:	7b3a      	ldrb	r2, [r7, #12]
 8005056:	f107 030c 	add.w	r3, r7, #12
 800505a:	3304      	adds	r3, #4
 800505c:	4619      	mov	r1, r3
 800505e:	4610      	mov	r0, r2
 8005060:	f000 f908 	bl	8005274 <process_control_request>
 8005064:	4603      	mov	r3, r0
 8005066:	f083 0301 	eor.w	r3, r3, #1
 800506a:	b2db      	uxtb	r3, r3
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 80c4 	beq.w	80051fa <tud_task_ext+0x2a2>
        {
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8005072:	7b3b      	ldrb	r3, [r7, #12]
 8005074:	2100      	movs	r1, #0
 8005076:	4618      	mov	r0, r3
 8005078:	f002 fbb6 	bl	80077e8 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800507c:	7b3b      	ldrb	r3, [r7, #12]
 800507e:	2180      	movs	r1, #128	; 0x80
 8005080:	4618      	mov	r0, r3
 8005082:	f002 fbb1 	bl	80077e8 <dcd_edpt_stall>
        }
      break;
 8005086:	e0b8      	b.n	80051fa <tud_task_ext+0x2a2>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8005088:	7c3b      	ldrb	r3, [r7, #16]
 800508a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800508e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005092:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005094:	7fbb      	ldrb	r3, [r7, #30]
 8005096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800509a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800509c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80050a0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050a4:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80050a6:	7ffb      	ldrb	r3, [r7, #31]
 80050a8:	09db      	lsrs	r3, r3, #7
 80050aa:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80050ac:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80050b0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80050b4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80050b8:	495a      	ldr	r1, [pc, #360]	; (8005224 <tud_task_ext+0x2cc>)
 80050ba:	0052      	lsls	r2, r2, #1
 80050bc:	440a      	add	r2, r1
 80050be:	4413      	add	r3, r2
 80050c0:	f103 0218 	add.w	r2, r3, #24
 80050c4:	79d3      	ldrb	r3, [r2, #7]
 80050c6:	f36f 0300 	bfc	r3, #0, #1
 80050ca:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80050cc:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80050d0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80050d4:	4953      	ldr	r1, [pc, #332]	; (8005224 <tud_task_ext+0x2cc>)
 80050d6:	0052      	lsls	r2, r2, #1
 80050d8:	440a      	add	r2, r1
 80050da:	4413      	add	r3, r2
 80050dc:	f103 0218 	add.w	r2, r3, #24
 80050e0:	79d3      	ldrb	r3, [r2, #7]
 80050e2:	f36f 0382 	bfc	r3, #2, #1
 80050e6:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 80050e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d107      	bne.n	8005100 <tud_task_ext+0x1a8>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 80050f0:	7b38      	ldrb	r0, [r7, #12]
 80050f2:	7c7a      	ldrb	r2, [r7, #17]
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80050fa:	f001 fad1 	bl	80066a0 <usbd_control_xfer_cb>

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 80050fe:	e085      	b.n	800520c <tud_task_ext+0x2b4>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8005100:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005104:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005108:	4946      	ldr	r1, [pc, #280]	; (8005224 <tud_task_ext+0x2cc>)
 800510a:	0052      	lsls	r2, r2, #1
 800510c:	440a      	add	r2, r1
 800510e:	4413      	add	r3, r2
 8005110:	3313      	adds	r3, #19
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	777b      	strb	r3, [r7, #29]
  usbd_class_driver_t const * driver = NULL;
 8005116:	2300      	movs	r3, #0
 8005118:	61bb      	str	r3, [r7, #24]
  if ( drvid < _app_driver_count ) {
 800511a:	4b44      	ldr	r3, [pc, #272]	; (800522c <tud_task_ext+0x2d4>)
 800511c:	781b      	ldrb	r3, [r3, #0]
 800511e:	7f7a      	ldrb	r2, [r7, #29]
 8005120:	429a      	cmp	r2, r3
 8005122:	d209      	bcs.n	8005138 <tud_task_ext+0x1e0>
    driver = &_app_driver[drvid];
 8005124:	4b42      	ldr	r3, [pc, #264]	; (8005230 <tud_task_ext+0x2d8>)
 8005126:	6819      	ldr	r1, [r3, #0]
 8005128:	7f7a      	ldrb	r2, [r7, #29]
 800512a:	4613      	mov	r3, r2
 800512c:	005b      	lsls	r3, r3, #1
 800512e:	4413      	add	r3, r2
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	440b      	add	r3, r1
 8005134:	61bb      	str	r3, [r7, #24]
 8005136:	e00f      	b.n	8005158 <tud_task_ext+0x200>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005138:	4b3c      	ldr	r3, [pc, #240]	; (800522c <tud_task_ext+0x2d4>)
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	7f7a      	ldrb	r2, [r7, #29]
 800513e:	429a      	cmp	r2, r3
 8005140:	d80a      	bhi.n	8005158 <tud_task_ext+0x200>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005142:	7f7b      	ldrb	r3, [r7, #29]
 8005144:	4a39      	ldr	r2, [pc, #228]	; (800522c <tud_task_ext+0x2d4>)
 8005146:	7812      	ldrb	r2, [r2, #0]
 8005148:	1a9a      	subs	r2, r3, r2
 800514a:	4613      	mov	r3, r2
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	4413      	add	r3, r2
 8005150:	00db      	lsls	r3, r3, #3
 8005152:	4a38      	ldr	r2, [pc, #224]	; (8005234 <tud_task_ext+0x2dc>)
 8005154:	4413      	add	r3, r2
 8005156:	61bb      	str	r3, [r7, #24]
  return driver;
 8005158:	69bb      	ldr	r3, [r7, #24]
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 800515a:	643b      	str	r3, [r7, #64]	; 0x40
          TU_ASSERT(driver, );
 800515c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800515e:	2b00      	cmp	r3, #0
 8005160:	d109      	bne.n	8005176 <tud_task_ext+0x21e>
 8005162:	4b35      	ldr	r3, [pc, #212]	; (8005238 <tud_task_ext+0x2e0>)
 8005164:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d051      	beq.n	8005216 <tud_task_ext+0x2be>
 8005172:	be00      	bkpt	0x0000
 8005174:	e04f      	b.n	8005216 <tud_task_ext+0x2be>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8005176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005178:	691c      	ldr	r4, [r3, #16]
 800517a:	7b38      	ldrb	r0, [r7, #12]
 800517c:	7c7a      	ldrb	r2, [r7, #17]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8005184:	47a0      	blx	r4
      break;
 8005186:	e041      	b.n	800520c <tud_task_ext+0x2b4>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8005188:	4b26      	ldr	r3, [pc, #152]	; (8005224 <tud_task_ext+0x2cc>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b00      	cmp	r3, #0
 8005194:	d033      	beq.n	80051fe <tud_task_ext+0x2a6>
        {
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8005196:	4b29      	ldr	r3, [pc, #164]	; (800523c <tud_task_ext+0x2e4>)
 8005198:	2b00      	cmp	r3, #0
 800519a:	d030      	beq.n	80051fe <tud_task_ext+0x2a6>
 800519c:	4b21      	ldr	r3, [pc, #132]	; (8005224 <tud_task_ext+0x2cc>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	bf14      	ite	ne
 80051aa:	2301      	movne	r3, #1
 80051ac:	2300      	moveq	r3, #0
 80051ae:	b2db      	uxtb	r3, r3
 80051b0:	4618      	mov	r0, r3
 80051b2:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 80051b6:	e022      	b.n	80051fe <tud_task_ext+0x2a6>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 80051b8:	4b1a      	ldr	r3, [pc, #104]	; (8005224 <tud_task_ext+0x2cc>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80051c0:	b2db      	uxtb	r3, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d01d      	beq.n	8005202 <tud_task_ext+0x2aa>
        {
          TU_LOG_USBD("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 80051c6:	4b1e      	ldr	r3, [pc, #120]	; (8005240 <tud_task_ext+0x2e8>)
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d01a      	beq.n	8005202 <tud_task_ext+0x2aa>
 80051cc:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 80051d0:	e017      	b.n	8005202 <tud_task_ext+0x2aa>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d016      	beq.n	8005206 <tud_task_ext+0x2ae>
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	4610      	mov	r0, r2
 80051de:	4798      	blx	r3
      break;
 80051e0:	e011      	b.n	8005206 <tud_task_ext+0x2ae>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 80051e2:	4b15      	ldr	r3, [pc, #84]	; (8005238 <tud_task_ext+0x2e0>)
 80051e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0301 	and.w	r3, r3, #1
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <tud_task_ext+0x2b2>
 80051f2:	be00      	bkpt	0x0000
      break;
 80051f4:	e009      	b.n	800520a <tud_task_ext+0x2b2>
      break;
 80051f6:	bf00      	nop
 80051f8:	e6bd      	b.n	8004f76 <tud_task_ext+0x1e>
      break;
 80051fa:	bf00      	nop
 80051fc:	e6bb      	b.n	8004f76 <tud_task_ext+0x1e>
      break;
 80051fe:	bf00      	nop
 8005200:	e6b9      	b.n	8004f76 <tud_task_ext+0x1e>
      break;
 8005202:	bf00      	nop
 8005204:	e6b7      	b.n	8004f76 <tud_task_ext+0x1e>
      break;
 8005206:	bf00      	nop
 8005208:	e6b5      	b.n	8004f76 <tud_task_ext+0x1e>
      break;
 800520a:	bf00      	nop
  {
 800520c:	e6b3      	b.n	8004f76 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 800520e:	bf00      	nop
 8005210:	e002      	b.n	8005218 <tud_task_ext+0x2c0>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005212:	bf00      	nop
 8005214:	e000      	b.n	8005218 <tud_task_ext+0x2c0>
          TU_ASSERT(driver, );
 8005216:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 8005218:	374c      	adds	r7, #76	; 0x4c
 800521a:	46bd      	mov	sp, r7
 800521c:	bd90      	pop	{r4, r7, pc}
 800521e:	bf00      	nop
 8005220:	2000135c 	.word	0x2000135c
 8005224:	20001268 	.word	0x20001268
 8005228:	00000000 	.word	0x00000000
 800522c:	20001298 	.word	0x20001298
 8005230:	20001294 	.word	0x20001294
 8005234:	080087a8 	.word	0x080087a8
 8005238:	e000edf0 	.word	0xe000edf0
	...

08005244 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	4603      	mov	r3, r0
 800524c:	60b9      	str	r1, [r7, #8]
 800524e:	607a      	str	r2, [r7, #4]
 8005250:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	4618      	mov	r0, r3
 8005258:	f001 f9f8 	bl	800664c <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	7bf8      	ldrb	r0, [r7, #15]
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	2101      	movs	r1, #1
 8005266:	4798      	blx	r3
 8005268:	4603      	mov	r3, r0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}
	...

08005274 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b09a      	sub	sp, #104	; 0x68
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	6039      	str	r1, [r7, #0]
 800527e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8005280:	2000      	movs	r0, #0
 8005282:	f001 f9e3 	bl	800664c <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d10a      	bne.n	80052aa <process_control_request+0x36>
 8005294:	4ba9      	ldr	r3, [pc, #676]	; (800553c <process_control_request+0x2c8>)
 8005296:	633b      	str	r3, [r7, #48]	; 0x30
 8005298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d000      	beq.n	80052a6 <process_control_request+0x32>
 80052a4:	be00      	bkpt	0x0000
 80052a6:	2300      	movs	r3, #0
 80052a8:	e2d3      	b.n	8005852 <process_control_request+0x5de>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b40      	cmp	r3, #64	; 0x40
 80052b6:	d10f      	bne.n	80052d8 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 80052b8:	4ba1      	ldr	r3, [pc, #644]	; (8005540 <process_control_request+0x2cc>)
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <process_control_request+0x4e>
 80052be:	2300      	movs	r3, #0
 80052c0:	e2c7      	b.n	8005852 <process_control_request+0x5de>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 80052c2:	489f      	ldr	r0, [pc, #636]	; (8005540 <process_control_request+0x2cc>)
 80052c4:	f001 f9c2 	bl	800664c <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 80052c8:	79fb      	ldrb	r3, [r7, #7]
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	2101      	movs	r1, #1
 80052ce:	4618      	mov	r0, r3
 80052d0:	f3af 8000 	nop.w
 80052d4:	4603      	mov	r3, r0
 80052d6:	e2bc      	b.n	8005852 <process_control_request+0x5de>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	781b      	ldrb	r3, [r3, #0]
 80052dc:	f3c3 0304 	ubfx	r3, r3, #0, #5
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b02      	cmp	r3, #2
 80052e4:	f000 81d8 	beq.w	8005698 <process_control_request+0x424>
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	f300 82a5 	bgt.w	8005838 <process_control_request+0x5c4>
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d003      	beq.n	80052fa <process_control_request+0x86>
 80052f2:	2b01      	cmp	r3, #1
 80052f4:	f000 815a 	beq.w	80055ac <process_control_request+0x338>
 80052f8:	e29e      	b.n	8005838 <process_control_request+0x5c4>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b20      	cmp	r3, #32
 8005306:	d148      	bne.n	800539a <process_control_request+0x126>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	889b      	ldrh	r3, [r3, #4]
 800530c:	b29b      	uxth	r3, r3
 800530e:	85fb      	strh	r3, [r7, #46]	; 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005310:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8005318:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800531c:	2b0f      	cmp	r3, #15
 800531e:	d901      	bls.n	8005324 <process_control_request+0xb0>
 8005320:	2300      	movs	r3, #0
 8005322:	e296      	b.n	8005852 <process_control_request+0x5de>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005324:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005328:	4a86      	ldr	r2, [pc, #536]	; (8005544 <process_control_request+0x2d0>)
 800532a:	4413      	add	r3, r2
 800532c:	78db      	ldrb	r3, [r3, #3]
 800532e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  usbd_class_driver_t const * driver = NULL;
 8005332:	2300      	movs	r3, #0
 8005334:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( drvid < _app_driver_count ) {
 8005336:	4b84      	ldr	r3, [pc, #528]	; (8005548 <process_control_request+0x2d4>)
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800533e:	429a      	cmp	r2, r3
 8005340:	d20a      	bcs.n	8005358 <process_control_request+0xe4>
    driver = &_app_driver[drvid];
 8005342:	4b82      	ldr	r3, [pc, #520]	; (800554c <process_control_request+0x2d8>)
 8005344:	6819      	ldr	r1, [r3, #0]
 8005346:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800534a:	4613      	mov	r3, r2
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	4413      	add	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	440b      	add	r3, r1
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	e011      	b.n	800537c <process_control_request+0x108>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005358:	4b7b      	ldr	r3, [pc, #492]	; (8005548 <process_control_request+0x2d4>)
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8005360:	429a      	cmp	r2, r3
 8005362:	d80b      	bhi.n	800537c <process_control_request+0x108>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005364:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005368:	4a77      	ldr	r2, [pc, #476]	; (8005548 <process_control_request+0x2d4>)
 800536a:	7812      	ldrb	r2, [r2, #0]
 800536c:	1a9a      	subs	r2, r3, r2
 800536e:	4613      	mov	r3, r2
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	4413      	add	r3, r2
 8005374:	00db      	lsls	r3, r3, #3
 8005376:	4a76      	ldr	r2, [pc, #472]	; (8005550 <process_control_request+0x2dc>)
 8005378:	4413      	add	r3, r2
 800537a:	62bb      	str	r3, [r7, #40]	; 0x28
  return driver;
 800537c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800537e:	63bb      	str	r3, [r7, #56]	; 0x38
        TU_VERIFY(driver);
 8005380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005382:	2b00      	cmp	r3, #0
 8005384:	d101      	bne.n	800538a <process_control_request+0x116>
 8005386:	2300      	movs	r3, #0
 8005388:	e263      	b.n	8005852 <process_control_request+0x5de>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800538a:	79fb      	ldrb	r3, [r7, #7]
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005390:	4618      	mov	r0, r3
 8005392:	f7ff ff57 	bl	8005244 <invoke_class_control>
 8005396:	4603      	mov	r3, r0
 8005398:	e25b      	b.n	8005852 <process_control_request+0x5de>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00a      	beq.n	80053be <process_control_request+0x14a>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 80053a8:	4b64      	ldr	r3, [pc, #400]	; (800553c <process_control_request+0x2c8>)
 80053aa:	643b      	str	r3, [r7, #64]	; 0x40
 80053ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d000      	beq.n	80053ba <process_control_request+0x146>
 80053b8:	be00      	bkpt	0x0000
        return false;
 80053ba:	2300      	movs	r3, #0
 80053bc:	e249      	b.n	8005852 <process_control_request+0x5de>
      }

      switch ( p_request->bRequest )
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	785b      	ldrb	r3, [r3, #1]
 80053c2:	2b09      	cmp	r3, #9
 80053c4:	f200 80e5 	bhi.w	8005592 <process_control_request+0x31e>
 80053c8:	a201      	add	r2, pc, #4	; (adr r2, 80053d0 <process_control_request+0x15c>)
 80053ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053ce:	bf00      	nop
 80053d0:	0800555d 	.word	0x0800555d
 80053d4:	08005517 	.word	0x08005517
 80053d8:	08005593 	.word	0x08005593
 80053dc:	080054f3 	.word	0x080054f3
 80053e0:	08005593 	.word	0x08005593
 80053e4:	080053f9 	.word	0x080053f9
 80053e8:	080054d9 	.word	0x080054d9
 80053ec:	08005593 	.word	0x08005593
 80053f0:	0800541d 	.word	0x0800541d
 80053f4:	08005435 	.word	0x08005435
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 80053f8:	6838      	ldr	r0, [r7, #0]
 80053fa:	f001 f937 	bl	800666c <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	885b      	ldrh	r3, [r3, #2]
 8005402:	b29b      	uxth	r3, r3
 8005404:	b2da      	uxtb	r2, r3
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	4611      	mov	r1, r2
 800540a:	4618      	mov	r0, r3
 800540c:	f001 fe6e 	bl	80070ec <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8005410:	4a4c      	ldr	r2, [pc, #304]	; (8005544 <process_control_request+0x2d0>)
 8005412:	7813      	ldrb	r3, [r2, #0]
 8005414:	f043 0302 	orr.w	r3, r3, #2
 8005418:	7013      	strb	r3, [r2, #0]
        break;
 800541a:	e0c6      	b.n	80055aa <process_control_request+0x336>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 800541c:	4b49      	ldr	r3, [pc, #292]	; (8005544 <process_control_request+0x2d0>)
 800541e:	785b      	ldrb	r3, [r3, #1]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8005424:	f107 0213 	add.w	r2, r7, #19
 8005428:	79f8      	ldrb	r0, [r7, #7]
 800542a:	2301      	movs	r3, #1
 800542c:	6839      	ldr	r1, [r7, #0]
 800542e:	f001 f891 	bl	8006554 <tud_control_xfer>
        }
        break;
 8005432:	e0ba      	b.n	80055aa <process_control_request+0x336>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	885b      	ldrh	r3, [r3, #2]
 8005438:	b29b      	uxth	r3, r3
 800543a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 800543e:	4b41      	ldr	r3, [pc, #260]	; (8005544 <process_control_request+0x2d0>)
 8005440:	785b      	ldrb	r3, [r3, #1]
 8005442:	b2db      	uxtb	r3, r3
 8005444:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005448:	429a      	cmp	r2, r3
 800544a:	d03b      	beq.n	80054c4 <process_control_request+0x250>
          {
            if ( _usbd_dev.cfg_num )
 800544c:	4b3d      	ldr	r3, [pc, #244]	; (8005544 <process_control_request+0x2d0>)
 800544e:	785b      	ldrb	r3, [r3, #1]
 8005450:	b2db      	uxtb	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d00f      	beq.n	8005476 <process_control_request+0x202>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8005456:	79fb      	ldrb	r3, [r7, #7]
 8005458:	4618      	mov	r0, r3
 800545a:	f002 f825 	bl	80074a8 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 800545e:	4b39      	ldr	r3, [pc, #228]	; (8005544 <process_control_request+0x2d0>)
 8005460:	789b      	ldrb	r3, [r3, #2]
 8005462:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              configuration_reset(rhport);
 8005466:	79fb      	ldrb	r3, [r7, #7]
 8005468:	4618      	mov	r0, r3
 800546a:	f7ff fcfb 	bl	8004e64 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 800546e:	4a35      	ldr	r2, [pc, #212]	; (8005544 <process_control_request+0x2d0>)
 8005470:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005474:	7093      	strb	r3, [r2, #2]
            }

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num )
 8005476:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800547a:	2b00      	cmp	r3, #0
 800547c:	d01d      	beq.n	80054ba <process_control_request+0x246>
            {
              // switch to new configuration if not zero
              TU_ASSERT( process_set_config(rhport, cfg_num) );
 800547e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005482:	79fb      	ldrb	r3, [r7, #7]
 8005484:	4611      	mov	r1, r2
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f9ec 	bl	8005864 <process_set_config>
 800548c:	4603      	mov	r3, r0
 800548e:	f083 0301 	eor.w	r3, r3, #1
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	d00a      	beq.n	80054ae <process_control_request+0x23a>
 8005498:	4b28      	ldr	r3, [pc, #160]	; (800553c <process_control_request+0x2c8>)
 800549a:	64bb      	str	r3, [r7, #72]	; 0x48
 800549c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d000      	beq.n	80054aa <process_control_request+0x236>
 80054a8:	be00      	bkpt	0x0000
 80054aa:	2300      	movs	r3, #0
 80054ac:	e1d1      	b.n	8005852 <process_control_request+0x5de>

              if ( tud_mount_cb ) tud_mount_cb();
 80054ae:	4b29      	ldr	r3, [pc, #164]	; (8005554 <process_control_request+0x2e0>)
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d007      	beq.n	80054c4 <process_control_request+0x250>
 80054b4:	f3af 8000 	nop.w
 80054b8:	e004      	b.n	80054c4 <process_control_request+0x250>
            }
            else
            {
              if ( tud_umount_cb ) tud_umount_cb();
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <process_control_request+0x2e4>)
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <process_control_request+0x250>
 80054c0:	f3af 8000 	nop.w
            }
          }

          _usbd_dev.cfg_num = cfg_num;
 80054c4:	4a1f      	ldr	r2, [pc, #124]	; (8005544 <process_control_request+0x2d0>)
 80054c6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80054ca:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 80054cc:	79fb      	ldrb	r3, [r7, #7]
 80054ce:	6839      	ldr	r1, [r7, #0]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 ffcd 	bl	8006470 <tud_control_status>
        }
        break;
 80054d6:	e068      	b.n	80055aa <process_control_request+0x336>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 80054d8:	79fb      	ldrb	r3, [r7, #7]
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 faeb 	bl	8005ab8 <process_get_descriptor>
 80054e2:	4603      	mov	r3, r0
 80054e4:	f083 0301 	eor.w	r3, r3, #1
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d05c      	beq.n	80055a8 <process_control_request+0x334>
 80054ee:	2300      	movs	r3, #0
 80054f0:	e1af      	b.n	8005852 <process_control_request+0x5de>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	885b      	ldrh	r3, [r3, #2]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d001      	beq.n	8005500 <process_control_request+0x28c>
 80054fc:	2300      	movs	r3, #0
 80054fe:	e1a8      	b.n	8005852 <process_control_request+0x5de>

          TU_LOG_USBD("    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8005500:	4a10      	ldr	r2, [pc, #64]	; (8005544 <process_control_request+0x2d0>)
 8005502:	7813      	ldrb	r3, [r2, #0]
 8005504:	f043 0308 	orr.w	r3, r3, #8
 8005508:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800550a:	79fb      	ldrb	r3, [r7, #7]
 800550c:	6839      	ldr	r1, [r7, #0]
 800550e:	4618      	mov	r0, r3
 8005510:	f000 ffae 	bl	8006470 <tud_control_status>
        break;
 8005514:	e049      	b.n	80055aa <process_control_request+0x336>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	885b      	ldrh	r3, [r3, #2]
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d001      	beq.n	8005524 <process_control_request+0x2b0>
 8005520:	2300      	movs	r3, #0
 8005522:	e196      	b.n	8005852 <process_control_request+0x5de>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8005524:	4a07      	ldr	r2, [pc, #28]	; (8005544 <process_control_request+0x2d0>)
 8005526:	7813      	ldrb	r3, [r2, #0]
 8005528:	f36f 03c3 	bfc	r3, #3, #1
 800552c:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	6839      	ldr	r1, [r7, #0]
 8005532:	4618      	mov	r0, r3
 8005534:	f000 ff9c 	bl	8006470 <tud_control_status>
        break;
 8005538:	e037      	b.n	80055aa <process_control_request+0x336>
 800553a:	bf00      	nop
 800553c:	e000edf0 	.word	0xe000edf0
 8005540:	00000000 	.word	0x00000000
 8005544:	20001268 	.word	0x20001268
 8005548:	20001298 	.word	0x20001298
 800554c:	20001294 	.word	0x20001294
 8005550:	080087a8 	.word	0x080087a8
	...
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 800555c:	4b9a      	ldr	r3, [pc, #616]	; (80057c8 <process_control_request+0x554>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	095b      	lsrs	r3, r3, #5
 8005562:	b2db      	uxtb	r3, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	f003 0301 	and.w	r3, r3, #1
 800556a:	b29a      	uxth	r2, r3
 800556c:	4b96      	ldr	r3, [pc, #600]	; (80057c8 <process_control_request+0x554>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	089b      	lsrs	r3, r3, #2
 8005572:	b2db      	uxtb	r3, r3
 8005574:	b29b      	uxth	r3, r3
 8005576:	f003 0302 	and.w	r3, r3, #2
 800557a:	b29b      	uxth	r3, r3
 800557c:	4313      	orrs	r3, r2
 800557e:	b29b      	uxth	r3, r3
 8005580:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8005582:	f107 0210 	add.w	r2, r7, #16
 8005586:	79f8      	ldrb	r0, [r7, #7]
 8005588:	2302      	movs	r3, #2
 800558a:	6839      	ldr	r1, [r7, #0]
 800558c:	f000 ffe2 	bl	8006554 <tud_control_xfer>
        }
        break;
 8005590:	e00b      	b.n	80055aa <process_control_request+0x336>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8005592:	4b8e      	ldr	r3, [pc, #568]	; (80057cc <process_control_request+0x558>)
 8005594:	647b      	str	r3, [r7, #68]	; 0x44
 8005596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0301 	and.w	r3, r3, #1
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d000      	beq.n	80055a4 <process_control_request+0x330>
 80055a2:	be00      	bkpt	0x0000
 80055a4:	2300      	movs	r3, #0
 80055a6:	e154      	b.n	8005852 <process_control_request+0x5de>
        break;
 80055a8:	bf00      	nop
      }
    break;
 80055aa:	e151      	b.n	8005850 <process_control_request+0x5dc>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	889b      	ldrh	r3, [r3, #4]
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80055b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80055bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055c0:	2b0f      	cmp	r3, #15
 80055c2:	d901      	bls.n	80055c8 <process_control_request+0x354>
 80055c4:	2300      	movs	r3, #0
 80055c6:	e144      	b.n	8005852 <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80055c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055cc:	4a7e      	ldr	r2, [pc, #504]	; (80057c8 <process_control_request+0x554>)
 80055ce:	4413      	add	r3, r2
 80055d0:	78db      	ldrb	r3, [r3, #3]
 80055d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  usbd_class_driver_t const * driver = NULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 80055da:	4b7d      	ldr	r3, [pc, #500]	; (80057d0 <process_control_request+0x55c>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d20a      	bcs.n	80055fc <process_control_request+0x388>
    driver = &_app_driver[drvid];
 80055e6:	4b7b      	ldr	r3, [pc, #492]	; (80057d4 <process_control_request+0x560>)
 80055e8:	6819      	ldr	r1, [r3, #0]
 80055ea:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80055ee:	4613      	mov	r3, r2
 80055f0:	005b      	lsls	r3, r3, #1
 80055f2:	4413      	add	r3, r2
 80055f4:	00db      	lsls	r3, r3, #3
 80055f6:	440b      	add	r3, r1
 80055f8:	623b      	str	r3, [r7, #32]
 80055fa:	e011      	b.n	8005620 <process_control_request+0x3ac>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80055fc:	4b74      	ldr	r3, [pc, #464]	; (80057d0 <process_control_request+0x55c>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005604:	429a      	cmp	r2, r3
 8005606:	d80b      	bhi.n	8005620 <process_control_request+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005608:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800560c:	4a70      	ldr	r2, [pc, #448]	; (80057d0 <process_control_request+0x55c>)
 800560e:	7812      	ldrb	r2, [r2, #0]
 8005610:	1a9a      	subs	r2, r3, r2
 8005612:	4613      	mov	r3, r2
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	4413      	add	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4a6f      	ldr	r2, [pc, #444]	; (80057d8 <process_control_request+0x564>)
 800561c:	4413      	add	r3, r2
 800561e:	623b      	str	r3, [r7, #32]
  return driver;
 8005620:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005622:	653b      	str	r3, [r7, #80]	; 0x50
      TU_VERIFY(driver);
 8005624:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <process_control_request+0x3ba>
 800562a:	2300      	movs	r3, #0
 800562c:	e111      	b.n	8005852 <process_control_request+0x5de>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 800562e:	79fb      	ldrb	r3, [r7, #7]
 8005630:	683a      	ldr	r2, [r7, #0]
 8005632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005634:	4618      	mov	r0, r3
 8005636:	f7ff fe05 	bl	8005244 <invoke_class_control>
 800563a:	4603      	mov	r3, r0
 800563c:	f083 0301 	eor.w	r3, r3, #1
 8005640:	b2db      	uxtb	r3, r3
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 8103 	beq.w	800584e <process_control_request+0x5da>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <process_control_request+0x3e6>
 8005656:	2300      	movs	r3, #0
 8005658:	e0fb      	b.n	8005852 <process_control_request+0x5de>

        switch(p_request->bRequest)
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	785b      	ldrb	r3, [r3, #1]
 800565e:	3b0a      	subs	r3, #10
 8005660:	2b01      	cmp	r3, #1
 8005662:	d816      	bhi.n	8005692 <process_control_request+0x41e>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8005664:	2000      	movs	r0, #0
 8005666:	f000 fff1 	bl	800664c <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	785b      	ldrb	r3, [r3, #1]
 800566e:	2b0a      	cmp	r3, #10
 8005670:	d109      	bne.n	8005686 <process_control_request+0x412>
            {
              uint8_t alternate = 0;
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8005676:	f107 020f 	add.w	r2, r7, #15
 800567a:	79f8      	ldrb	r0, [r7, #7]
 800567c:	2301      	movs	r3, #1
 800567e:	6839      	ldr	r1, [r7, #0]
 8005680:	f000 ff68 	bl	8006554 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8005684:	e007      	b.n	8005696 <process_control_request+0x422>
              tud_control_status(rhport, p_request);
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	6839      	ldr	r1, [r7, #0]
 800568a:	4618      	mov	r0, r3
 800568c:	f000 fef0 	bl	8006470 <tud_control_status>
          break;
 8005690:	e001      	b.n	8005696 <process_control_request+0x422>

          default: return false;
 8005692:	2300      	movs	r3, #0
 8005694:	e0dd      	b.n	8005852 <process_control_request+0x5de>
        }
      }
    }
    break;
 8005696:	e0da      	b.n	800584e <process_control_request+0x5da>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	889b      	ldrh	r3, [r3, #4]
 800569c:	b29b      	uxth	r3, r3
 800569e:	83bb      	strh	r3, [r7, #28]
 80056a0:	8bbb      	ldrh	r3, [r7, #28]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80056a8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056ac:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80056ae:	7fbb      	ldrb	r3, [r7, #30]
 80056b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80056b4:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80056b6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80056ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80056be:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80056c0:	7ffb      	ldrb	r3, [r7, #31]
 80056c2:	09db      	lsrs	r3, r3, #7
 80056c4:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80056c6:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80056ca:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80056ce:	2b05      	cmp	r3, #5
 80056d0:	d90a      	bls.n	80056e8 <process_control_request+0x474>
 80056d2:	4b3e      	ldr	r3, [pc, #248]	; (80057cc <process_control_request+0x558>)
 80056d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80056d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d000      	beq.n	80056e4 <process_control_request+0x470>
 80056e2:	be00      	bkpt	0x0000
 80056e4:	2300      	movs	r3, #0
 80056e6:	e0b4      	b.n	8005852 <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80056e8:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 80056ec:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 80056f0:	4935      	ldr	r1, [pc, #212]	; (80057c8 <process_control_request+0x554>)
 80056f2:	0052      	lsls	r2, r2, #1
 80056f4:	440a      	add	r2, r1
 80056f6:	4413      	add	r3, r2
 80056f8:	3313      	adds	r3, #19
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 80056fe:	2300      	movs	r3, #0
 8005700:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8005702:	4b33      	ldr	r3, [pc, #204]	; (80057d0 <process_control_request+0x55c>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	7efa      	ldrb	r2, [r7, #27]
 8005708:	429a      	cmp	r2, r3
 800570a:	d209      	bcs.n	8005720 <process_control_request+0x4ac>
    driver = &_app_driver[drvid];
 800570c:	4b31      	ldr	r3, [pc, #196]	; (80057d4 <process_control_request+0x560>)
 800570e:	6819      	ldr	r1, [r3, #0]
 8005710:	7efa      	ldrb	r2, [r7, #27]
 8005712:	4613      	mov	r3, r2
 8005714:	005b      	lsls	r3, r3, #1
 8005716:	4413      	add	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	440b      	add	r3, r1
 800571c:	617b      	str	r3, [r7, #20]
 800571e:	e00f      	b.n	8005740 <process_control_request+0x4cc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005720:	4b2b      	ldr	r3, [pc, #172]	; (80057d0 <process_control_request+0x55c>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	7efa      	ldrb	r2, [r7, #27]
 8005726:	429a      	cmp	r2, r3
 8005728:	d80a      	bhi.n	8005740 <process_control_request+0x4cc>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800572a:	7efb      	ldrb	r3, [r7, #27]
 800572c:	4a28      	ldr	r2, [pc, #160]	; (80057d0 <process_control_request+0x55c>)
 800572e:	7812      	ldrb	r2, [r2, #0]
 8005730:	1a9a      	subs	r2, r3, r2
 8005732:	4613      	mov	r3, r2
 8005734:	005b      	lsls	r3, r3, #1
 8005736:	4413      	add	r3, r2
 8005738:	00db      	lsls	r3, r3, #3
 800573a:	4a27      	ldr	r2, [pc, #156]	; (80057d8 <process_control_request+0x564>)
 800573c:	4413      	add	r3, r2
 800573e:	617b      	str	r3, [r7, #20]
  return driver;
 8005740:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005742:	663b      	str	r3, [r7, #96]	; 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b00      	cmp	r3, #0
 8005750:	d00c      	beq.n	800576c <process_control_request+0x4f8>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 8005752:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <process_control_request+0x4e8>
 8005758:	2300      	movs	r3, #0
 800575a:	e07a      	b.n	8005852 <process_control_request+0x5de>
        return invoke_class_control(rhport, driver, p_request);
 800575c:	79fb      	ldrb	r3, [r7, #7]
 800575e:	683a      	ldr	r2, [r7, #0]
 8005760:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005762:	4618      	mov	r0, r3
 8005764:	f7ff fd6e 	bl	8005244 <invoke_class_control>
 8005768:	4603      	mov	r3, r0
 800576a:	e072      	b.n	8005852 <process_control_request+0x5de>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	785b      	ldrb	r3, [r3, #1]
 8005770:	2b03      	cmp	r3, #3
 8005772:	d018      	beq.n	80057a6 <process_control_request+0x532>
 8005774:	2b03      	cmp	r3, #3
 8005776:	dc52      	bgt.n	800581e <process_control_request+0x5aa>
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <process_control_request+0x50e>
 800577c:	2b01      	cmp	r3, #1
 800577e:	d012      	beq.n	80057a6 <process_control_request+0x532>
 8005780:	e04d      	b.n	800581e <process_control_request+0x5aa>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8005782:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	4611      	mov	r1, r2
 800578a:	4618      	mov	r0, r3
 800578c:	f000 fe26 	bl	80063dc <usbd_edpt_stalled>
 8005790:	4603      	mov	r3, r0
 8005792:	b29b      	uxth	r3, r3
 8005794:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8005796:	f107 020c 	add.w	r2, r7, #12
 800579a:	79f8      	ldrb	r0, [r7, #7]
 800579c:	2302      	movs	r3, #2
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	f000 fed8 	bl	8006554 <tud_control_xfer>
          }
          break;
 80057a4:	e047      	b.n	8005836 <process_control_request+0x5c2>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	885b      	ldrh	r3, [r3, #2]
 80057aa:	b29b      	uxth	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d11c      	bne.n	80057ea <process_control_request+0x576>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d111      	bne.n	80057dc <process_control_request+0x568>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 80057b8:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80057bc:	79fb      	ldrb	r3, [r7, #7]
 80057be:	4611      	mov	r1, r2
 80057c0:	4618      	mov	r0, r3
 80057c2:	f000 fdbf 	bl	8006344 <usbd_edpt_clear_stall>
 80057c6:	e010      	b.n	80057ea <process_control_request+0x576>
 80057c8:	20001268 	.word	0x20001268
 80057cc:	e000edf0 	.word	0xe000edf0
 80057d0:	20001298 	.word	0x20001298
 80057d4:	20001294 	.word	0x20001294
 80057d8:	080087a8 	.word	0x080087a8
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 80057dc:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 80057e0:	79fb      	ldrb	r3, [r7, #7]
 80057e2:	4611      	mov	r1, r2
 80057e4:	4618      	mov	r0, r3
 80057e6:	f000 fd61 	bl	80062ac <usbd_edpt_stall>
              }
            }

            if (driver)
 80057ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d021      	beq.n	8005834 <process_control_request+0x5c0>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 80057f0:	79fb      	ldrb	r3, [r7, #7]
 80057f2:	683a      	ldr	r2, [r7, #0]
 80057f4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80057f6:	4618      	mov	r0, r3
 80057f8:	f7ff fd24 	bl	8005244 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 80057fc:	2000      	movs	r0, #0
 80057fe:	f000 ff25 	bl	800664c <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005802:	4b16      	ldr	r3, [pc, #88]	; (800585c <process_control_request+0x5e8>)
 8005804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005808:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800580c:	b2db      	uxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	d110      	bne.n	8005834 <process_control_request+0x5c0>
 8005812:	79fb      	ldrb	r3, [r7, #7]
 8005814:	6839      	ldr	r1, [r7, #0]
 8005816:	4618      	mov	r0, r3
 8005818:	f000 fe2a 	bl	8006470 <tud_control_status>
            }
          }
          break;
 800581c:	e00a      	b.n	8005834 <process_control_request+0x5c0>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 800581e:	4b10      	ldr	r3, [pc, #64]	; (8005860 <process_control_request+0x5ec>)
 8005820:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005822:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d000      	beq.n	8005830 <process_control_request+0x5bc>
 800582e:	be00      	bkpt	0x0000
 8005830:	2300      	movs	r3, #0
 8005832:	e00e      	b.n	8005852 <process_control_request+0x5de>
          break;
 8005834:	bf00      	nop
        }
      }
    }
    break;
 8005836:	e00b      	b.n	8005850 <process_control_request+0x5dc>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <process_control_request+0x5ec>)
 800583a:	637b      	str	r3, [r7, #52]	; 0x34
 800583c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b00      	cmp	r3, #0
 8005846:	d000      	beq.n	800584a <process_control_request+0x5d6>
 8005848:	be00      	bkpt	0x0000
 800584a:	2300      	movs	r3, #0
 800584c:	e001      	b.n	8005852 <process_control_request+0x5de>
    break;
 800584e:	bf00      	nop
  }

  return true;
 8005850:	2301      	movs	r3, #1
}
 8005852:	4618      	mov	r0, r3
 8005854:	3768      	adds	r7, #104	; 0x68
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	20001268 	.word	0x20001268
 8005860:	e000edf0 	.word	0xe000edf0

08005864 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b096      	sub	sp, #88	; 0x58
 8005868:	af00      	add	r7, sp, #0
 800586a:	4603      	mov	r3, r0
 800586c:	460a      	mov	r2, r1
 800586e:	71fb      	strb	r3, [r7, #7]
 8005870:	4613      	mov	r3, r2
 8005872:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8005874:	79bb      	ldrb	r3, [r7, #6]
 8005876:	3b01      	subs	r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	4618      	mov	r0, r3
 800587c:	f7fc f84e 	bl	800191c <tud_descriptor_configuration_cb>
 8005880:	64f8      	str	r0, [r7, #76]	; 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8005882:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d003      	beq.n	8005890 <process_set_config+0x2c>
 8005888:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800588a:	785b      	ldrb	r3, [r3, #1]
 800588c:	2b02      	cmp	r3, #2
 800588e:	d00a      	beq.n	80058a6 <process_set_config+0x42>
 8005890:	4b83      	ldr	r3, [pc, #524]	; (8005aa0 <process_set_config+0x23c>)
 8005892:	623b      	str	r3, [r7, #32]
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d000      	beq.n	80058a2 <process_set_config+0x3e>
 80058a0:	be00      	bkpt	0x0000
 80058a2:	2300      	movs	r3, #0
 80058a4:	e0f7      	b.n	8005a96 <process_set_config+0x232>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80058a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058a8:	79db      	ldrb	r3, [r3, #7]
 80058aa:	115b      	asrs	r3, r3, #5
 80058ac:	f003 0301 	and.w	r3, r3, #1
 80058b0:	b2d9      	uxtb	r1, r3
 80058b2:	4a7c      	ldr	r2, [pc, #496]	; (8005aa4 <process_set_config+0x240>)
 80058b4:	7813      	ldrb	r3, [r2, #0]
 80058b6:	f361 1304 	bfi	r3, r1, #4, #1
 80058ba:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80058bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058be:	79db      	ldrb	r3, [r3, #7]
 80058c0:	119b      	asrs	r3, r3, #6
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	b2d9      	uxtb	r1, r3
 80058c8:	4a76      	ldr	r2, [pc, #472]	; (8005aa4 <process_set_config+0x240>)
 80058ca:	7813      	ldrb	r3, [r2, #0]
 80058cc:	f361 1345 	bfi	r3, r1, #5, #1
 80058d0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80058d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058d4:	3309      	adds	r3, #9
 80058d6:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80058d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058da:	885b      	ldrh	r3, [r3, #2]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	461a      	mov	r2, r3
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	4413      	add	r3, r2
 80058e4:	64bb      	str	r3, [r7, #72]	; 0x48

  while( p_desc < desc_end )
 80058e6:	e0d0      	b.n	8005a8a <process_set_config+0x226>
  {
    uint8_t assoc_itf_count = 1;
 80058e8:	2301      	movs	r3, #1
 80058ea:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 80058ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058f0:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 80058f8:	2b0b      	cmp	r3, #11
 80058fa:	d10f      	bne.n	800591c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 80058fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058fe:	647b      	str	r3, [r7, #68]	; 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8005900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005902:	78db      	ldrb	r3, [r3, #3]
 8005904:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8005908:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800590a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	461a      	mov	r2, r3
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800591a:	657b      	str	r3, [r7, #84]	; 0x54
 800591c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800591e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	3301      	adds	r3, #1
 8005924:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8005926:	2b04      	cmp	r3, #4
 8005928:	d00a      	beq.n	8005940 <process_set_config+0xdc>
 800592a:	4b5d      	ldr	r3, [pc, #372]	; (8005aa0 <process_set_config+0x23c>)
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d000      	beq.n	800593c <process_set_config+0xd8>
 800593a:	be00      	bkpt	0x0000
 800593c:	2300      	movs	r3, #0
 800593e:	e0aa      	b.n	8005a96 <process_set_config+0x232>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8005940:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005942:	643b      	str	r3, [r7, #64]	; 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8005944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 800594c:	2300      	movs	r3, #0
 800594e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8005952:	e082      	b.n	8005a5a <process_set_config+0x1f6>
 8005954:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005958:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800595a:	2300      	movs	r3, #0
 800595c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800595e:	4b52      	ldr	r3, [pc, #328]	; (8005aa8 <process_set_config+0x244>)
 8005960:	781b      	ldrb	r3, [r3, #0]
 8005962:	7bfa      	ldrb	r2, [r7, #15]
 8005964:	429a      	cmp	r2, r3
 8005966:	d209      	bcs.n	800597c <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8005968:	4b50      	ldr	r3, [pc, #320]	; (8005aac <process_set_config+0x248>)
 800596a:	6819      	ldr	r1, [r3, #0]
 800596c:	7bfa      	ldrb	r2, [r7, #15]
 800596e:	4613      	mov	r3, r2
 8005970:	005b      	lsls	r3, r3, #1
 8005972:	4413      	add	r3, r2
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	440b      	add	r3, r1
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	e00f      	b.n	800599c <process_set_config+0x138>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800597c:	4b4a      	ldr	r3, [pc, #296]	; (8005aa8 <process_set_config+0x244>)
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	7bfa      	ldrb	r2, [r7, #15]
 8005982:	429a      	cmp	r2, r3
 8005984:	d80a      	bhi.n	800599c <process_set_config+0x138>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005986:	7bfb      	ldrb	r3, [r7, #15]
 8005988:	4a47      	ldr	r2, [pc, #284]	; (8005aa8 <process_set_config+0x244>)
 800598a:	7812      	ldrb	r2, [r2, #0]
 800598c:	1a9a      	subs	r2, r3, r2
 800598e:	4613      	mov	r3, r2
 8005990:	005b      	lsls	r3, r3, #1
 8005992:	4413      	add	r3, r2
 8005994:	00db      	lsls	r3, r3, #3
 8005996:	4a46      	ldr	r2, [pc, #280]	; (8005ab0 <process_set_config+0x24c>)
 8005998:	4413      	add	r3, r2
 800599a:	60bb      	str	r3, [r7, #8]
  return driver;
 800599c:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 800599e:	63bb      	str	r3, [r7, #56]	; 0x38
      TU_ASSERT(driver);
 80059a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <process_set_config+0x158>
 80059a6:	4b3e      	ldr	r3, [pc, #248]	; (8005aa0 <process_set_config+0x23c>)
 80059a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0301 	and.w	r3, r3, #1
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d000      	beq.n	80059b8 <process_set_config+0x154>
 80059b6:	be00      	bkpt	0x0000
 80059b8:	2300      	movs	r3, #0
 80059ba:	e06c      	b.n	8005a96 <process_set_config+0x232>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80059bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059be:	689b      	ldr	r3, [r3, #8]
 80059c0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80059c2:	79f8      	ldrb	r0, [r7, #7]
 80059c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c6:	4798      	blx	r3
 80059c8:	4603      	mov	r3, r0
 80059ca:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80059cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ce:	2b08      	cmp	r3, #8
 80059d0:	d93e      	bls.n	8005a50 <process_set_config+0x1ec>
 80059d2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80059d4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d83a      	bhi.n	8005a50 <process_set_config+0x1ec>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80059e0:	e024      	b.n	8005a2c <process_set_config+0x1c8>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 80059e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059e4:	789a      	ldrb	r2, [r3, #2]
 80059e6:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 80059ea:	4413      	add	r3, r2
 80059ec:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 80059f0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80059f4:	4a2b      	ldr	r2, [pc, #172]	; (8005aa4 <process_set_config+0x240>)
 80059f6:	4413      	add	r3, r2
 80059f8:	78db      	ldrb	r3, [r3, #3]
 80059fa:	2bff      	cmp	r3, #255	; 0xff
 80059fc:	d00a      	beq.n	8005a14 <process_set_config+0x1b0>
 80059fe:	4b28      	ldr	r3, [pc, #160]	; (8005aa0 <process_set_config+0x23c>)
 8005a00:	633b      	str	r3, [r7, #48]	; 0x30
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0301 	and.w	r3, r3, #1
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d000      	beq.n	8005a10 <process_set_config+0x1ac>
 8005a0e:	be00      	bkpt	0x0000
 8005a10:	2300      	movs	r3, #0
 8005a12:	e040      	b.n	8005a96 <process_set_config+0x232>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8005a14:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005a18:	4a22      	ldr	r2, [pc, #136]	; (8005aa4 <process_set_config+0x240>)
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8005a20:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005a22:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005a26:	3301      	adds	r3, #1
 8005a28:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8005a2c:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8005a30:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005a34:	429a      	cmp	r2, r3
 8005a36:	d3d4      	bcc.n	80059e2 <process_set_config+0x17e>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8005a38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005a3c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a40:	481c      	ldr	r0, [pc, #112]	; (8005ab4 <process_set_config+0x250>)
 8005a42:	f002 fce5 	bl	8008410 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8005a46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a4a:	4413      	add	r3, r2
 8005a4c:	657b      	str	r3, [r7, #84]	; 0x54

        break; // exit driver find loop
 8005a4e:	e00b      	b.n	8005a68 <process_set_config+0x204>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005a50:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005a54:	3301      	adds	r3, #1
 8005a56:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8005a5a:	4b13      	ldr	r3, [pc, #76]	; (8005aa8 <process_set_config+0x244>)
 8005a5c:	781b      	ldrb	r3, [r3, #0]
 8005a5e:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8005a62:	429a      	cmp	r2, r3
 8005a64:	f67f af76 	bls.w	8005954 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8005a68:	4b0f      	ldr	r3, [pc, #60]	; (8005aa8 <process_set_config+0x244>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8005a70:	429a      	cmp	r2, r3
 8005a72:	d90a      	bls.n	8005a8a <process_set_config+0x226>
 8005a74:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <process_set_config+0x23c>)
 8005a76:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d000      	beq.n	8005a86 <process_set_config+0x222>
 8005a84:	be00      	bkpt	0x0000
 8005a86:	2300      	movs	r3, #0
 8005a88:	e005      	b.n	8005a96 <process_set_config+0x232>
  while( p_desc < desc_end )
 8005a8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	f4ff af2a 	bcc.w	80058e8 <process_set_config+0x84>
  }

  return true;
 8005a94:	2301      	movs	r3, #1
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3758      	adds	r7, #88	; 0x58
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	e000edf0 	.word	0xe000edf0
 8005aa4:	20001268 	.word	0x20001268
 8005aa8:	20001298 	.word	0x20001298
 8005aac:	20001294 	.word	0x20001294
 8005ab0:	080087a8 	.word	0x080087a8
 8005ab4:	2000127b 	.word	0x2000127b

08005ab8 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b094      	sub	sp, #80	; 0x50
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	4603      	mov	r3, r0
 8005ac0:	6039      	str	r1, [r7, #0]
 8005ac2:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	885b      	ldrh	r3, [r3, #2]
 8005ac8:	b29b      	uxth	r3, r3
 8005aca:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005ace:	0a1b      	lsrs	r3, r3, #8
 8005ad0:	b29b      	uxth	r3, r3
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	885b      	ldrh	r3, [r3, #2]
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8005ae8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005aec:	3b01      	subs	r3, #1
 8005aee:	2b0e      	cmp	r3, #14
 8005af0:	f200 80bc 	bhi.w	8005c6c <process_get_descriptor+0x1b4>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <process_get_descriptor+0x44>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005b39 	.word	0x08005b39
 8005b00:	08005b9d 	.word	0x08005b9d
 8005b04:	08005c05 	.word	0x08005c05
 8005b08:	08005c6d 	.word	0x08005c6d
 8005b0c:	08005c6d 	.word	0x08005c6d
 8005b10:	08005c3b 	.word	0x08005c3b
 8005b14:	08005b9d 	.word	0x08005b9d
 8005b18:	08005c6d 	.word	0x08005c6d
 8005b1c:	08005c6d 	.word	0x08005c6d
 8005b20:	08005c6d 	.word	0x08005c6d
 8005b24:	08005c6d 	.word	0x08005c6d
 8005b28:	08005c6d 	.word	0x08005c6d
 8005b2c:	08005c6d 	.word	0x08005c6d
 8005b30:	08005c6d 	.word	0x08005c6d
 8005b34:	08005b4f 	.word	0x08005b4f
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8005b38:	f7fb fed8 	bl	80018ec <tud_descriptor_device_cb>
 8005b3c:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8005b3e:	79f8      	ldrb	r0, [r7, #7]
 8005b40:	2312      	movs	r3, #18
 8005b42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b44:	6839      	ldr	r1, [r7, #0]
 8005b46:	f000 fd05 	bl	8006554 <tud_control_xfer>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	e08f      	b.n	8005c6e <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8005b4e:	4b4a      	ldr	r3, [pc, #296]	; (8005c78 <process_get_descriptor+0x1c0>)
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <process_get_descriptor+0xa0>
 8005b54:	2300      	movs	r3, #0
 8005b56:	e08a      	b.n	8005c6e <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8005b58:	f3af 8000 	nop.w
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8005b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10a      	bne.n	8005b7c <process_get_descriptor+0xc4>
 8005b66:	4b45      	ldr	r3, [pc, #276]	; (8005c7c <process_get_descriptor+0x1c4>)
 8005b68:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d000      	beq.n	8005b78 <process_get_descriptor+0xc0>
 8005b76:	be00      	bkpt	0x0000
 8005b78:	2300      	movs	r3, #0
 8005b7a:	e078      	b.n	8005c6e <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8005b7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b7e:	3302      	adds	r3, #2
 8005b80:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8005b82:	6a3b      	ldr	r3, [r7, #32]
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8005b8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005b90:	79f8      	ldrb	r0, [r7, #7]
 8005b92:	6839      	ldr	r1, [r7, #0]
 8005b94:	f000 fcde 	bl	8006554 <tud_control_xfer>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	e068      	b.n	8005c6e <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8005b9c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005ba0:	2b02      	cmp	r3, #2
 8005ba2:	d107      	bne.n	8005bb4 <process_get_descriptor+0xfc>
      {
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8005ba4:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7fb feb7 	bl	800191c <tud_descriptor_configuration_cb>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb2:	e00b      	b.n	8005bcc <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8005bb4:	4b32      	ldr	r3, [pc, #200]	; (8005c80 <process_get_descriptor+0x1c8>)
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d101      	bne.n	8005bbe <process_get_descriptor+0x106>
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e057      	b.n	8005c6e <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8005bbe:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	f3af 8000 	nop.w
 8005bc8:	4603      	mov	r3, r0
 8005bca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8005bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d10a      	bne.n	8005be8 <process_get_descriptor+0x130>
 8005bd2:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <process_get_descriptor+0x1c4>)
 8005bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 0301 	and.w	r3, r3, #1
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d000      	beq.n	8005be4 <process_get_descriptor+0x12c>
 8005be2:	be00      	bkpt	0x0000
 8005be4:	2300      	movs	r3, #0
 8005be6:	e042      	b.n	8005c6e <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8005be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bea:	3302      	adds	r3, #2
 8005bec:	61fb      	str	r3, [r7, #28]
 8005bee:	69fb      	ldr	r3, [r7, #28]
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8005bf4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bf6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005bf8:	79f8      	ldrb	r0, [r7, #7]
 8005bfa:	6839      	ldr	r1, [r7, #0]
 8005bfc:	f000 fcaa 	bl	8006554 <tud_control_xfer>
 8005c00:	4603      	mov	r3, r0
 8005c02:	e034      	b.n	8005c6e <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	889b      	ldrh	r3, [r3, #4]
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005c0e:	4611      	mov	r1, r2
 8005c10:	4618      	mov	r0, r3
 8005c12:	f7fb fe91 	bl	8001938 <tud_descriptor_string_cb>
 8005c16:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8005c18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <process_get_descriptor+0x16a>
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e025      	b.n	8005c6e <process_get_descriptor+0x1b6>
 8005c22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c24:	61bb      	str	r3, [r7, #24]
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005c2a:	b29b      	uxth	r3, r3
 8005c2c:	79f8      	ldrb	r0, [r7, #7]
 8005c2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	f000 fc8f 	bl	8006554 <tud_control_xfer>
 8005c36:	4603      	mov	r3, r0
 8005c38:	e019      	b.n	8005c6e <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG_USBD(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <process_get_descriptor+0x1cc>)
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d101      	bne.n	8005c44 <process_get_descriptor+0x18c>
 8005c40:	2300      	movs	r3, #0
 8005c42:	e014      	b.n	8005c6e <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005c44:	f3af 8000 	nop.w
 8005c48:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8005c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <process_get_descriptor+0x19c>
 8005c50:	2300      	movs	r3, #0
 8005c52:	e00c      	b.n	8005c6e <process_get_descriptor+0x1b6>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	617b      	str	r3, [r7, #20]
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	79f8      	ldrb	r0, [r7, #7]
 8005c60:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c62:	6839      	ldr	r1, [r7, #0]
 8005c64:	f000 fc76 	bl	8006554 <tud_control_xfer>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	e000      	b.n	8005c6e <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8005c6c:	2300      	movs	r3, #0
  }
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3750      	adds	r7, #80	; 0x50
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	00000000 	.word	0x00000000
 8005c7c:	e000edf0 	.word	0xe000edf0
	...

08005c88 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b09c      	sub	sp, #112	; 0x70
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	460b      	mov	r3, r1
 8005c92:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  switch (event->event_id) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	785b      	ldrb	r3, [r3, #1]
 8005c9e:	3b02      	subs	r3, #2
 8005ca0:	2b03      	cmp	r3, #3
 8005ca2:	f200 80fc 	bhi.w	8005e9e <dcd_event_handler+0x216>
 8005ca6:	a201      	add	r2, pc, #4	; (adr r2, 8005cac <dcd_event_handler+0x24>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005cbd 	.word	0x08005cbd
 8005cb0:	08005d2d 	.word	0x08005d2d
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005d0b 	.word	0x08005d0b
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8005cbc:	4aaa      	ldr	r2, [pc, #680]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005cbe:	7813      	ldrb	r3, [r2, #0]
 8005cc0:	f36f 0300 	bfc	r3, #0, #1
 8005cc4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8005cc6:	4aa8      	ldr	r2, [pc, #672]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005cc8:	7813      	ldrb	r3, [r2, #0]
 8005cca:	f36f 0341 	bfc	r3, #1, #1
 8005cce:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8005cd0:	4ba5      	ldr	r3, [pc, #660]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8005cd6:	4aa4      	ldr	r2, [pc, #656]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005cd8:	7813      	ldrb	r3, [r2, #0]
 8005cda:	f36f 0382 	bfc	r3, #2, #1
 8005cde:	7013      	strb	r3, [r2, #0]
      send = true;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005ce6:	e0e1      	b.n	8005eac <dcd_event_handler+0x224>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8005ce8:	4b9f      	ldr	r3, [pc, #636]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005cea:	781b      	ldrb	r3, [r3, #0]
 8005cec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80d7 	beq.w	8005ea6 <dcd_event_handler+0x21e>
        _usbd_dev.suspended = 1;
 8005cf8:	4a9b      	ldr	r2, [pc, #620]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005cfa:	7813      	ldrb	r3, [r2, #0]
 8005cfc:	f043 0304 	orr.w	r3, r3, #4
 8005d00:	7013      	strb	r3, [r2, #0]
        send = true;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8005d08:	e0cd      	b.n	8005ea6 <dcd_event_handler+0x21e>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8005d0a:	4b97      	ldr	r3, [pc, #604]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	f000 80c8 	beq.w	8005eaa <dcd_event_handler+0x222>
        _usbd_dev.suspended = 0;
 8005d1a:	4a93      	ldr	r2, [pc, #588]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005d1c:	7813      	ldrb	r3, [r2, #0]
 8005d1e:	f36f 0382 	bfc	r3, #2, #1
 8005d22:	7013      	strb	r3, [r2, #0]
        send = true;
 8005d24:	2301      	movs	r3, #1
 8005d26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8005d2a:	e0be      	b.n	8005eaa <dcd_event_handler+0x222>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8005d2c:	4b8e      	ldr	r3, [pc, #568]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d067      	beq.n	8005e0a <dcd_event_handler+0x182>
        _usbd_dev.suspended = 0;
 8005d3a:	4a8b      	ldr	r2, [pc, #556]	; (8005f68 <dcd_event_handler+0x2e0>)
 8005d3c:	7813      	ldrb	r3, [r2, #0]
 8005d3e:	f36f 0382 	bfc	r3, #2, #1
 8005d42:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8005d44:	f107 0308 	add.w	r3, r7, #8
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	609a      	str	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	723b      	strb	r3, [r7, #8]
 8005d56:	2305      	movs	r3, #5
 8005d58:	727b      	strb	r3, [r7, #9]
 8005d5a:	f107 0308 	add.w	r3, r7, #8
 8005d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 8005d66:	4b81      	ldr	r3, [pc, #516]	; (8005f6c <dcd_event_handler+0x2e4>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005d6e:	65bb      	str	r3, [r7, #88]	; 0x58
 8005d70:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005d74:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8005d78:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005d7c:	f083 0301 	eor.w	r3, r3, #1
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d006      	beq.n	8005d94 <dcd_event_handler+0x10c>
 8005d86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d88:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(false);
 8005d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2000      	movs	r0, #0
 8005d90:	4798      	blx	r3
}
 8005d92:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8005d94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005d96:	3304      	adds	r3, #4
 8005d98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fe ff03 	bl	8004ba6 <tu_fifo_write>
 8005da0:	4603      	mov	r3, r0
 8005da2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (!in_isr) {
 8005da6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005daa:	f083 0301 	eor.w	r3, r3, #1
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d006      	beq.n	8005dc2 <dcd_event_handler+0x13a>
 8005db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db6:	64bb      	str	r3, [r7, #72]	; 0x48
  qhdl->interrupt_set(true);
 8005db8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	2001      	movs	r0, #1
 8005dbe:	4798      	blx	r3
}
 8005dc0:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8005dc2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dc6:	f083 0301 	eor.w	r3, r3, #1
 8005dca:	b2db      	uxtb	r3, r3
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d00a      	beq.n	8005de6 <dcd_event_handler+0x15e>
 8005dd0:	4b67      	ldr	r3, [pc, #412]	; (8005f70 <dcd_event_handler+0x2e8>)
 8005dd2:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0301 	and.w	r3, r3, #1
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d000      	beq.n	8005de2 <dcd_event_handler+0x15a>
 8005de0:	be00      	bkpt	0x0000
 8005de2:	2300      	movs	r3, #0
 8005de4:	e001      	b.n	8005dea <dcd_event_handler+0x162>
  return success;
 8005de6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005dee:	4b61      	ldr	r3, [pc, #388]	; (8005f74 <dcd_event_handler+0x2ec>)
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d009      	beq.n	8005e08 <dcd_event_handler+0x180>
 8005df4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df6:	7818      	ldrb	r0, [r3, #0]
 8005df8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dfa:	785b      	ldrb	r3, [r3, #1]
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005e02:	461a      	mov	r2, r3
 8005e04:	f3af 8000 	nop.w
  return ret;
 8005e08:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8005e10:	e03e      	b.n	8005e90 <dcd_event_handler+0x208>
 8005e12:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8005e16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  usbd_class_driver_t const * driver = NULL;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ( drvid < _app_driver_count ) {
 8005e1e:	4b56      	ldr	r3, [pc, #344]	; (8005f78 <dcd_event_handler+0x2f0>)
 8005e20:	781b      	ldrb	r3, [r3, #0]
 8005e22:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d20a      	bcs.n	8005e40 <dcd_event_handler+0x1b8>
    driver = &_app_driver[drvid];
 8005e2a:	4b54      	ldr	r3, [pc, #336]	; (8005f7c <dcd_event_handler+0x2f4>)
 8005e2c:	6819      	ldr	r1, [r3, #0]
 8005e2e:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005e32:	4613      	mov	r3, r2
 8005e34:	005b      	lsls	r3, r3, #1
 8005e36:	4413      	add	r3, r2
 8005e38:	00db      	lsls	r3, r3, #3
 8005e3a:	440b      	add	r3, r1
 8005e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e3e:	e011      	b.n	8005e64 <dcd_event_handler+0x1dc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005e40:	4b4d      	ldr	r3, [pc, #308]	; (8005f78 <dcd_event_handler+0x2f0>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d80b      	bhi.n	8005e64 <dcd_event_handler+0x1dc>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005e4c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005e50:	4a49      	ldr	r2, [pc, #292]	; (8005f78 <dcd_event_handler+0x2f0>)
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	1a9a      	subs	r2, r3, r2
 8005e56:	4613      	mov	r3, r2
 8005e58:	005b      	lsls	r3, r3, #1
 8005e5a:	4413      	add	r3, r2
 8005e5c:	00db      	lsls	r3, r3, #3
 8005e5e:	4a48      	ldr	r2, [pc, #288]	; (8005f80 <dcd_event_handler+0x2f8>)
 8005e60:	4413      	add	r3, r2
 8005e62:	63fb      	str	r3, [r7, #60]	; 0x3c
  return driver;
 8005e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        usbd_class_driver_t const* driver = get_driver(i);
 8005e66:	66bb      	str	r3, [r7, #104]	; 0x68
        if (driver && driver->sof) {
 8005e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d00b      	beq.n	8005e86 <dcd_event_handler+0x1fe>
 8005e6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e70:	695b      	ldr	r3, [r3, #20]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d007      	beq.n	8005e86 <dcd_event_handler+0x1fe>
          driver->sof(event->rhport, event->sof.frame_count);
 8005e76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	7810      	ldrb	r0, [r2, #0]
 8005e7e:	687a      	ldr	r2, [r7, #4]
 8005e80:	6852      	ldr	r2, [r2, #4]
 8005e82:	4611      	mov	r1, r2
 8005e84:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005e86:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8005e8a:	3301      	adds	r3, #1
 8005e8c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8005e90:	4b39      	ldr	r3, [pc, #228]	; (8005f78 <dcd_event_handler+0x2f0>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8005e98:	429a      	cmp	r2, r3
 8005e9a:	d9ba      	bls.n	8005e12 <dcd_event_handler+0x18a>
        }
      }

      // skip osal queue for SOF in usbd task
      break;
 8005e9c:	e006      	b.n	8005eac <dcd_event_handler+0x224>

    default:
      send = true;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005ea4:	e002      	b.n	8005eac <dcd_event_handler+0x224>
      break;
 8005ea6:	bf00      	nop
 8005ea8:	e000      	b.n	8005eac <dcd_event_handler+0x224>
      break;
 8005eaa:	bf00      	nop
  }

  if (send) {
 8005eac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d054      	beq.n	8005f5e <dcd_event_handler+0x2d6>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005eb8:	78fb      	ldrb	r3, [r7, #3]
 8005eba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 8005ebe:	4b2b      	ldr	r3, [pc, #172]	; (8005f6c <dcd_event_handler+0x2e4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	633b      	str	r3, [r7, #48]	; 0x30
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005ecc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (!in_isr) {
 8005ed0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ed4:	f083 0301 	eor.w	r3, r3, #1
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d006      	beq.n	8005eec <dcd_event_handler+0x264>
 8005ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ee0:	627b      	str	r3, [r7, #36]	; 0x24
  qhdl->interrupt_set(false);
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	4798      	blx	r3
}
 8005eea:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 8005eec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005eee:	3304      	adds	r3, #4
 8005ef0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fe fe57 	bl	8004ba6 <tu_fifo_write>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (!in_isr) {
 8005efe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f02:	f083 0301 	eor.w	r3, r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d006      	beq.n	8005f1a <dcd_event_handler+0x292>
 8005f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f0e:	61fb      	str	r3, [r7, #28]
  qhdl->interrupt_set(true);
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	2001      	movs	r0, #1
 8005f16:	4798      	blx	r3
}
 8005f18:	bf00      	nop
  TU_ASSERT(success);
 8005f1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f1e:	f083 0301 	eor.w	r3, r3, #1
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00a      	beq.n	8005f3e <dcd_event_handler+0x2b6>
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <dcd_event_handler+0x2e8>)
 8005f2a:	61bb      	str	r3, [r7, #24]
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d000      	beq.n	8005f3a <dcd_event_handler+0x2b2>
 8005f38:	be00      	bkpt	0x0000
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	e001      	b.n	8005f42 <dcd_event_handler+0x2ba>
  return success;
 8005f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005f42:	75fb      	strb	r3, [r7, #23]
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <dcd_event_handler+0x2ec>)
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d009      	beq.n	8005f5e <dcd_event_handler+0x2d6>
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	7818      	ldrb	r0, [r3, #0]
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	785b      	ldrb	r3, [r3, #1]
 8005f52:	4619      	mov	r1, r3
 8005f54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005f58:	461a      	mov	r2, r3
 8005f5a:	f3af 8000 	nop.w
    queue_event(event, in_isr);
  }
}
 8005f5e:	bf00      	nop
 8005f60:	3770      	adds	r7, #112	; 0x70
 8005f62:	46bd      	mov	sp, r7
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20001268 	.word	0x20001268
 8005f6c:	2000135c 	.word	0x2000135c
 8005f70:	e000edf0 	.word	0xe000edf0
 8005f74:	00000000 	.word	0x00000000
 8005f78:	20001298 	.word	0x20001298
 8005f7c:	20001294 	.word	0x20001294
 8005f80:	080087a8 	.word	0x080087a8

08005f84 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 8005f8e:	79fb      	ldrb	r3, [r7, #7]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8005f94:	4b07      	ldr	r3, [pc, #28]	; (8005fb4 <usbd_int_set+0x30>)
 8005f96:	781b      	ldrb	r3, [r3, #0]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f001 f877 	bl	800708c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 8005f9e:	e004      	b.n	8005faa <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8005fa0:	4b04      	ldr	r3, [pc, #16]	; (8005fb4 <usbd_int_set+0x30>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f001 f889 	bl	80070bc <dcd_int_disable>
}
 8005faa:	bf00      	nop
 8005fac:	3708      	adds	r7, #8
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20000019 	.word	0x20000019

08005fb8 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b08a      	sub	sp, #40	; 0x28
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6039      	str	r1, [r7, #0]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	71fb      	strb	r3, [r7, #7]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	71bb      	strb	r3, [r7, #6]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd4:	e04d      	b.n	8006072 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8005fda:	6a3b      	ldr	r3, [r7, #32]
 8005fdc:	785b      	ldrb	r3, [r3, #1]
 8005fde:	2b05      	cmp	r3, #5
 8005fe0:	d108      	bne.n	8005ff4 <usbd_open_edpt_pair+0x3c>
 8005fe2:	6a3b      	ldr	r3, [r7, #32]
 8005fe4:	78db      	ldrb	r3, [r3, #3]
 8005fe6:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	797b      	ldrb	r3, [r7, #5]
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00a      	beq.n	800600a <usbd_open_edpt_pair+0x52>
 8005ff4:	4b23      	ldr	r3, [pc, #140]	; (8006084 <usbd_open_edpt_pair+0xcc>)
 8005ff6:	61bb      	str	r3, [r7, #24]
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f003 0301 	and.w	r3, r3, #1
 8006000:	2b00      	cmp	r3, #0
 8006002:	d000      	beq.n	8006006 <usbd_open_edpt_pair+0x4e>
 8006004:	be00      	bkpt	0x0000
 8006006:	2300      	movs	r3, #0
 8006008:	e038      	b.n	800607c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800600a:	79fb      	ldrb	r3, [r7, #7]
 800600c:	6a39      	ldr	r1, [r7, #32]
 800600e:	4618      	mov	r0, r3
 8006010:	f000 f83a 	bl	8006088 <usbd_edpt_open>
 8006014:	4603      	mov	r3, r0
 8006016:	f083 0301 	eor.w	r3, r3, #1
 800601a:	b2db      	uxtb	r3, r3
 800601c:	2b00      	cmp	r3, #0
 800601e:	d00a      	beq.n	8006036 <usbd_open_edpt_pair+0x7e>
 8006020:	4b18      	ldr	r3, [pc, #96]	; (8006084 <usbd_open_edpt_pair+0xcc>)
 8006022:	61fb      	str	r3, [r7, #28]
 8006024:	69fb      	ldr	r3, [r7, #28]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0301 	and.w	r3, r3, #1
 800602c:	2b00      	cmp	r3, #0
 800602e:	d000      	beq.n	8006032 <usbd_open_edpt_pair+0x7a>
 8006030:	be00      	bkpt	0x0000
 8006032:	2300      	movs	r3, #0
 8006034:	e022      	b.n	800607c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	789b      	ldrb	r3, [r3, #2]
 800603a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800603c:	7dfb      	ldrb	r3, [r7, #23]
 800603e:	09db      	lsrs	r3, r3, #7
 8006040:	b2db      	uxtb	r3, r3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d104      	bne.n	8006050 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	789a      	ldrb	r2, [r3, #2]
 800604a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e003      	b.n	8006058 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 8006050:	6a3b      	ldr	r3, [r7, #32]
 8006052:	789a      	ldrb	r2, [r3, #2]
 8006054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006056:	701a      	strb	r2, [r3, #0]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	781b      	ldrb	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 800606a:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	3301      	adds	r3, #1
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
 8006072:	79bb      	ldrb	r3, [r7, #6]
 8006074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006076:	429a      	cmp	r2, r3
 8006078:	dbad      	blt.n	8005fd6 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800607a:	2301      	movs	r3, #1
}
 800607c:	4618      	mov	r0, r3
 800607e:	3728      	adds	r7, #40	; 0x28
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	e000edf0 	.word	0xe000edf0

08006088 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	4603      	mov	r3, r0
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8006094:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <usbd_edpt_open+0x7c>)
 8006096:	781b      	ldrb	r3, [r3, #0]
 8006098:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	789b      	ldrb	r3, [r3, #2]
 800609e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80060a0:	7bfb      	ldrb	r3, [r7, #15]
 80060a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b05      	cmp	r3, #5
 80060aa:	d90a      	bls.n	80060c2 <usbd_edpt_open+0x3a>
 80060ac:	4b16      	ldr	r3, [pc, #88]	; (8006108 <usbd_edpt_open+0x80>)
 80060ae:	613b      	str	r3, [r7, #16]
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0301 	and.w	r3, r3, #1
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d000      	beq.n	80060be <usbd_edpt_open+0x36>
 80060bc:	be00      	bkpt	0x0000
 80060be:	2300      	movs	r3, #0
 80060c0:	e01c      	b.n	80060fc <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 80060c2:	4b12      	ldr	r3, [pc, #72]	; (800610c <usbd_edpt_open+0x84>)
 80060c4:	789b      	ldrb	r3, [r3, #2]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6838      	ldr	r0, [r7, #0]
 80060ca:	f002 f925 	bl	8008318 <tu_edpt_validate>
 80060ce:	4603      	mov	r3, r0
 80060d0:	f083 0301 	eor.w	r3, r3, #1
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <usbd_edpt_open+0x68>
 80060da:	4b0b      	ldr	r3, [pc, #44]	; (8006108 <usbd_edpt_open+0x80>)
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d000      	beq.n	80060ec <usbd_edpt_open+0x64>
 80060ea:	be00      	bkpt	0x0000
 80060ec:	2300      	movs	r3, #0
 80060ee:	e005      	b.n	80060fc <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 80060f0:	79fb      	ldrb	r3, [r7, #7]
 80060f2:	6839      	ldr	r1, [r7, #0]
 80060f4:	4618      	mov	r0, r3
 80060f6:	f001 f8a5 	bl	8007244 <dcd_edpt_open>
 80060fa:	4603      	mov	r3, r0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	20000019 	.word	0x20000019
 8006108:	e000edf0 	.word	0xe000edf0
 800610c:	20001268 	.word	0x20001268

08006110 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b086      	sub	sp, #24
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	460a      	mov	r2, r1
 800611a:	71fb      	strb	r3, [r7, #7]
 800611c:	4613      	mov	r3, r2
 800611e:	71bb      	strb	r3, [r7, #6]
 8006120:	79bb      	ldrb	r3, [r7, #6]
 8006122:	73bb      	strb	r3, [r7, #14]
 8006124:	7bbb      	ldrb	r3, [r7, #14]
 8006126:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800612a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 800612c:	75fb      	strb	r3, [r7, #23]
 800612e:	79bb      	ldrb	r3, [r7, #6]
 8006130:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006132:	7bfb      	ldrb	r3, [r7, #15]
 8006134:	09db      	lsrs	r3, r3, #7
 8006136:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 8006138:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800613a:	7dfa      	ldrb	r2, [r7, #23]
 800613c:	7dbb      	ldrb	r3, [r7, #22]
 800613e:	0052      	lsls	r2, r2, #1
 8006140:	4413      	add	r3, r2
 8006142:	3318      	adds	r3, #24
 8006144:	4a06      	ldr	r2, [pc, #24]	; (8006160 <usbd_edpt_claim+0x50>)
 8006146:	4413      	add	r3, r2
 8006148:	3307      	adds	r3, #7
 800614a:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800614c:	2100      	movs	r1, #0
 800614e:	6938      	ldr	r0, [r7, #16]
 8006150:	f002 f8a8 	bl	80082a4 <tu_edpt_claim>
 8006154:	4603      	mov	r3, r0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3718      	adds	r7, #24
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20001268 	.word	0x20001268

08006164 <usbd_edpt_xfer>:

  return tu_edpt_release(ep_state, _usbd_mutex);
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	603a      	str	r2, [r7, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	4603      	mov	r3, r0
 8006170:	71fb      	strb	r3, [r7, #7]
 8006172:	460b      	mov	r3, r1
 8006174:	71bb      	strb	r3, [r7, #6]
 8006176:	4613      	mov	r3, r2
 8006178:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800617a:	4b32      	ldr	r3, [pc, #200]	; (8006244 <usbd_edpt_xfer+0xe0>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	71fb      	strb	r3, [r7, #7]
 8006180:	79bb      	ldrb	r3, [r7, #6]
 8006182:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006184:	7abb      	ldrb	r3, [r7, #10]
 8006186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800618c:	75fb      	strb	r3, [r7, #23]
 800618e:	79bb      	ldrb	r3, [r7, #6]
 8006190:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006192:	7afb      	ldrb	r3, [r7, #11]
 8006194:	09db      	lsrs	r3, r3, #7
 8006196:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006198:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800619a:	7dfa      	ldrb	r2, [r7, #23]
 800619c:	7dbb      	ldrb	r3, [r7, #22]
 800619e:	492a      	ldr	r1, [pc, #168]	; (8006248 <usbd_edpt_xfer+0xe4>)
 80061a0:	0052      	lsls	r2, r2, #1
 80061a2:	440a      	add	r2, r1
 80061a4:	4413      	add	r3, r2
 80061a6:	3318      	adds	r3, #24
 80061a8:	79db      	ldrb	r3, [r3, #7]
 80061aa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <usbd_edpt_xfer+0x66>
 80061b4:	4b25      	ldr	r3, [pc, #148]	; (800624c <usbd_edpt_xfer+0xe8>)
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0301 	and.w	r3, r3, #1
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d000      	beq.n	80061c6 <usbd_edpt_xfer+0x62>
 80061c4:	be00      	bkpt	0x0000
 80061c6:	2300      	movs	r3, #0
 80061c8:	e038      	b.n	800623c <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 80061ca:	7dfa      	ldrb	r2, [r7, #23]
 80061cc:	7dbb      	ldrb	r3, [r7, #22]
 80061ce:	491e      	ldr	r1, [pc, #120]	; (8006248 <usbd_edpt_xfer+0xe4>)
 80061d0:	0052      	lsls	r2, r2, #1
 80061d2:	440a      	add	r2, r1
 80061d4:	4413      	add	r3, r2
 80061d6:	f103 0218 	add.w	r2, r3, #24
 80061da:	79d3      	ldrb	r3, [r2, #7]
 80061dc:	f043 0301 	orr.w	r3, r3, #1
 80061e0:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 80061e2:	88bb      	ldrh	r3, [r7, #4]
 80061e4:	79b9      	ldrb	r1, [r7, #6]
 80061e6:	79f8      	ldrb	r0, [r7, #7]
 80061e8:	683a      	ldr	r2, [r7, #0]
 80061ea:	f001 f9a9 	bl	8007540 <dcd_edpt_xfer>
 80061ee:	4603      	mov	r3, r0
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d001      	beq.n	80061f8 <usbd_edpt_xfer+0x94>
  {
    return true;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e021      	b.n	800623c <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80061f8:	7dfa      	ldrb	r2, [r7, #23]
 80061fa:	7dbb      	ldrb	r3, [r7, #22]
 80061fc:	4912      	ldr	r1, [pc, #72]	; (8006248 <usbd_edpt_xfer+0xe4>)
 80061fe:	0052      	lsls	r2, r2, #1
 8006200:	440a      	add	r2, r1
 8006202:	4413      	add	r3, r2
 8006204:	f103 0218 	add.w	r2, r3, #24
 8006208:	79d3      	ldrb	r3, [r2, #7]
 800620a:	f36f 0300 	bfc	r3, #0, #1
 800620e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8006210:	7dfa      	ldrb	r2, [r7, #23]
 8006212:	7dbb      	ldrb	r3, [r7, #22]
 8006214:	490c      	ldr	r1, [pc, #48]	; (8006248 <usbd_edpt_xfer+0xe4>)
 8006216:	0052      	lsls	r2, r2, #1
 8006218:	440a      	add	r2, r1
 800621a:	4413      	add	r3, r2
 800621c:	f103 0218 	add.w	r2, r3, #24
 8006220:	79d3      	ldrb	r3, [r2, #7]
 8006222:	f36f 0382 	bfc	r3, #2, #1
 8006226:	71d3      	strb	r3, [r2, #7]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8006228:	4b08      	ldr	r3, [pc, #32]	; (800624c <usbd_edpt_xfer+0xe8>)
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d000      	beq.n	800623a <usbd_edpt_xfer+0xd6>
 8006238:	be00      	bkpt	0x0000
    return false;
 800623a:	2300      	movs	r3, #0
  }
}
 800623c:	4618      	mov	r0, r3
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	20000019 	.word	0x20000019
 8006248:	20001268 	.word	0x20001268
 800624c:	e000edf0 	.word	0xe000edf0

08006250 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 8006250:	b480      	push	{r7}
 8006252:	b085      	sub	sp, #20
 8006254:	af00      	add	r7, sp, #0
 8006256:	4603      	mov	r3, r0
 8006258:	460a      	mov	r2, r1
 800625a:	71fb      	strb	r3, [r7, #7]
 800625c:	4613      	mov	r3, r2
 800625e:	71bb      	strb	r3, [r7, #6]
 8006260:	79bb      	ldrb	r3, [r7, #6]
 8006262:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006264:	7b3b      	ldrb	r3, [r7, #12]
 8006266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800626a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800626c:	73fb      	strb	r3, [r7, #15]
 800626e:	79bb      	ldrb	r3, [r7, #6]
 8006270:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006272:	7b7b      	ldrb	r3, [r7, #13]
 8006274:	09db      	lsrs	r3, r3, #7
 8006276:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006278:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	7bbb      	ldrb	r3, [r7, #14]
 800627e:	490a      	ldr	r1, [pc, #40]	; (80062a8 <usbd_edpt_busy+0x58>)
 8006280:	0052      	lsls	r2, r2, #1
 8006282:	440a      	add	r2, r1
 8006284:	4413      	add	r3, r2
 8006286:	3318      	adds	r3, #24
 8006288:	79db      	ldrb	r3, [r3, #7]
 800628a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	bf14      	ite	ne
 8006294:	2301      	movne	r3, #1
 8006296:	2300      	moveq	r3, #0
 8006298:	b2db      	uxtb	r3, r3
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	20001268 	.word	0x20001268

080062ac <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	4603      	mov	r3, r0
 80062b4:	460a      	mov	r2, r1
 80062b6:	71fb      	strb	r3, [r7, #7]
 80062b8:	4613      	mov	r3, r2
 80062ba:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80062bc:	4b1f      	ldr	r3, [pc, #124]	; (800633c <usbd_edpt_stall+0x90>)
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	71fb      	strb	r3, [r7, #7]
 80062c2:	79bb      	ldrb	r3, [r7, #6]
 80062c4:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80062c6:	7b3b      	ldrb	r3, [r7, #12]
 80062c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062cc:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	79bb      	ldrb	r3, [r7, #6]
 80062d2:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80062d4:	7b7b      	ldrb	r3, [r7, #13]
 80062d6:	09db      	lsrs	r3, r3, #7
 80062d8:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 80062da:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 80062dc:	7bfa      	ldrb	r2, [r7, #15]
 80062de:	7bbb      	ldrb	r3, [r7, #14]
 80062e0:	4917      	ldr	r1, [pc, #92]	; (8006340 <usbd_edpt_stall+0x94>)
 80062e2:	0052      	lsls	r2, r2, #1
 80062e4:	440a      	add	r2, r1
 80062e6:	4413      	add	r3, r2
 80062e8:	3318      	adds	r3, #24
 80062ea:	79db      	ldrb	r3, [r3, #7]
 80062ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d11d      	bne.n	8006332 <usbd_edpt_stall+0x86>
  {
    TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 80062f6:	79ba      	ldrb	r2, [r7, #6]
 80062f8:	79fb      	ldrb	r3, [r7, #7]
 80062fa:	4611      	mov	r1, r2
 80062fc:	4618      	mov	r0, r3
 80062fe:	f001 fa73 	bl	80077e8 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8006302:	7bfa      	ldrb	r2, [r7, #15]
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	490e      	ldr	r1, [pc, #56]	; (8006340 <usbd_edpt_stall+0x94>)
 8006308:	0052      	lsls	r2, r2, #1
 800630a:	440a      	add	r2, r1
 800630c:	4413      	add	r3, r2
 800630e:	f103 0218 	add.w	r2, r3, #24
 8006312:	79d3      	ldrb	r3, [r2, #7]
 8006314:	f043 0302 	orr.w	r3, r3, #2
 8006318:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 800631a:	7bfa      	ldrb	r2, [r7, #15]
 800631c:	7bbb      	ldrb	r3, [r7, #14]
 800631e:	4908      	ldr	r1, [pc, #32]	; (8006340 <usbd_edpt_stall+0x94>)
 8006320:	0052      	lsls	r2, r2, #1
 8006322:	440a      	add	r2, r1
 8006324:	4413      	add	r3, r2
 8006326:	f103 0218 	add.w	r2, r3, #24
 800632a:	79d3      	ldrb	r3, [r2, #7]
 800632c:	f043 0301 	orr.w	r3, r3, #1
 8006330:	71d3      	strb	r3, [r2, #7]
  }
}
 8006332:	bf00      	nop
 8006334:	3710      	adds	r7, #16
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}
 800633a:	bf00      	nop
 800633c:	20000019 	.word	0x20000019
 8006340:	20001268 	.word	0x20001268

08006344 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b084      	sub	sp, #16
 8006348:	af00      	add	r7, sp, #0
 800634a:	4603      	mov	r3, r0
 800634c:	460a      	mov	r2, r1
 800634e:	71fb      	strb	r3, [r7, #7]
 8006350:	4613      	mov	r3, r2
 8006352:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8006354:	4b1f      	ldr	r3, [pc, #124]	; (80063d4 <usbd_edpt_clear_stall+0x90>)
 8006356:	781b      	ldrb	r3, [r3, #0]
 8006358:	71fb      	strb	r3, [r7, #7]
 800635a:	79bb      	ldrb	r3, [r7, #6]
 800635c:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800635e:	7b3b      	ldrb	r3, [r7, #12]
 8006360:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006364:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	79bb      	ldrb	r3, [r7, #6]
 800636a:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800636c:	7b7b      	ldrb	r3, [r7, #13]
 800636e:	09db      	lsrs	r3, r3, #7
 8006370:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006372:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8006374:	7bfa      	ldrb	r2, [r7, #15]
 8006376:	7bbb      	ldrb	r3, [r7, #14]
 8006378:	4917      	ldr	r1, [pc, #92]	; (80063d8 <usbd_edpt_clear_stall+0x94>)
 800637a:	0052      	lsls	r2, r2, #1
 800637c:	440a      	add	r2, r1
 800637e:	4413      	add	r3, r2
 8006380:	3318      	adds	r3, #24
 8006382:	79db      	ldrb	r3, [r3, #7]
 8006384:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d01d      	beq.n	80063ca <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 800638e:	79ba      	ldrb	r2, [r7, #6]
 8006390:	79fb      	ldrb	r3, [r7, #7]
 8006392:	4611      	mov	r1, r2
 8006394:	4618      	mov	r0, r3
 8006396:	f001 fa39 	bl	800780c <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800639a:	7bfa      	ldrb	r2, [r7, #15]
 800639c:	7bbb      	ldrb	r3, [r7, #14]
 800639e:	490e      	ldr	r1, [pc, #56]	; (80063d8 <usbd_edpt_clear_stall+0x94>)
 80063a0:	0052      	lsls	r2, r2, #1
 80063a2:	440a      	add	r2, r1
 80063a4:	4413      	add	r3, r2
 80063a6:	f103 0218 	add.w	r2, r3, #24
 80063aa:	79d3      	ldrb	r3, [r2, #7]
 80063ac:	f36f 0341 	bfc	r3, #1, #1
 80063b0:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 80063b2:	7bfa      	ldrb	r2, [r7, #15]
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4908      	ldr	r1, [pc, #32]	; (80063d8 <usbd_edpt_clear_stall+0x94>)
 80063b8:	0052      	lsls	r2, r2, #1
 80063ba:	440a      	add	r2, r1
 80063bc:	4413      	add	r3, r2
 80063be:	f103 0218 	add.w	r2, r3, #24
 80063c2:	79d3      	ldrb	r3, [r2, #7]
 80063c4:	f36f 0300 	bfc	r3, #0, #1
 80063c8:	71d3      	strb	r3, [r2, #7]
  }
}
 80063ca:	bf00      	nop
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000019 	.word	0x20000019
 80063d8:	20001268 	.word	0x20001268

080063dc <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 80063dc:	b480      	push	{r7}
 80063de:	b085      	sub	sp, #20
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	4603      	mov	r3, r0
 80063e4:	460a      	mov	r2, r1
 80063e6:	71fb      	strb	r3, [r7, #7]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71bb      	strb	r3, [r7, #6]
 80063ec:	79bb      	ldrb	r3, [r7, #6]
 80063ee:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80063f0:	7b3b      	ldrb	r3, [r7, #12]
 80063f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063f6:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80063f8:	73fb      	strb	r3, [r7, #15]
 80063fa:	79bb      	ldrb	r3, [r7, #6]
 80063fc:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80063fe:	7b7b      	ldrb	r3, [r7, #13]
 8006400:	09db      	lsrs	r3, r3, #7
 8006402:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006404:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	7bbb      	ldrb	r3, [r7, #14]
 800640a:	490a      	ldr	r1, [pc, #40]	; (8006434 <usbd_edpt_stalled+0x58>)
 800640c:	0052      	lsls	r2, r2, #1
 800640e:	440a      	add	r2, r1
 8006410:	4413      	add	r3, r2
 8006412:	3318      	adds	r3, #24
 8006414:	79db      	ldrb	r3, [r3, #7]
 8006416:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800641a:	b2db      	uxtb	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	bf14      	ite	ne
 8006420:	2301      	movne	r3, #1
 8006422:	2300      	moveq	r3, #0
 8006424:	b2db      	uxtb	r3, r3
}
 8006426:	4618      	mov	r0, r3
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20001268 	.word	0x20001268

08006438 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	4603      	mov	r3, r0
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <_status_stage_xact+0x1e>
 8006452:	2300      	movs	r3, #0
 8006454:	e000      	b.n	8006458 <_status_stage_xact+0x20>
 8006456:	2380      	movs	r3, #128	; 0x80
 8006458:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 800645a:	7bf9      	ldrb	r1, [r7, #15]
 800645c:	79f8      	ldrb	r0, [r7, #7]
 800645e:	2300      	movs	r3, #0
 8006460:	2200      	movs	r2, #0
 8006462:	f7ff fe7f 	bl	8006164 <usbd_edpt_xfer>
 8006466:	4603      	mov	r3, r0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3710      	adds	r7, #16
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	6039      	str	r1, [r7, #0]
 800647a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 800647c:	4b0b      	ldr	r3, [pc, #44]	; (80064ac <tud_control_status+0x3c>)
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	6810      	ldr	r0, [r2, #0]
 8006482:	6851      	ldr	r1, [r2, #4]
 8006484:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8006486:	4b09      	ldr	r3, [pc, #36]	; (80064ac <tud_control_status+0x3c>)
 8006488:	2200      	movs	r2, #0
 800648a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800648c:	4b07      	ldr	r3, [pc, #28]	; (80064ac <tud_control_status+0x3c>)
 800648e:	2200      	movs	r2, #0
 8006490:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8006492:	4b06      	ldr	r3, [pc, #24]	; (80064ac <tud_control_status+0x3c>)
 8006494:	2200      	movs	r2, #0
 8006496:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8006498:	79fb      	ldrb	r3, [r7, #7]
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	4618      	mov	r0, r3
 800649e:	f7ff ffcb 	bl	8006438 <_status_stage_xact>
 80064a2:	4603      	mov	r3, r0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3708      	adds	r7, #8
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}
 80064ac:	20001360 	.word	0x20001360

080064b0 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b088      	sub	sp, #32
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	4603      	mov	r3, r0
 80064b8:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 80064ba:	4b24      	ldr	r3, [pc, #144]	; (800654c <_data_stage_xact+0x9c>)
 80064bc:	899a      	ldrh	r2, [r3, #12]
 80064be:	4b23      	ldr	r3, [pc, #140]	; (800654c <_data_stage_xact+0x9c>)
 80064c0:	89db      	ldrh	r3, [r3, #14]
 80064c2:	1ad3      	subs	r3, r2, r3
 80064c4:	b29b      	uxth	r3, r3
 80064c6:	837b      	strh	r3, [r7, #26]
 80064c8:	2340      	movs	r3, #64	; 0x40
 80064ca:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80064cc:	8b7a      	ldrh	r2, [r7, #26]
 80064ce:	8b3b      	ldrh	r3, [r7, #24]
 80064d0:	4293      	cmp	r3, r2
 80064d2:	bf28      	it	cs
 80064d4:	4613      	movcs	r3, r2
 80064d6:	b29b      	uxth	r3, r3
 80064d8:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 80064da:	2300      	movs	r3, #0
 80064dc:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 80064de:	4b1b      	ldr	r3, [pc, #108]	; (800654c <_data_stage_xact+0x9c>)
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064e6:	b2db      	uxtb	r3, r3
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d01e      	beq.n	800652a <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 80064ec:	2380      	movs	r3, #128	; 0x80
 80064ee:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 80064f0:	8bbb      	ldrh	r3, [r7, #28]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d019      	beq.n	800652a <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 80064f6:	4b15      	ldr	r3, [pc, #84]	; (800654c <_data_stage_xact+0x9c>)
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	8bbb      	ldrh	r3, [r7, #28]
 80064fc:	4914      	ldr	r1, [pc, #80]	; (8006550 <_data_stage_xact+0xa0>)
 80064fe:	6179      	str	r1, [r7, #20]
 8006500:	2140      	movs	r1, #64	; 0x40
 8006502:	6139      	str	r1, [r7, #16]
 8006504:	60fa      	str	r2, [r7, #12]
 8006506:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	429a      	cmp	r2, r3
 800650e:	d202      	bcs.n	8006516 <_data_stage_xact+0x66>
    return -1;
 8006510:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006514:	e005      	b.n	8006522 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 8006516:	68ba      	ldr	r2, [r7, #8]
 8006518:	68f9      	ldr	r1, [r7, #12]
 800651a:	6978      	ldr	r0, [r7, #20]
 800651c:	f001 ffea 	bl	80084f4 <memcpy>
  return 0;
 8006520:	2300      	movs	r3, #0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <_data_stage_xact+0x7a>
 8006526:	2300      	movs	r3, #0
 8006528:	e00b      	b.n	8006542 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 800652a:	8bbb      	ldrh	r3, [r7, #28]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <_data_stage_xact+0x84>
 8006530:	4a07      	ldr	r2, [pc, #28]	; (8006550 <_data_stage_xact+0xa0>)
 8006532:	e000      	b.n	8006536 <_data_stage_xact+0x86>
 8006534:	2200      	movs	r2, #0
 8006536:	8bbb      	ldrh	r3, [r7, #28]
 8006538:	7ff9      	ldrb	r1, [r7, #31]
 800653a:	79f8      	ldrb	r0, [r7, #7]
 800653c:	f7ff fe12 	bl	8006164 <usbd_edpt_xfer>
 8006540:	4603      	mov	r3, r0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3720      	adds	r7, #32
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	20001360 	.word	0x20001360
 8006550:	20001374 	.word	0x20001374

08006554 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b088      	sub	sp, #32
 8006558:	af00      	add	r7, sp, #0
 800655a:	60b9      	str	r1, [r7, #8]
 800655c:	607a      	str	r2, [r7, #4]
 800655e:	461a      	mov	r2, r3
 8006560:	4603      	mov	r3, r0
 8006562:	73fb      	strb	r3, [r7, #15]
 8006564:	4613      	mov	r3, r2
 8006566:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 8006568:	4b30      	ldr	r3, [pc, #192]	; (800662c <tud_control_xfer+0xd8>)
 800656a:	68ba      	ldr	r2, [r7, #8]
 800656c:	6810      	ldr	r0, [r2, #0]
 800656e:	6851      	ldr	r1, [r2, #4]
 8006570:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8006572:	4a2e      	ldr	r2, [pc, #184]	; (800662c <tud_control_xfer+0xd8>)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8006578:	4b2c      	ldr	r3, [pc, #176]	; (800662c <tud_control_xfer+0xd8>)
 800657a:	2200      	movs	r2, #0
 800657c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	88db      	ldrh	r3, [r3, #6]
 8006582:	b29a      	uxth	r2, r3
 8006584:	89bb      	ldrh	r3, [r7, #12]
 8006586:	827b      	strh	r3, [r7, #18]
 8006588:	4613      	mov	r3, r2
 800658a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800658c:	8a7a      	ldrh	r2, [r7, #18]
 800658e:	8a3b      	ldrh	r3, [r7, #16]
 8006590:	4293      	cmp	r3, r2
 8006592:	bf28      	it	cs
 8006594:	4613      	movcs	r3, r2
 8006596:	b29a      	uxth	r2, r3
 8006598:	4b24      	ldr	r3, [pc, #144]	; (800662c <tud_control_xfer+0xd8>)
 800659a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	88db      	ldrh	r3, [r3, #6]
 80065a0:	b29b      	uxth	r3, r3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d026      	beq.n	80065f4 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 80065a6:	4b21      	ldr	r3, [pc, #132]	; (800662c <tud_control_xfer+0xd8>)
 80065a8:	899b      	ldrh	r3, [r3, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00d      	beq.n	80065ca <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10a      	bne.n	80065ca <tud_control_xfer+0x76>
 80065b4:	4b1e      	ldr	r3, [pc, #120]	; (8006630 <tud_control_xfer+0xdc>)
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0301 	and.w	r3, r3, #1
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d000      	beq.n	80065c6 <tud_control_xfer+0x72>
 80065c4:	be00      	bkpt	0x0000
 80065c6:	2300      	movs	r3, #0
 80065c8:	e02b      	b.n	8006622 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 80065ca:	7bfb      	ldrb	r3, [r7, #15]
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7ff ff6f 	bl	80064b0 <_data_stage_xact>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f083 0301 	eor.w	r3, r3, #1
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d020      	beq.n	8006620 <tud_control_xfer+0xcc>
 80065de:	4b14      	ldr	r3, [pc, #80]	; (8006630 <tud_control_xfer+0xdc>)
 80065e0:	617b      	str	r3, [r7, #20]
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f003 0301 	and.w	r3, r3, #1
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d000      	beq.n	80065f0 <tud_control_xfer+0x9c>
 80065ee:	be00      	bkpt	0x0000
 80065f0:	2300      	movs	r3, #0
 80065f2:	e016      	b.n	8006622 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
 80065f6:	68b9      	ldr	r1, [r7, #8]
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff ff1d 	bl	8006438 <_status_stage_xact>
 80065fe:	4603      	mov	r3, r0
 8006600:	f083 0301 	eor.w	r3, r3, #1
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00a      	beq.n	8006620 <tud_control_xfer+0xcc>
 800660a:	4b09      	ldr	r3, [pc, #36]	; (8006630 <tud_control_xfer+0xdc>)
 800660c:	61fb      	str	r3, [r7, #28]
 800660e:	69fb      	ldr	r3, [r7, #28]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0301 	and.w	r3, r3, #1
 8006616:	2b00      	cmp	r3, #0
 8006618:	d000      	beq.n	800661c <tud_control_xfer+0xc8>
 800661a:	be00      	bkpt	0x0000
 800661c:	2300      	movs	r3, #0
 800661e:	e000      	b.n	8006622 <tud_control_xfer+0xce>
  }

  return true;
 8006620:	2301      	movs	r3, #1
}
 8006622:	4618      	mov	r0, r3
 8006624:	3720      	adds	r7, #32
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20001360 	.word	0x20001360
 8006630:	e000edf0 	.word	0xe000edf0

08006634 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8006638:	2214      	movs	r2, #20
 800663a:	2100      	movs	r1, #0
 800663c:	4802      	ldr	r0, [pc, #8]	; (8006648 <usbd_control_reset+0x14>)
 800663e:	f001 ff2c 	bl	800849a <memset>
}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20001360 	.word	0x20001360

0800664c <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8006654:	4a04      	ldr	r2, [pc, #16]	; (8006668 <usbd_control_set_complete_callback+0x1c>)
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	6113      	str	r3, [r2, #16]
}
 800665a:	bf00      	nop
 800665c:	370c      	adds	r7, #12
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20001360 	.word	0x20001360

0800666c <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 800666c:	b480      	push	{r7}
 800666e:	b083      	sub	sp, #12
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8006674:	4b09      	ldr	r3, [pc, #36]	; (800669c <usbd_control_set_request+0x30>)
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6810      	ldr	r0, [r2, #0]
 800667a:	6851      	ldr	r1, [r2, #4]
 800667c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 800667e:	4b07      	ldr	r3, [pc, #28]	; (800669c <usbd_control_set_request+0x30>)
 8006680:	2200      	movs	r2, #0
 8006682:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006684:	4b05      	ldr	r3, [pc, #20]	; (800669c <usbd_control_set_request+0x30>)
 8006686:	2200      	movs	r2, #0
 8006688:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800668a:	4b04      	ldr	r3, [pc, #16]	; (800669c <usbd_control_set_request+0x30>)
 800668c:	2200      	movs	r2, #0
 800668e:	819a      	strh	r2, [r3, #12]
}
 8006690:	bf00      	nop
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr
 800669c:	20001360 	.word	0x20001360

080066a0 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b088      	sub	sp, #32
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	603b      	str	r3, [r7, #0]
 80066a8:	4603      	mov	r3, r0
 80066aa:	71fb      	strb	r3, [r7, #7]
 80066ac:	460b      	mov	r3, r1
 80066ae:	71bb      	strb	r3, [r7, #6]
 80066b0:	4613      	mov	r3, r2
 80066b2:	717b      	strb	r3, [r7, #5]
 80066b4:	79bb      	ldrb	r3, [r7, #6]
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	09db      	lsrs	r3, r3, #7
 80066bc:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 80066be:	4a50      	ldr	r2, [pc, #320]	; (8006800 <usbd_control_xfer_cb+0x160>)
 80066c0:	7812      	ldrb	r2, [r2, #0]
 80066c2:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d021      	beq.n	8006710 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00a      	beq.n	80066e8 <usbd_control_xfer_cb+0x48>
 80066d2:	4b4c      	ldr	r3, [pc, #304]	; (8006804 <usbd_control_xfer_cb+0x164>)
 80066d4:	613b      	str	r3, [r7, #16]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d000      	beq.n	80066e4 <usbd_control_xfer_cb+0x44>
 80066e2:	be00      	bkpt	0x0000
 80066e4:	2300      	movs	r3, #0
 80066e6:	e087      	b.n	80067f8 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 80066e8:	4b47      	ldr	r3, [pc, #284]	; (8006808 <usbd_control_xfer_cb+0x168>)
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d004      	beq.n	80066f8 <usbd_control_xfer_cb+0x58>
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	4943      	ldr	r1, [pc, #268]	; (8006800 <usbd_control_xfer_cb+0x160>)
 80066f2:	4618      	mov	r0, r3
 80066f4:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 80066f8:	4b41      	ldr	r3, [pc, #260]	; (8006800 <usbd_control_xfer_cb+0x160>)
 80066fa:	691b      	ldr	r3, [r3, #16]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d005      	beq.n	800670c <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8006700:	4b3f      	ldr	r3, [pc, #252]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	79f8      	ldrb	r0, [r7, #7]
 8006706:	4a3e      	ldr	r2, [pc, #248]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006708:	2103      	movs	r1, #3
 800670a:	4798      	blx	r3
    }

    return true;
 800670c:	2301      	movs	r3, #1
 800670e:	e073      	b.n	80067f8 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 8006710:	4b3b      	ldr	r3, [pc, #236]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d10c      	bne.n	8006738 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 800671e:	4b38      	ldr	r3, [pc, #224]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <usbd_control_xfer_cb+0x8a>
 8006726:	2300      	movs	r3, #0
 8006728:	e066      	b.n	80067f8 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 800672a:	4b35      	ldr	r3, [pc, #212]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800672c:	689b      	ldr	r3, [r3, #8]
 800672e:	683a      	ldr	r2, [r7, #0]
 8006730:	4936      	ldr	r1, [pc, #216]	; (800680c <usbd_control_xfer_cb+0x16c>)
 8006732:	4618      	mov	r0, r3
 8006734:	f001 fede 	bl	80084f4 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 8006738:	4b31      	ldr	r3, [pc, #196]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800673a:	89da      	ldrh	r2, [r3, #14]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	b29b      	uxth	r3, r3
 8006740:	4413      	add	r3, r2
 8006742:	b29a      	uxth	r2, r3
 8006744:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006746:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 8006748:	4b2d      	ldr	r3, [pc, #180]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800674a:	689a      	ldr	r2, [r3, #8]
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	4413      	add	r3, r2
 8006750:	4a2b      	ldr	r2, [pc, #172]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006752:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 8006754:	4b2a      	ldr	r3, [pc, #168]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006756:	88da      	ldrh	r2, [r3, #6]
 8006758:	4b29      	ldr	r3, [pc, #164]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800675a:	89db      	ldrh	r3, [r3, #14]
 800675c:	429a      	cmp	r2, r3
 800675e:	d002      	beq.n	8006766 <usbd_control_xfer_cb+0xc6>
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	2b3f      	cmp	r3, #63	; 0x3f
 8006764:	d831      	bhi.n	80067ca <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 8006766:	2301      	movs	r3, #1
 8006768:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 800676a:	4b25      	ldr	r3, [pc, #148]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006772:	4b23      	ldr	r3, [pc, #140]	; (8006800 <usbd_control_xfer_cb+0x160>)
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	79f8      	ldrb	r0, [r7, #7]
 8006778:	4a21      	ldr	r2, [pc, #132]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800677a:	2102      	movs	r1, #2
 800677c:	4798      	blx	r3
 800677e:	4603      	mov	r3, r0
 8006780:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8006782:	7ffb      	ldrb	r3, [r7, #31]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d015      	beq.n	80067b4 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	491d      	ldr	r1, [pc, #116]	; (8006800 <usbd_control_xfer_cb+0x160>)
 800678c:	4618      	mov	r0, r3
 800678e:	f7ff fe53 	bl	8006438 <_status_stage_xact>
 8006792:	4603      	mov	r3, r0
 8006794:	f083 0301 	eor.w	r3, r3, #1
 8006798:	b2db      	uxtb	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d02a      	beq.n	80067f4 <usbd_control_xfer_cb+0x154>
 800679e:	4b19      	ldr	r3, [pc, #100]	; (8006804 <usbd_control_xfer_cb+0x164>)
 80067a0:	617b      	str	r3, [r7, #20]
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d000      	beq.n	80067b0 <usbd_control_xfer_cb+0x110>
 80067ae:	be00      	bkpt	0x0000
 80067b0:	2300      	movs	r3, #0
 80067b2:	e021      	b.n	80067f8 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 80067b4:	79fb      	ldrb	r3, [r7, #7]
 80067b6:	2100      	movs	r1, #0
 80067b8:	4618      	mov	r0, r3
 80067ba:	f001 f815 	bl	80077e8 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2180      	movs	r1, #128	; 0x80
 80067c2:	4618      	mov	r0, r3
 80067c4:	f001 f810 	bl	80077e8 <dcd_edpt_stall>
  {
 80067c8:	e014      	b.n	80067f4 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 80067ca:	79fb      	ldrb	r3, [r7, #7]
 80067cc:	4618      	mov	r0, r3
 80067ce:	f7ff fe6f 	bl	80064b0 <_data_stage_xact>
 80067d2:	4603      	mov	r3, r0
 80067d4:	f083 0301 	eor.w	r3, r3, #1
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <usbd_control_xfer_cb+0x156>
 80067de:	4b09      	ldr	r3, [pc, #36]	; (8006804 <usbd_control_xfer_cb+0x164>)
 80067e0:	61bb      	str	r3, [r7, #24]
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f003 0301 	and.w	r3, r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d000      	beq.n	80067f0 <usbd_control_xfer_cb+0x150>
 80067ee:	be00      	bkpt	0x0000
 80067f0:	2300      	movs	r3, #0
 80067f2:	e001      	b.n	80067f8 <usbd_control_xfer_cb+0x158>
  {
 80067f4:	bf00      	nop
  }

  return true;
 80067f6:	2301      	movs	r3, #1
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3720      	adds	r7, #32
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}
 8006800:	20001360 	.word	0x20001360
 8006804:	e000edf0 	.word	0xe000edf0
 8006808:	00000000 	.word	0x00000000
 800680c:	20001374 	.word	0x20001374

08006810 <__NVIC_EnableIRQ>:
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800681a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681e:	2b00      	cmp	r3, #0
 8006820:	db0b      	blt.n	800683a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006822:	79fb      	ldrb	r3, [r7, #7]
 8006824:	f003 021f 	and.w	r2, r3, #31
 8006828:	4907      	ldr	r1, [pc, #28]	; (8006848 <__NVIC_EnableIRQ+0x38>)
 800682a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800682e:	095b      	lsrs	r3, r3, #5
 8006830:	2001      	movs	r0, #1
 8006832:	fa00 f202 	lsl.w	r2, r0, r2
 8006836:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr
 8006846:	bf00      	nop
 8006848:	e000e100 	.word	0xe000e100

0800684c <__NVIC_DisableIRQ>:
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800685a:	2b00      	cmp	r3, #0
 800685c:	db12      	blt.n	8006884 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800685e:	79fb      	ldrb	r3, [r7, #7]
 8006860:	f003 021f 	and.w	r2, r3, #31
 8006864:	490a      	ldr	r1, [pc, #40]	; (8006890 <__NVIC_DisableIRQ+0x44>)
 8006866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800686a:	095b      	lsrs	r3, r3, #5
 800686c:	2001      	movs	r0, #1
 800686e:	fa00 f202 	lsl.w	r2, r0, r2
 8006872:	3320      	adds	r3, #32
 8006874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006878:	f3bf 8f4f 	dsb	sy
}
 800687c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800687e:	f3bf 8f6f 	isb	sy
}
 8006882:	bf00      	nop
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	e000e100 	.word	0xe000e100

08006894 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	460b      	mov	r3, r1
 800689e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	639a      	str	r2, [r3, #56]	; 0x38
      #else

      #endif
    }
  }
}
 80068b2:	e005      	b.n	80068c0 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	460b      	mov	r3, r1
 80068d6:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d152      	bne.n	8006984 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 80068de:	4b2c      	ldr	r3, [pc, #176]	; (8006990 <dwc2_phy_update+0xc4>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a2c      	ldr	r2, [pc, #176]	; (8006994 <dwc2_phy_update+0xc8>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d302      	bcc.n	80068ee <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 80068e8:	2306      	movs	r3, #6
 80068ea:	60fb      	str	r3, [r7, #12]
 80068ec:	e041      	b.n	8006972 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 80068ee:	4b28      	ldr	r3, [pc, #160]	; (8006990 <dwc2_phy_update+0xc4>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a29      	ldr	r2, [pc, #164]	; (8006998 <dwc2_phy_update+0xcc>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d902      	bls.n	80068fe <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 80068f8:	2307      	movs	r3, #7
 80068fa:	60fb      	str	r3, [r7, #12]
 80068fc:	e039      	b.n	8006972 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 80068fe:	4b24      	ldr	r3, [pc, #144]	; (8006990 <dwc2_phy_update+0xc4>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	4a26      	ldr	r2, [pc, #152]	; (800699c <dwc2_phy_update+0xd0>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d302      	bcc.n	800690e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8006908:	2308      	movs	r3, #8
 800690a:	60fb      	str	r3, [r7, #12]
 800690c:	e031      	b.n	8006972 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800690e:	4b20      	ldr	r3, [pc, #128]	; (8006990 <dwc2_phy_update+0xc4>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a23      	ldr	r2, [pc, #140]	; (80069a0 <dwc2_phy_update+0xd4>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d902      	bls.n	800691e <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8006918:	2309      	movs	r3, #9
 800691a:	60fb      	str	r3, [r7, #12]
 800691c:	e029      	b.n	8006972 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800691e:	4b1c      	ldr	r3, [pc, #112]	; (8006990 <dwc2_phy_update+0xc4>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a20      	ldr	r2, [pc, #128]	; (80069a4 <dwc2_phy_update+0xd8>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d902      	bls.n	800692e <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8006928:	230a      	movs	r3, #10
 800692a:	60fb      	str	r3, [r7, #12]
 800692c:	e021      	b.n	8006972 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800692e:	4b18      	ldr	r3, [pc, #96]	; (8006990 <dwc2_phy_update+0xc4>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4a1d      	ldr	r2, [pc, #116]	; (80069a8 <dwc2_phy_update+0xdc>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d902      	bls.n	800693e <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8006938:	230b      	movs	r3, #11
 800693a:	60fb      	str	r3, [r7, #12]
 800693c:	e019      	b.n	8006972 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800693e:	4b14      	ldr	r3, [pc, #80]	; (8006990 <dwc2_phy_update+0xc4>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a1a      	ldr	r2, [pc, #104]	; (80069ac <dwc2_phy_update+0xe0>)
 8006944:	4293      	cmp	r3, r2
 8006946:	d302      	bcc.n	800694e <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8006948:	230c      	movs	r3, #12
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	e011      	b.n	8006972 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800694e:	4b10      	ldr	r3, [pc, #64]	; (8006990 <dwc2_phy_update+0xc4>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a17      	ldr	r2, [pc, #92]	; (80069b0 <dwc2_phy_update+0xe4>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d302      	bcc.n	800695e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8006958:	230d      	movs	r3, #13
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	e009      	b.n	8006972 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800695e:	4b0c      	ldr	r3, [pc, #48]	; (8006990 <dwc2_phy_update+0xc4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a14      	ldr	r2, [pc, #80]	; (80069b4 <dwc2_phy_update+0xe8>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d302      	bcc.n	800696e <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8006968:	230e      	movs	r3, #14
 800696a:	60fb      	str	r3, [r7, #12]
 800696c:	e001      	b.n	8006972 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800696e:	230f      	movs	r3, #15
 8006970:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	68db      	ldr	r3, [r3, #12]
 8006976:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	029b      	lsls	r3, r3, #10
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	60da      	str	r2, [r3, #12]
  }
}
 8006984:	bf00      	nop
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	20000000 	.word	0x20000000
 8006994:	01e84800 	.word	0x01e84800
 8006998:	01a39ddf 	.word	0x01a39ddf
 800699c:	016e3600 	.word	0x016e3600
 80069a0:	014ca43f 	.word	0x014ca43f
 80069a4:	01312cff 	.word	0x01312cff
 80069a8:	011a499f 	.word	0x011a499f
 80069ac:	01067380 	.word	0x01067380
 80069b0:	00f42400 	.word	0x00f42400
 80069b4:	00e4e1c0 	.word	0x00e4e1c0

080069b8 <calc_grxfsiz>:

// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count) {
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	4603      	mov	r3, r0
 80069c0:	460a      	mov	r2, r1
 80069c2:	80fb      	strh	r3, [r7, #6]
 80069c4:	4613      	mov	r3, r2
 80069c6:	717b      	strb	r3, [r7, #5]
  return 15 + 2 * (max_ep_size / 4) + 2 * ep_count;
 80069c8:	88fb      	ldrh	r3, [r7, #6]
 80069ca:	089b      	lsrs	r3, r3, #2
 80069cc:	b29a      	uxth	r2, r3
 80069ce:	797b      	ldrb	r3, [r7, #5]
 80069d0:	b29b      	uxth	r3, r3
 80069d2:	4413      	add	r3, r2
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	b29b      	uxth	r3, r3
 80069da:	330f      	adds	r3, #15
 80069dc:	b29b      	uxth	r3, r3
}
 80069de:	4618      	mov	r0, r3
 80069e0:	370c      	adds	r7, #12
 80069e2:	46bd      	mov	sp, r7
 80069e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e8:	4770      	bx	lr
	...

080069ec <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport) {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80069f6:	79fb      	ldrb	r3, [r7, #7]
 80069f8:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <update_grxfsiz+0x7c>)
 80069fa:	011b      	lsls	r3, r3, #4
 80069fc:	4413      	add	r3, r2
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006a02:	79fb      	ldrb	r3, [r7, #7]
 8006a04:	4a18      	ldr	r2, [pc, #96]	; (8006a68 <update_grxfsiz+0x7c>)
 8006a06:	011b      	lsls	r3, r3, #4
 8006a08:	4413      	add	r3, r2
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	781b      	ldrb	r3, [r3, #0]
 8006a0e:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8006a14:	2300      	movs	r3, #0
 8006a16:	757b      	strb	r3, [r7, #21]
 8006a18:	e013      	b.n	8006a42 <update_grxfsiz+0x56>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8006a1a:	7d7b      	ldrb	r3, [r7, #21]
 8006a1c:	4a13      	ldr	r2, [pc, #76]	; (8006a6c <update_grxfsiz+0x80>)
 8006a1e:	015b      	lsls	r3, r3, #5
 8006a20:	4413      	add	r3, r2
 8006a22:	330a      	adds	r3, #10
 8006a24:	881a      	ldrh	r2, [r3, #0]
 8006a26:	8afb      	ldrh	r3, [r7, #22]
 8006a28:	81bb      	strh	r3, [r7, #12]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8006a2e:	89ba      	ldrh	r2, [r7, #12]
 8006a30:	897b      	ldrh	r3, [r7, #10]
 8006a32:	4293      	cmp	r3, r2
 8006a34:	bf38      	it	cc
 8006a36:	4613      	movcc	r3, r2
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8006a3c:	7d7b      	ldrb	r3, [r7, #21]
 8006a3e:	3301      	adds	r3, #1
 8006a40:	757b      	strb	r3, [r7, #21]
 8006a42:	7d7a      	ldrb	r2, [r7, #21]
 8006a44:	7bfb      	ldrb	r3, [r7, #15]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d3e7      	bcc.n	8006a1a <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	8afb      	ldrh	r3, [r7, #22]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f7ff ffb1 	bl	80069b8 <calc_grxfsiz>
 8006a56:	4603      	mov	r3, r0
 8006a58:	461a      	mov	r2, r3
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006a5e:	bf00      	nop
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	080087c0 	.word	0x080087c0
 8006a6c:	200013bc 	.word	0x200013bc

08006a70 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport) {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	4603      	mov	r3, r0
 8006a78:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	4a3c      	ldr	r2, [pc, #240]	; (8006b70 <bus_reset+0x100>)
 8006a7e:	011b      	lsls	r3, r3, #4
 8006a80:	4413      	add	r3, r2
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	4a39      	ldr	r2, [pc, #228]	; (8006b70 <bus_reset+0x100>)
 8006a8a:	011b      	lsls	r3, r3, #4
 8006a8c:	4413      	add	r3, r2
 8006a8e:	3308      	adds	r3, #8
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8006a94:	2280      	movs	r2, #128	; 0x80
 8006a96:	2100      	movs	r1, #0
 8006a98:	4836      	ldr	r0, [pc, #216]	; (8006b74 <bus_reset+0x104>)
 8006a9a:	f001 fcfe 	bl	800849a <memset>
  _out_ep_closed = false;
 8006a9e:	4b36      	ldr	r3, [pc, #216]	; (8006b78 <bus_reset+0x108>)
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 8006aa4:	4b35      	ldr	r3, [pc, #212]	; (8006b7c <bus_reset+0x10c>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8006ab0:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8006aba:	2300      	movs	r3, #0
 8006abc:	75fb      	strb	r3, [r7, #23]
 8006abe:	e010      	b.n	8006ae2 <bus_reset+0x72>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	3358      	adds	r3, #88	; 0x58
 8006ac6:	015b      	lsls	r3, r3, #5
 8006ac8:	4413      	add	r3, r2
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	7dfb      	ldrb	r3, [r7, #23]
 8006ace:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006ad2:	6939      	ldr	r1, [r7, #16]
 8006ad4:	3358      	adds	r3, #88	; 0x58
 8006ad6:	015b      	lsls	r3, r3, #5
 8006ad8:	440b      	add	r3, r1
 8006ada:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8006adc:	7dfb      	ldrb	r3, [r7, #23]
 8006ade:	3301      	adds	r3, #1
 8006ae0:	75fb      	strb	r3, [r7, #23]
 8006ae2:	7dfa      	ldrb	r2, [r7, #23]
 8006ae4:	7bfb      	ldrb	r3, [r7, #15]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3ea      	bcc.n	8006ac0 <bus_reset+0x50>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006af0:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	2209      	movs	r2, #9
 8006af8:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8006afc:	693b      	ldr	r3, [r7, #16]
 8006afe:	2209      	movs	r2, #9
 8006b00:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	4619      	mov	r1, r3
 8006b08:	2040      	movs	r0, #64	; 0x40
 8006b0a:	f7ff ff55 	bl	80069b8 <calc_grxfsiz>
 8006b0e:	4603      	mov	r3, r0
 8006b10:	461a      	mov	r2, r3
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <bus_reset+0x110>)
 8006b18:	2210      	movs	r2, #16
 8006b1a:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8006b1c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006b20:	089b      	lsrs	r3, r3, #2
 8006b22:	4a17      	ldr	r2, [pc, #92]	; (8006b80 <bus_reset+0x110>)
 8006b24:	8812      	ldrh	r2, [r2, #0]
 8006b26:	1a9b      	subs	r3, r3, r2
 8006b28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8006b36:	f023 0203 	bic.w	r2, r3, #3
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8006b40:	4b0c      	ldr	r3, [pc, #48]	; (8006b74 <bus_reset+0x104>)
 8006b42:	2240      	movs	r2, #64	; 0x40
 8006b44:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8006b46:	4b0b      	ldr	r3, [pc, #44]	; (8006b74 <bus_reset+0x104>)
 8006b48:	2240      	movs	r2, #64	; 0x40
 8006b4a:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8006b52:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	619a      	str	r2, [r3, #24]
}
 8006b68:	bf00      	nop
 8006b6a:	3718      	adds	r7, #24
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	080087c0 	.word	0x080087c0
 8006b74:	200013bc 	.word	0x200013bc
 8006b78:	20001442 	.word	0x20001442
 8006b7c:	20001443 	.word	0x20001443
 8006b80:	20001440 	.word	0x20001440

08006b84 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets,
                                  uint16_t total_bytes) {
 8006b84:	b490      	push	{r4, r7}
 8006b86:	b08a      	sub	sp, #40	; 0x28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	4604      	mov	r4, r0
 8006b8c:	4608      	mov	r0, r1
 8006b8e:	4611      	mov	r1, r2
 8006b90:	461a      	mov	r2, r3
 8006b92:	4623      	mov	r3, r4
 8006b94:	71fb      	strb	r3, [r7, #7]
 8006b96:	4603      	mov	r3, r0
 8006b98:	71bb      	strb	r3, [r7, #6]
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	717b      	strb	r3, [r7, #5]
 8006b9e:	4613      	mov	r3, r2
 8006ba0:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006ba2:	79fb      	ldrb	r3, [r7, #7]
 8006ba4:	4a71      	ldr	r2, [pc, #452]	; (8006d6c <edpt_schedule_packets+0x1e8>)
 8006ba6:	011b      	lsls	r3, r3, #4
 8006ba8:	4413      	add	r3, r2
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if (epnum == 0) {
 8006bae:	79bb      	ldrb	r3, [r7, #6]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d121      	bne.n	8006bf8 <edpt_schedule_packets+0x74>
    xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8006bb4:	79ba      	ldrb	r2, [r7, #6]
 8006bb6:	797b      	ldrb	r3, [r7, #5]
 8006bb8:	0052      	lsls	r2, r2, #1
 8006bba:	4413      	add	r3, r2
 8006bbc:	011b      	lsls	r3, r3, #4
 8006bbe:	4a6c      	ldr	r2, [pc, #432]	; (8006d70 <edpt_schedule_packets+0x1ec>)
 8006bc0:	4413      	add	r3, r2
 8006bc2:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8006bc4:	797b      	ldrb	r3, [r7, #5]
 8006bc6:	4a6b      	ldr	r2, [pc, #428]	; (8006d74 <edpt_schedule_packets+0x1f0>)
 8006bc8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	895b      	ldrh	r3, [r3, #10]
 8006bd0:	81fa      	strh	r2, [r7, #14]
 8006bd2:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006bd4:	89fa      	ldrh	r2, [r7, #14]
 8006bd6:	89bb      	ldrh	r3, [r7, #12]
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	bf28      	it	cs
 8006bdc:	4613      	movcs	r3, r2
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8006be2:	797b      	ldrb	r3, [r7, #5]
 8006be4:	4a63      	ldr	r2, [pc, #396]	; (8006d74 <edpt_schedule_packets+0x1f0>)
 8006be6:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006bea:	797b      	ldrb	r3, [r7, #5]
 8006bec:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006bee:	1a8a      	subs	r2, r1, r2
 8006bf0:	b291      	uxth	r1, r2
 8006bf2:	4a60      	ldr	r2, [pc, #384]	; (8006d74 <edpt_schedule_packets+0x1f0>)
 8006bf4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if (dir == TUSB_DIR_IN) {
 8006bf8:	797b      	ldrb	r3, [r7, #5]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d156      	bne.n	8006cac <edpt_schedule_packets+0x128>
    dwc2_epin_t* epin = dwc2->epin;
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c04:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8006c06:	887b      	ldrh	r3, [r7, #2]
 8006c08:	04db      	lsls	r3, r3, #19
 8006c0a:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8006c0c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8006c0e:	79bb      	ldrb	r3, [r7, #6]
 8006c10:	015b      	lsls	r3, r3, #5
 8006c12:	6979      	ldr	r1, [r7, #20]
 8006c14:	440b      	add	r3, r1
 8006c16:	4302      	orrs	r2, r0
 8006c18:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8006c1a:	79bb      	ldrb	r3, [r7, #6]
 8006c1c:	015b      	lsls	r3, r3, #5
 8006c1e:	697a      	ldr	r2, [r7, #20]
 8006c20:	4413      	add	r3, r2
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	79bb      	ldrb	r3, [r7, #6]
 8006c26:	015b      	lsls	r3, r3, #5
 8006c28:	6979      	ldr	r1, [r7, #20]
 8006c2a:	440b      	add	r3, r1
 8006c2c:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006c30:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ((epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1) {
 8006c32:	79bb      	ldrb	r3, [r7, #6]
 8006c34:	015b      	lsls	r3, r3, #5
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	4413      	add	r3, r2
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006c44:	d123      	bne.n	8006c8e <edpt_schedule_packets+0x10a>
 8006c46:	79ba      	ldrb	r2, [r7, #6]
 8006c48:	797b      	ldrb	r3, [r7, #5]
 8006c4a:	4949      	ldr	r1, [pc, #292]	; (8006d70 <edpt_schedule_packets+0x1ec>)
 8006c4c:	0052      	lsls	r2, r2, #1
 8006c4e:	4413      	add	r3, r2
 8006c50:	011b      	lsls	r3, r3, #4
 8006c52:	440b      	add	r3, r1
 8006c54:	330c      	adds	r3, #12
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b01      	cmp	r3, #1
 8006c5a:	d118      	bne.n	8006c8e <edpt_schedule_packets+0x10a>
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8006c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c66:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8006c68:	79bb      	ldrb	r3, [r7, #6]
 8006c6a:	015b      	lsls	r3, r3, #5
 8006c6c:	697a      	ldr	r2, [r7, #20]
 8006c6e:	4413      	add	r3, r2
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d002      	beq.n	8006c7e <edpt_schedule_packets+0xfa>
 8006c78:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006c7c:	e001      	b.n	8006c82 <edpt_schedule_packets+0xfe>
 8006c7e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006c82:	79bb      	ldrb	r3, [r7, #6]
 8006c84:	015b      	lsls	r3, r3, #5
 8006c86:	6978      	ldr	r0, [r7, #20]
 8006c88:	4403      	add	r3, r0
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if (total_bytes != 0) {
 8006c8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d065      	beq.n	8006d60 <edpt_schedule_packets+0x1dc>
      dwc2->diepempmsk |= (1 << epnum);
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8006c9a:	79ba      	ldrb	r2, [r7, #6]
 8006c9c:	2101      	movs	r1, #1
 8006c9e:	fa01 f202 	lsl.w	r2, r1, r2
 8006ca2:	431a      	orrs	r2, r3
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8006caa:	e059      	b.n	8006d60 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8006cb4:	79bb      	ldrb	r3, [r7, #6]
 8006cb6:	015b      	lsls	r3, r3, #5
 8006cb8:	69fa      	ldr	r2, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	691a      	ldr	r2, [r3, #16]
 8006cbe:	79bb      	ldrb	r3, [r7, #6]
 8006cc0:	015b      	lsls	r3, r3, #5
 8006cc2:	69f9      	ldr	r1, [r7, #28]
 8006cc4:	440b      	add	r3, r1
 8006cc6:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8006cca:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8006ccc:	79bb      	ldrb	r3, [r7, #6]
 8006cce:	015b      	lsls	r3, r3, #5
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	6919      	ldr	r1, [r3, #16]
 8006cd6:	887b      	ldrh	r3, [r7, #2]
 8006cd8:	04db      	lsls	r3, r3, #19
 8006cda:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 8006cdc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	79bb      	ldrb	r3, [r7, #6]
 8006ce2:	015b      	lsls	r3, r3, #5
 8006ce4:	69f8      	ldr	r0, [r7, #28]
 8006ce6:	4403      	add	r3, r0
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8006cec:	79bb      	ldrb	r3, [r7, #6]
 8006cee:	015b      	lsls	r3, r3, #5
 8006cf0:	69fa      	ldr	r2, [r7, #28]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	79bb      	ldrb	r3, [r7, #6]
 8006cf8:	015b      	lsls	r3, r3, #5
 8006cfa:	69f9      	ldr	r1, [r7, #28]
 8006cfc:	440b      	add	r3, r1
 8006cfe:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006d02:	601a      	str	r2, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8006d04:	79bb      	ldrb	r3, [r7, #6]
 8006d06:	015b      	lsls	r3, r3, #5
 8006d08:	69fa      	ldr	r2, [r7, #28]
 8006d0a:	4413      	add	r3, r2
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006d12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d16:	d123      	bne.n	8006d60 <edpt_schedule_packets+0x1dc>
        XFER_CTL_BASE(epnum, dir)->interval == 1) {
 8006d18:	79ba      	ldrb	r2, [r7, #6]
 8006d1a:	797b      	ldrb	r3, [r7, #5]
 8006d1c:	4914      	ldr	r1, [pc, #80]	; (8006d70 <edpt_schedule_packets+0x1ec>)
 8006d1e:	0052      	lsls	r2, r2, #1
 8006d20:	4413      	add	r3, r2
 8006d22:	011b      	lsls	r3, r3, #4
 8006d24:	440b      	add	r3, r1
 8006d26:	330c      	adds	r3, #12
 8006d28:	781b      	ldrb	r3, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d118      	bne.n	8006d60 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8006d3a:	79bb      	ldrb	r3, [r7, #6]
 8006d3c:	015b      	lsls	r3, r3, #5
 8006d3e:	69fa      	ldr	r2, [r7, #28]
 8006d40:	4413      	add	r3, r2
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d002      	beq.n	8006d50 <edpt_schedule_packets+0x1cc>
 8006d4a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006d4e:	e001      	b.n	8006d54 <edpt_schedule_packets+0x1d0>
 8006d50:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006d54:	79bb      	ldrb	r3, [r7, #6]
 8006d56:	015b      	lsls	r3, r3, #5
 8006d58:	69f8      	ldr	r0, [r7, #28]
 8006d5a:	4403      	add	r3, r0
 8006d5c:	430a      	orrs	r2, r1
 8006d5e:	601a      	str	r2, [r3, #0]
}
 8006d60:	bf00      	nop
 8006d62:	3728      	adds	r7, #40	; 0x28
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bc90      	pop	{r4, r7}
 8006d68:	4770      	bx	lr
 8006d6a:	bf00      	nop
 8006d6c:	080087c0 	.word	0x080087c0
 8006d70:	200013bc 	.word	0x200013bc
 8006d74:	2000143c 	.word	0x2000143c

08006d78 <reset_core>:
  TU_LOG(DWC2_DEBUG, "0x%08lX\r\n", p[5]);
}

#endif

static void reset_core(dwc2_regs_t* dwc2) {
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	f043 0201 	orr.w	r2, r3, #1
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) {}
 8006d8c:	bf00      	nop
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0301 	and.w	r3, r3, #1
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d1f9      	bne.n	8006d8e <reset_core+0x16>

  // wait for AHB master IDLE
  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {}
 8006d9a:	bf00      	nop
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	691b      	ldr	r3, [r3, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	dafb      	bge.n	8006d9c <reset_core+0x24>

  // wait for device mode ?
}
 8006da4:	bf00      	nop
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t* dwc2) {
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 8006dba:	2300      	movs	r3, #0
#endif
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 8006ddc:	2100      	movs	r1, #0
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f7ff fd58 	bl	8006894 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f7ff ffc7 	bl	8006d78 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8006df2:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 8006dfa:	2100      	movs	r1, #0
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f7ff fd65 	bl	80068cc <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8006e08:	f043 0203 	orr.w	r2, r3, #3
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8006e12:	bf00      	nop
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b084      	sub	sp, #16
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	68db      	ldr	r3, [r3, #12]
 8006e26:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e2e:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) {
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006e36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	2b80      	cmp	r3, #128	; 0x80
 8006e3e:	d110      	bne.n	8006e62 <phy_hs_init+0x48>
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f043 0310 	orr.w	r3, r3, #16
 8006e46:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006e4e:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e56:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e00f      	b.n	8006e82 <phy_hs_init+0x68>
  } else {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f023 0318 	bic.w	r3, r3, #24
 8006e68:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <phy_hs_init+0x68>
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f043 0308 	orr.w	r3, r3, #8
 8006e80:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68fa      	ldr	r2, [r7, #12]
 8006e86:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006e8e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006e92:	b2db      	uxtb	r3, r3
 8006e94:	4619      	mov	r1, r3
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff fcfc 	bl	8006894 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f7ff ff6b 	bl	8006d78 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8006ea8:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006eb0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006eb4:	b2db      	uxtb	r3, r3
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d002      	beq.n	8006ec0 <phy_hs_init+0xa6>
 8006eba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006ebe:	e001      	b.n	8006ec4 <phy_hs_init+0xaa>
 8006ec0:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8006ec4:	68fa      	ldr	r2, [r7, #12]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006ed6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f7ff fcf4 	bl	80068cc <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8006eea:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006efa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	2b80      	cmp	r3, #128	; 0x80
 8006f02:	d103      	bne.n	8006f0c <phy_hs_init+0xf2>
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f0a:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8006f14:	bf00      	nop
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 8006f1c:	b480      	push	{r7}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f28:	0c1b      	lsrs	r3, r3, #16
 8006f2a:	041b      	lsls	r3, r3, #16
 8006f2c:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4a0e      	ldr	r2, [pc, #56]	; (8006f6c <check_dwc2+0x50>)
 8006f32:	4293      	cmp	r3, r2
 8006f34:	d012      	beq.n	8006f5c <check_dwc2+0x40>
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	4a0d      	ldr	r2, [pc, #52]	; (8006f70 <check_dwc2+0x54>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d00e      	beq.n	8006f5c <check_dwc2+0x40>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	4a0c      	ldr	r2, [pc, #48]	; (8006f74 <check_dwc2+0x58>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d00a      	beq.n	8006f5c <check_dwc2+0x40>
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <check_dwc2+0x5c>)
 8006f48:	60bb      	str	r3, [r7, #8]
 8006f4a:	68bb      	ldr	r3, [r7, #8]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	f003 0301 	and.w	r3, r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d000      	beq.n	8006f58 <check_dwc2+0x3c>
 8006f56:	be00      	bkpt	0x0000
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e000      	b.n	8006f5e <check_dwc2+0x42>
#endif

  return true;
 8006f5c:	2301      	movs	r3, #1
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	4f540000 	.word	0x4f540000
 8006f70:	55310000 	.word	0x55310000
 8006f74:	55320000 	.word	0x55320000
 8006f78:	e000edf0 	.word	0xe000edf0

08006f7c <dcd_init>:

void dcd_init(uint8_t rhport) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	4603      	mov	r3, r0
 8006f84:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006f86:	79fb      	ldrb	r3, [r7, #7]
 8006f88:	4a3e      	ldr	r2, [pc, #248]	; (8007084 <dcd_init+0x108>)
 8006f8a:	011b      	lsls	r3, r3, #4
 8006f8c:	4413      	add	r3, r2
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  if (!check_dwc2(dwc2)) return;
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f7ff ffc2 	bl	8006f1c <check_dwc2>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	f083 0301 	eor.w	r3, r3, #1
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d16b      	bne.n	800707c <dcd_init+0x100>
  dcd_disconnect(rhport);
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 f930 	bl	800720c <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if (phy_hs_supported(dwc2)) {
 8006fac:	68f8      	ldr	r0, [r7, #12]
 8006fae:	f7ff ff00 	bl	8006db2 <phy_hs_supported>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <dcd_init+0x44>
    phy_hs_init(dwc2); // Highspeed
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f7ff ff2e 	bl	8006e1a <phy_hs_init>
 8006fbe:	e002      	b.n	8006fc6 <dcd_init+0x4a>
  } else {
    phy_fs_init(dwc2); // core does not support highspeed or hs phy is not present
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f7ff ff01 	bl	8006dc8 <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8006fcc:	f023 020f 	bic.w	r2, r3, #15
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another.
   */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f043 0207 	orr.w	r2, r3, #7
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006fea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 8006ffa:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8007008:	f043 0204 	orr.w	r2, r3, #4
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // flush all TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (0x10u << GRSTCTL_TXFNUM_Pos);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8007018:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800701a:	bf00      	nop
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d1f9      	bne.n	800701c <dcd_init+0xa0>

  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2210      	movs	r2, #16
 800702c:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800702e:	bf00      	nop
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f003 0310 	and.w	r3, r3, #16
 8007038:	2b00      	cmp	r3, #0
 800703a:	d1f9      	bne.n	8007030 <dcd_init+0xb4>

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	695b      	ldr	r3, [r3, #20]
 8007040:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	695a      	ldr	r2, [r3, #20]
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	431a      	orrs	r2, r3
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	431a      	orrs	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT | GINTMSK_MMISM | GINTMSK_RXFLVLM |
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4a09      	ldr	r2, [pc, #36]	; (8007088 <dcd_init+0x10c>)
 8007064:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	f043 0201 	orr.w	r2, r3, #1
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 8007072:	79fb      	ldrb	r3, [r7, #7]
 8007074:	4618      	mov	r0, r3
 8007076:	f000 f8ad 	bl	80071d4 <dcd_connect>
 800707a:	e000      	b.n	800707e <dcd_init+0x102>
  if (!check_dwc2(dwc2)) return;
 800707c:	bf00      	nop
}
 800707e:	3710      	adds	r7, #16
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	080087c0 	.word	0x080087c0
 8007088:	80003816 	.word	0x80003816

0800708c <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	71fb      	strb	r3, [r7, #7]
 8007096:	79fb      	ldrb	r3, [r7, #7]
 8007098:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	4a06      	ldr	r2, [pc, #24]	; (80070b8 <dcd_int_enable+0x2c>)
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	4413      	add	r3, r2
 80070a2:	3304      	adds	r3, #4
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	b25b      	sxtb	r3, r3
 80070a8:	4618      	mov	r0, r3
 80070aa:	f7ff fbb1 	bl	8006810 <__NVIC_EnableIRQ>
}
 80070ae:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 80070b0:	bf00      	nop
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	080087c0 	.word	0x080087c0

080070bc <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	71fb      	strb	r3, [r7, #7]
 80070c6:	79fb      	ldrb	r3, [r7, #7]
 80070c8:	73fb      	strb	r3, [r7, #15]
  NVIC_DisableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	4a06      	ldr	r2, [pc, #24]	; (80070e8 <dcd_int_disable+0x2c>)
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	4413      	add	r3, r2
 80070d2:	3304      	adds	r3, #4
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	b25b      	sxtb	r3, r3
 80070d8:	4618      	mov	r0, r3
 80070da:	f7ff fbb7 	bl	800684c <__NVIC_DisableIRQ>
}
 80070de:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 80070e0:	bf00      	nop
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	080087c0 	.word	0x080087c0

080070ec <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b084      	sub	sp, #16
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	460a      	mov	r2, r1
 80070f6:	71fb      	strb	r3, [r7, #7]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80070fc:	79fb      	ldrb	r3, [r7, #7]
 80070fe:	4a14      	ldr	r2, [pc, #80]	; (8007150 <dcd_set_address+0x64>)
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	4413      	add	r3, r2
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800710e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007112:	79ba      	ldrb	r2, [r7, #6]
 8007114:	0112      	lsls	r2, r2, #4
 8007116:	431a      	orrs	r2, r3
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 800711e:	2300      	movs	r3, #0
 8007120:	72fb      	strb	r3, [r7, #11]
 8007122:	2301      	movs	r3, #1
 8007124:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8007126:	7abb      	ldrb	r3, [r7, #10]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d002      	beq.n	8007132 <dcd_set_address+0x46>
 800712c:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8007130:	e000      	b.n	8007134 <dcd_set_address+0x48>
 8007132:	2300      	movs	r3, #0
 8007134:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8007138:	4313      	orrs	r3, r2
 800713a:	b25b      	sxtb	r3, r3
 800713c:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 800713e:	79f8      	ldrb	r0, [r7, #7]
 8007140:	2300      	movs	r3, #0
 8007142:	2200      	movs	r2, #0
 8007144:	f000 f9fc 	bl	8007540 <dcd_edpt_xfer>
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	080087c0 	.word	0x080087c0

08007154 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	4603      	mov	r3, r0
 800715c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800715e:	79fb      	ldrb	r3, [r7, #7]
 8007160:	4a19      	ldr	r2, [pc, #100]	; (80071c8 <dcd_remote_wakeup+0x74>)
 8007162:	011b      	lsls	r3, r3, #4
 8007164:	4413      	add	r3, r2
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	60fb      	str	r3, [r7, #12]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007170:	f043 0201 	orr.w	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	2208      	movs	r2, #8
 800717e:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	699b      	ldr	r3, [r3, #24]
 8007184:	f043 0208 	orr.w	r2, r3, #8
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	619a      	str	r2, [r3, #24]
  uint32_t count = SystemCoreClock / 1000;
 800718c:	4b0f      	ldr	r3, [pc, #60]	; (80071cc <dcd_remote_wakeup+0x78>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a0f      	ldr	r2, [pc, #60]	; (80071d0 <dcd_remote_wakeup+0x7c>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	60bb      	str	r3, [r7, #8]
  while (count--) __NOP();
 800719a:	e000      	b.n	800719e <dcd_remote_wakeup+0x4a>
 800719c:	bf00      	nop
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	1e5a      	subs	r2, r3, #1
 80071a2:	60ba      	str	r2, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d1f9      	bne.n	800719c <dcd_remote_wakeup+0x48>
}
 80071a8:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80071b0:	f023 0201 	bic.w	r2, r3, #1
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	080087c0 	.word	0x080087c0
 80071cc:	20000000 	.word	0x20000000
 80071d0:	10624dd3 	.word	0x10624dd3

080071d4 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 80071d4:	b480      	push	{r7}
 80071d6:	b085      	sub	sp, #20
 80071d8:	af00      	add	r7, sp, #0
 80071da:	4603      	mov	r3, r0
 80071dc:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	4a09      	ldr	r2, [pc, #36]	; (8007208 <dcd_connect+0x34>)
 80071e2:	011b      	lsls	r3, r3, #4
 80071e4:	4413      	add	r3, r2
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80071f0:	f023 0202 	bic.w	r2, r3, #2
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	080087c0 	.word	0x080087c0

0800720c <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800720c:	b480      	push	{r7}
 800720e:	b085      	sub	sp, #20
 8007210:	af00      	add	r7, sp, #0
 8007212:	4603      	mov	r3, r0
 8007214:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	4a09      	ldr	r2, [pc, #36]	; (8007240 <dcd_disconnect+0x34>)
 800721a:	011b      	lsls	r3, r3, #4
 800721c:	4413      	add	r3, r2
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007228:	f043 0202 	orr.w	r2, r3, #2
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8007232:	bf00      	nop
 8007234:	3714      	adds	r7, #20
 8007236:	46bd      	mov	sp, r7
 8007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723c:	4770      	bx	lr
 800723e:	bf00      	nop
 8007240:	080087c0 	.word	0x080087c0

08007244 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8007244:	b580      	push	{r7, lr}
 8007246:	b08e      	sub	sp, #56	; 0x38
 8007248:	af00      	add	r7, sp, #0
 800724a:	4603      	mov	r3, r0
 800724c:	6039      	str	r1, [r7, #0]
 800724e:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007250:	79fb      	ldrb	r3, [r7, #7]
 8007252:	4a91      	ldr	r2, [pc, #580]	; (8007498 <dcd_edpt_open+0x254>)
 8007254:	011b      	lsls	r3, r3, #4
 8007256:	4413      	add	r3, r2
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800725c:	79fb      	ldrb	r3, [r7, #7]
 800725e:	4a8e      	ldr	r2, [pc, #568]	; (8007498 <dcd_edpt_open+0x254>)
 8007260:	011b      	lsls	r3, r3, #4
 8007262:	4413      	add	r3, r2
 8007264:	3308      	adds	r3, #8
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	789b      	ldrb	r3, [r3, #2]
 8007270:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007272:	7dbb      	ldrb	r3, [r7, #22]
 8007274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007278:	b2db      	uxtb	r3, r3
 800727a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir = tu_edpt_dir(desc_edpt->bEndpointAddress);
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	789b      	ldrb	r3, [r3, #2]
 8007282:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007284:	7dfb      	ldrb	r3, [r7, #23]
 8007286:	09db      	lsrs	r3, r3, #7
 8007288:	b2db      	uxtb	r3, r3
 800728a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 800728e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007292:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007296:	429a      	cmp	r2, r3
 8007298:	d30a      	bcc.n	80072b0 <dcd_edpt_open+0x6c>
 800729a:	4b80      	ldr	r3, [pc, #512]	; (800749c <dcd_edpt_open+0x258>)
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d000      	beq.n	80072ac <dcd_edpt_open+0x68>
 80072aa:	be00      	bkpt	0x0000
 80072ac:	2300      	movs	r3, #0
 80072ae:	e0ef      	b.n	8007490 <dcd_edpt_open+0x24c>

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 80072b0:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 80072b4:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80072b8:	0052      	lsls	r2, r2, #1
 80072ba:	4413      	add	r3, r2
 80072bc:	011b      	lsls	r3, r3, #4
 80072be:	4a78      	ldr	r2, [pc, #480]	; (80074a0 <dcd_edpt_open+0x25c>)
 80072c0:	4413      	add	r3, r2
 80072c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	889b      	ldrh	r3, [r3, #4]
 80072cc:	b29b      	uxth	r3, r3
 80072ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072d2:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 80072d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d6:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	799a      	ldrb	r2, [r3, #6]
 80072dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072de:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 80072e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072e2:	895b      	ldrh	r3, [r3, #10]
 80072e4:	613b      	str	r3, [r7, #16]
 80072e6:	2304      	movs	r3, #4
 80072e8:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	1e5a      	subs	r2, r3, #1
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	857b      	strh	r3, [r7, #42]	; 0x2a

  if (dir == TUSB_DIR_OUT) {
 80072fa:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d15c      	bne.n	80073bc <dcd_edpt_open+0x178>
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4 * fifo_size, ep_count);
 8007302:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	b29b      	uxth	r3, r3
 8007308:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f7ff fb52 	bl	80069b8 <calc_grxfsiz>
 8007314:	4603      	mov	r3, r0
 8007316:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz) {
 8007318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800731a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800731c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800731e:	429a      	cmp	r2, r3
 8007320:	d217      	bcs.n	8007352 <dcd_edpt_open+0x10e>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size / 4);
 8007322:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007324:	4a5f      	ldr	r2, [pc, #380]	; (80074a4 <dcd_edpt_open+0x260>)
 8007326:	8812      	ldrh	r2, [r2, #0]
 8007328:	4413      	add	r3, r2
 800732a:	461a      	mov	r2, r3
 800732c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007330:	089b      	lsrs	r3, r3, #2
 8007332:	429a      	cmp	r2, r3
 8007334:	d90a      	bls.n	800734c <dcd_edpt_open+0x108>
 8007336:	4b59      	ldr	r3, [pc, #356]	; (800749c <dcd_edpt_open+0x258>)
 8007338:	61fb      	str	r3, [r7, #28]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d000      	beq.n	8007348 <dcd_edpt_open+0x104>
 8007346:	be00      	bkpt	0x0000
 8007348:	2300      	movs	r3, #0
 800734a:	e0a1      	b.n	8007490 <dcd_edpt_open+0x24c>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 800734c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 8007352:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007358:	3358      	adds	r3, #88	; 0x58
 800735a:	015b      	lsls	r3, r3, #5
 800735c:	4413      	add	r3, r2
 800735e:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	78db      	ldrb	r3, [r3, #3]
 8007364:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007368:	b2db      	uxtb	r3, r3
 800736a:	049b      	lsls	r3, r3, #18
 800736c:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	78db      	ldrb	r3, [r3, #3]
 8007372:	f003 0303 	and.w	r3, r3, #3
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	d002      	beq.n	8007382 <dcd_edpt_open+0x13e>
 800737c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007380:	e000      	b.n	8007384 <dcd_edpt_open+0x140>
 8007382:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8007384:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 8007386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007388:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 800738a:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 800738c:	431a      	orrs	r2, r3
 800738e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007392:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007396:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007398:	3358      	adds	r3, #88	; 0x58
 800739a:	015b      	lsls	r3, r3, #5
 800739c:	440b      	add	r3, r1
 800739e:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 80073a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073a2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 80073a6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80073aa:	3310      	adds	r3, #16
 80073ac:	2101      	movs	r1, #1
 80073ae:	fa01 f303 	lsl.w	r3, r1, r3
 80073b2:	431a      	orrs	r2, r3
 80073b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073b6:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 80073ba:	e068      	b.n	800748e <dcd_edpt_open+0x24a>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size / 4);
 80073bc:	4b39      	ldr	r3, [pc, #228]	; (80074a4 <dcd_edpt_open+0x260>)
 80073be:	881b      	ldrh	r3, [r3, #0]
 80073c0:	461a      	mov	r2, r3
 80073c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80073c4:	4413      	add	r3, r2
 80073c6:	461a      	mov	r2, r3
 80073c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073cc:	441a      	add	r2, r3
 80073ce:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80073d2:	089b      	lsrs	r3, r3, #2
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d90a      	bls.n	80073ee <dcd_edpt_open+0x1aa>
 80073d8:	4b30      	ldr	r3, [pc, #192]	; (800749c <dcd_edpt_open+0x258>)
 80073da:	627b      	str	r3, [r7, #36]	; 0x24
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d000      	beq.n	80073ea <dcd_edpt_open+0x1a6>
 80073e8:	be00      	bkpt	0x0000
 80073ea:	2300      	movs	r3, #0
 80073ec:	e050      	b.n	8007490 <dcd_edpt_open+0x24c>

    _allocated_fifo_words_tx += fifo_size;
 80073ee:	4b2d      	ldr	r3, [pc, #180]	; (80074a4 <dcd_edpt_open+0x260>)
 80073f0:	881a      	ldrh	r2, [r3, #0]
 80073f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80073f4:	4413      	add	r3, r2
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	4b2a      	ldr	r3, [pc, #168]	; (80074a4 <dcd_edpt_open+0x260>)
 80073fa:	801a      	strh	r2, [r3, #0]
    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size * 4,
           _dwc2_controller[rhport].ep_fifo_size - _allocated_fifo_words_tx * 4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 80073fc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80073fe:	041b      	lsls	r3, r3, #16
 8007400:	4619      	mov	r1, r3
                               (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8007402:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007406:	089b      	lsrs	r3, r3, #2
 8007408:	4a26      	ldr	r2, [pc, #152]	; (80074a4 <dcd_edpt_open+0x260>)
 800740a:	8812      	ldrh	r2, [r2, #0]
 800740c:	1a9a      	subs	r2, r3, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 800740e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007412:	3b01      	subs	r3, #1
 8007414:	430a      	orrs	r2, r1
 8007416:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007418:	3340      	adds	r3, #64	; 0x40
 800741a:	009b      	lsls	r3, r3, #2
 800741c:	440b      	add	r3, r1
 800741e:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8007420:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007424:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007426:	3348      	adds	r3, #72	; 0x48
 8007428:	015b      	lsls	r3, r3, #5
 800742a:	4413      	add	r3, r2
 800742c:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 800742e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007432:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8007434:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	78db      	ldrb	r3, [r3, #3]
 800743c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007440:	b2db      	uxtb	r3, r3
 8007442:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 8007444:	4313      	orrs	r3, r2
 8007446:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	78db      	ldrb	r3, [r3, #3]
 800744c:	f003 0303 	and.w	r3, r3, #3
 8007450:	b2db      	uxtb	r3, r3
 8007452:	2b01      	cmp	r3, #1
 8007454:	d002      	beq.n	800745c <dcd_edpt_open+0x218>
 8007456:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800745a:	e000      	b.n	800745e <dcd_edpt_open+0x21a>
 800745c:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 800745e:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 8007460:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007462:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 8007464:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 8007466:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800746a:	430a      	orrs	r2, r1
 800746c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800746e:	3348      	adds	r3, #72	; 0x48
 8007470:	015b      	lsls	r3, r3, #5
 8007472:	440b      	add	r3, r1
 8007474:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 8007476:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007478:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800747c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007480:	2101      	movs	r1, #1
 8007482:	fa01 f202 	lsl.w	r2, r1, r2
 8007486:	431a      	orrs	r2, r3
 8007488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 800748e:	2301      	movs	r3, #1
}
 8007490:	4618      	mov	r0, r3
 8007492:	3738      	adds	r7, #56	; 0x38
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	080087c0 	.word	0x080087c0
 800749c:	e000edf0 	.word	0xe000edf0
 80074a0:	200013bc 	.word	0x200013bc
 80074a4:	20001440 	.word	0x20001440

080074a8 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	4603      	mov	r3, r0
 80074b0:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80074b2:	79fb      	ldrb	r3, [r7, #7]
 80074b4:	4a1f      	ldr	r2, [pc, #124]	; (8007534 <dcd_edpt_close_all+0x8c>)
 80074b6:	011b      	lsls	r3, r3, #4
 80074b8:	4413      	add	r3, r2
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80074be:	79fb      	ldrb	r3, [r7, #7]
 80074c0:	4a1c      	ldr	r2, [pc, #112]	; (8007534 <dcd_edpt_close_all+0x8c>)
 80074c2:	011b      	lsls	r3, r3, #4
 80074c4:	4413      	add	r3, r2
 80074c6:	3308      	adds	r3, #8
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80074d2:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 80074d6:	2301      	movs	r3, #1
 80074d8:	75fb      	strb	r3, [r7, #23]
 80074da:	e01e      	b.n	800751a <dcd_edpt_close_all+0x72>
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 80074dc:	7dfb      	ldrb	r3, [r7, #23]
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	3358      	adds	r3, #88	; 0x58
 80074e2:	015b      	lsls	r3, r3, #5
 80074e4:	4413      	add	r3, r2
 80074e6:	2200      	movs	r2, #0
 80074e8:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 80074ea:	7dfb      	ldrb	r3, [r7, #23]
 80074ec:	4a12      	ldr	r2, [pc, #72]	; (8007538 <dcd_edpt_close_all+0x90>)
 80074ee:	015b      	lsls	r3, r3, #5
 80074f0:	4413      	add	r3, r2
 80074f2:	330a      	adds	r3, #10
 80074f4:	2200      	movs	r2, #0
 80074f6:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 80074f8:	7dfb      	ldrb	r3, [r7, #23]
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	3348      	adds	r3, #72	; 0x48
 80074fe:	015b      	lsls	r3, r3, #5
 8007500:	4413      	add	r3, r2
 8007502:	2200      	movs	r2, #0
 8007504:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8007506:	7dfb      	ldrb	r3, [r7, #23]
 8007508:	4a0b      	ldr	r2, [pc, #44]	; (8007538 <dcd_edpt_close_all+0x90>)
 800750a:	015b      	lsls	r3, r3, #5
 800750c:	4413      	add	r3, r2
 800750e:	331a      	adds	r3, #26
 8007510:	2200      	movs	r2, #0
 8007512:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 1; n < ep_count; n++) {
 8007514:	7dfb      	ldrb	r3, [r7, #23]
 8007516:	3301      	adds	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
 800751a:	7dfa      	ldrb	r2, [r7, #23]
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	429a      	cmp	r2, r3
 8007520:	d3dc      	bcc.n	80074dc <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 8007522:	4b06      	ldr	r3, [pc, #24]	; (800753c <dcd_edpt_close_all+0x94>)
 8007524:	2210      	movs	r2, #16
 8007526:	801a      	strh	r2, [r3, #0]
}
 8007528:	bf00      	nop
 800752a:	371c      	adds	r7, #28
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	080087c0 	.word	0x080087c0
 8007538:	200013bc 	.word	0x200013bc
 800753c:	20001440 	.word	0x20001440

08007540 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8007540:	b590      	push	{r4, r7, lr}
 8007542:	b089      	sub	sp, #36	; 0x24
 8007544:	af02      	add	r7, sp, #8
 8007546:	603a      	str	r2, [r7, #0]
 8007548:	461a      	mov	r2, r3
 800754a:	4603      	mov	r3, r0
 800754c:	71fb      	strb	r3, [r7, #7]
 800754e:	460b      	mov	r3, r1
 8007550:	71bb      	strb	r3, [r7, #6]
 8007552:	4613      	mov	r3, r2
 8007554:	80bb      	strh	r3, [r7, #4]
 8007556:	79bb      	ldrb	r3, [r7, #6]
 8007558:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800755a:	7b3b      	ldrb	r3, [r7, #12]
 800755c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007560:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007562:	757b      	strb	r3, [r7, #21]
 8007564:	79bb      	ldrb	r3, [r7, #6]
 8007566:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007568:	7b7b      	ldrb	r3, [r7, #13]
 800756a:	09db      	lsrs	r3, r3, #7
 800756c:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800756e:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007570:	7d7a      	ldrb	r2, [r7, #21]
 8007572:	7d3b      	ldrb	r3, [r7, #20]
 8007574:	0052      	lsls	r2, r2, #1
 8007576:	4413      	add	r3, r2
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	4a23      	ldr	r2, [pc, #140]	; (8007608 <dcd_edpt_xfer+0xc8>)
 800757c:	4413      	add	r3, r2
 800757e:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2200      	movs	r2, #0
 800758a:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	88ba      	ldrh	r2, [r7, #4]
 8007590:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 8007592:	7d7b      	ldrb	r3, [r7, #21]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d110      	bne.n	80075ba <dcd_edpt_xfer+0x7a>
    ep0_pending[dir] = total_bytes;
 8007598:	7d3b      	ldrb	r3, [r7, #20]
 800759a:	491c      	ldr	r1, [pc, #112]	; (800760c <dcd_edpt_xfer+0xcc>)
 800759c:	88ba      	ldrh	r2, [r7, #4]
 800759e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 80075a2:	7d3b      	ldrb	r3, [r7, #20]
 80075a4:	4a19      	ldr	r2, [pc, #100]	; (800760c <dcd_edpt_xfer+0xcc>)
 80075a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80075aa:	7d3a      	ldrb	r2, [r7, #20]
 80075ac:	7d79      	ldrb	r1, [r7, #21]
 80075ae:	79f8      	ldrb	r0, [r7, #7]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	2301      	movs	r3, #1
 80075b4:	f7ff fae6 	bl	8006b84 <edpt_schedule_packets>
 80075b8:	e020      	b.n	80075fc <dcd_edpt_xfer+0xbc>
  } else {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	895b      	ldrh	r3, [r3, #10]
 80075be:	88ba      	ldrh	r2, [r7, #4]
 80075c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80075c4:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	895a      	ldrh	r2, [r3, #10]
 80075ca:	88bb      	ldrh	r3, [r7, #4]
 80075cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80075d0:	fb01 f202 	mul.w	r2, r1, r2
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ((short_packet_size > 0) || (total_bytes == 0)) num_packets++;
 80075d8:	89fb      	ldrh	r3, [r7, #14]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <dcd_edpt_xfer+0xa4>
 80075de:	88bb      	ldrh	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d102      	bne.n	80075ea <dcd_edpt_xfer+0xaa>
 80075e4:	8afb      	ldrh	r3, [r7, #22]
 80075e6:	3301      	adds	r3, #1
 80075e8:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 80075ea:	8afc      	ldrh	r4, [r7, #22]
 80075ec:	7d3a      	ldrb	r2, [r7, #20]
 80075ee:	7d79      	ldrb	r1, [r7, #21]
 80075f0:	79f8      	ldrb	r0, [r7, #7]
 80075f2:	88bb      	ldrh	r3, [r7, #4]
 80075f4:	9300      	str	r3, [sp, #0]
 80075f6:	4623      	mov	r3, r4
 80075f8:	f7ff fac4 	bl	8006b84 <edpt_schedule_packets>
  }

  return true;
 80075fc:	2301      	movs	r3, #1
}
 80075fe:	4618      	mov	r0, r3
 8007600:	371c      	adds	r7, #28
 8007602:	46bd      	mov	sp, r7
 8007604:	bd90      	pop	{r4, r7, pc}
 8007606:	bf00      	nop
 8007608:	200013bc 	.word	0x200013bc
 800760c:	2000143c 	.word	0x2000143c

08007610 <dcd_edpt_disable>:
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}

static void dcd_edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8007610:	b480      	push	{r7}
 8007612:	b089      	sub	sp, #36	; 0x24
 8007614:	af00      	add	r7, sp, #0
 8007616:	4603      	mov	r3, r0
 8007618:	71fb      	strb	r3, [r7, #7]
 800761a:	460b      	mov	r3, r1
 800761c:	71bb      	strb	r3, [r7, #6]
 800761e:	4613      	mov	r3, r2
 8007620:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007622:	79fb      	ldrb	r3, [r7, #7]
 8007624:	4a6e      	ldr	r2, [pc, #440]	; (80077e0 <dcd_edpt_disable+0x1d0>)
 8007626:	011b      	lsls	r3, r3, #4
 8007628:	4413      	add	r3, r2
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	61fb      	str	r3, [r7, #28]
 800762e:	79bb      	ldrb	r3, [r7, #6]
 8007630:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007632:	7bbb      	ldrb	r3, [r7, #14]
 8007634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007638:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800763a:	76fb      	strb	r3, [r7, #27]
 800763c:	79bb      	ldrb	r3, [r7, #6]
 800763e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007640:	7bfb      	ldrb	r3, [r7, #15]
 8007642:	09db      	lsrs	r3, r3, #7
 8007644:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007646:	76bb      	strb	r3, [r7, #26]

  if (dir == TUSB_DIR_IN) {
 8007648:	7ebb      	ldrb	r3, [r7, #26]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d167      	bne.n	800771e <dcd_edpt_disable+0x10e>
    dwc2_epin_t* epin = dwc2->epin;
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007654:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA)) {
 8007656:	7efb      	ldrb	r3, [r7, #27]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d006      	beq.n	800766a <dcd_edpt_disable+0x5a>
 800765c:	7efb      	ldrb	r3, [r7, #27]
 800765e:	015b      	lsls	r3, r3, #5
 8007660:	693a      	ldr	r2, [r7, #16]
 8007662:	4413      	add	r3, r2
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	db13      	blt.n	8007692 <dcd_edpt_disable+0x82>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 800766a:	7efb      	ldrb	r3, [r7, #27]
 800766c:	015b      	lsls	r3, r3, #5
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	4413      	add	r3, r2
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	797b      	ldrb	r3, [r7, #5]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d002      	beq.n	8007680 <dcd_edpt_disable+0x70>
 800767a:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 800767e:	e001      	b.n	8007684 <dcd_edpt_disable+0x74>
 8007680:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007684:	7efb      	ldrb	r3, [r7, #27]
 8007686:	015b      	lsls	r3, r3, #5
 8007688:	6938      	ldr	r0, [r7, #16]
 800768a:	4403      	add	r3, r0
 800768c:	430a      	orrs	r2, r1
 800768e:	601a      	str	r2, [r3, #0]
 8007690:	e037      	b.n	8007702 <dcd_edpt_disable+0xf2>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 8007692:	7efb      	ldrb	r3, [r7, #27]
 8007694:	015b      	lsls	r3, r3, #5
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	7efb      	ldrb	r3, [r7, #27]
 800769e:	015b      	lsls	r3, r3, #5
 80076a0:	6939      	ldr	r1, [r7, #16]
 80076a2:	440b      	add	r3, r1
 80076a4:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80076a8:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_INEPNE) == 0) {}
 80076aa:	bf00      	nop
 80076ac:	7efb      	ldrb	r3, [r7, #27]
 80076ae:	015b      	lsls	r3, r3, #5
 80076b0:	693a      	ldr	r2, [r7, #16]
 80076b2:	4413      	add	r3, r2
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d0f6      	beq.n	80076ac <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80076be:	7efb      	ldrb	r3, [r7, #27]
 80076c0:	015b      	lsls	r3, r3, #5
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	4413      	add	r3, r2
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	797b      	ldrb	r3, [r7, #5]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <dcd_edpt_disable+0xc2>
 80076ce:	4945      	ldr	r1, [pc, #276]	; (80077e4 <dcd_edpt_disable+0x1d4>)
 80076d0:	e001      	b.n	80076d6 <dcd_edpt_disable+0xc6>
 80076d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80076d6:	7efb      	ldrb	r3, [r7, #27]
 80076d8:	015b      	lsls	r3, r3, #5
 80076da:	6938      	ldr	r0, [r7, #16]
 80076dc:	4403      	add	r3, r0
 80076de:	430a      	orrs	r2, r1
 80076e0:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0) {}
 80076e2:	bf00      	nop
 80076e4:	7efb      	ldrb	r3, [r7, #27]
 80076e6:	015b      	lsls	r3, r3, #5
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	4413      	add	r3, r2
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f003 0302 	and.w	r3, r3, #2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d0f6      	beq.n	80076e4 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 80076f6:	7efb      	ldrb	r3, [r7, #27]
 80076f8:	015b      	lsls	r3, r3, #5
 80076fa:	693a      	ldr	r2, [r7, #16]
 80076fc:	4413      	add	r3, r2
 80076fe:	2202      	movs	r2, #2
 8007700:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8007702:	7efb      	ldrb	r3, [r7, #27]
 8007704:	019b      	lsls	r3, r3, #6
 8007706:	f043 0220 	orr.w	r2, r3, #32
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	611a      	str	r2, [r3, #16]
    while ((dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0) {}
 800770e:	bf00      	nop
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	691b      	ldr	r3, [r3, #16]
 8007714:	f003 0320 	and.w	r3, r3, #32
 8007718:	2b00      	cmp	r3, #0
 800771a:	d1f9      	bne.n	8007710 <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 800771c:	e059      	b.n	80077d2 <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 800771e:	69fb      	ldr	r3, [r7, #28]
 8007720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007724:	617b      	str	r3, [r7, #20]
    if ((epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA)) {
 8007726:	7efb      	ldrb	r3, [r7, #27]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d006      	beq.n	800773a <dcd_edpt_disable+0x12a>
 800772c:	7efb      	ldrb	r3, [r7, #27]
 800772e:	015b      	lsls	r3, r3, #5
 8007730:	697a      	ldr	r2, [r7, #20]
 8007732:	4413      	add	r3, r2
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	db12      	blt.n	8007760 <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 800773a:	7efb      	ldrb	r3, [r7, #27]
 800773c:	015b      	lsls	r3, r3, #5
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	4413      	add	r3, r2
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	797b      	ldrb	r3, [r7, #5]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d002      	beq.n	8007750 <dcd_edpt_disable+0x140>
 800774a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800774e:	e000      	b.n	8007752 <dcd_edpt_disable+0x142>
 8007750:	2100      	movs	r1, #0
 8007752:	7efb      	ldrb	r3, [r7, #27]
 8007754:	015b      	lsls	r3, r3, #5
 8007756:	6978      	ldr	r0, [r7, #20]
 8007758:	4403      	add	r3, r0
 800775a:	430a      	orrs	r2, r1
 800775c:	601a      	str	r2, [r3, #0]
}
 800775e:	e038      	b.n	80077d2 <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 8007760:	69fb      	ldr	r3, [r7, #28]
 8007762:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007766:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8007770:	bf00      	nop
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	695b      	ldr	r3, [r3, #20]
 8007776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800777a:	2b00      	cmp	r3, #0
 800777c:	d0f9      	beq.n	8007772 <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800777e:	7efb      	ldrb	r3, [r7, #27]
 8007780:	015b      	lsls	r3, r3, #5
 8007782:	697a      	ldr	r2, [r7, #20]
 8007784:	4413      	add	r3, r2
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	797b      	ldrb	r3, [r7, #5]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d001      	beq.n	8007792 <dcd_edpt_disable+0x182>
 800778e:	4915      	ldr	r1, [pc, #84]	; (80077e4 <dcd_edpt_disable+0x1d4>)
 8007790:	e001      	b.n	8007796 <dcd_edpt_disable+0x186>
 8007792:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007796:	7efb      	ldrb	r3, [r7, #27]
 8007798:	015b      	lsls	r3, r3, #5
 800779a:	6978      	ldr	r0, [r7, #20]
 800779c:	4403      	add	r3, r0
 800779e:	430a      	orrs	r2, r1
 80077a0:	601a      	str	r2, [r3, #0]
      while ((epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0) {}
 80077a2:	bf00      	nop
 80077a4:	7efb      	ldrb	r3, [r7, #27]
 80077a6:	015b      	lsls	r3, r3, #5
 80077a8:	697a      	ldr	r2, [r7, #20]
 80077aa:	4413      	add	r3, r2
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	f003 0302 	and.w	r3, r3, #2
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d0f6      	beq.n	80077a4 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 80077b6:	7efb      	ldrb	r3, [r7, #27]
 80077b8:	015b      	lsls	r3, r3, #5
 80077ba:	697a      	ldr	r2, [r7, #20]
 80077bc:	4413      	add	r3, r2
 80077be:	2202      	movs	r2, #2
 80077c0:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80077c8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 80077d2:	bf00      	nop
 80077d4:	3724      	adds	r7, #36	; 0x24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	080087c0 	.word	0x080087c0
 80077e4:	40200000 	.word	0x40200000

080077e8 <dcd_edpt_stall>:
  } else {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b082      	sub	sp, #8
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	4603      	mov	r3, r0
 80077f0:	460a      	mov	r2, r1
 80077f2:	71fb      	strb	r3, [r7, #7]
 80077f4:	4613      	mov	r3, r2
 80077f6:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 80077f8:	79b9      	ldrb	r1, [r7, #6]
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	2201      	movs	r2, #1
 80077fe:	4618      	mov	r0, r3
 8007800:	f7ff ff06 	bl	8007610 <dcd_edpt_disable>
}
 8007804:	bf00      	nop
 8007806:	3708      	adds	r7, #8
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800780c:	b480      	push	{r7}
 800780e:	b085      	sub	sp, #20
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	460a      	mov	r2, r1
 8007816:	71fb      	strb	r3, [r7, #7]
 8007818:	4613      	mov	r3, r2
 800781a:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800781c:	79fb      	ldrb	r3, [r7, #7]
 800781e:	4a2a      	ldr	r2, [pc, #168]	; (80078c8 <dcd_edpt_clear_stall+0xbc>)
 8007820:	011b      	lsls	r3, r3, #4
 8007822:	4413      	add	r3, r2
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	60fb      	str	r3, [r7, #12]
 8007828:	79bb      	ldrb	r3, [r7, #6]
 800782a:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800782c:	7a3b      	ldrb	r3, [r7, #8]
 800782e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007832:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007834:	72fb      	strb	r3, [r7, #11]
 8007836:	79bb      	ldrb	r3, [r7, #6]
 8007838:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800783a:	7a7b      	ldrb	r3, [r7, #9]
 800783c:	09db      	lsrs	r3, r3, #7
 800783e:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007840:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if (dir == TUSB_DIR_IN) {
 8007842:	7abb      	ldrb	r3, [r7, #10]
 8007844:	2b01      	cmp	r3, #1
 8007846:	d11c      	bne.n	8007882 <dcd_edpt_clear_stall+0x76>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 8007848:	7afb      	ldrb	r3, [r7, #11]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	3348      	adds	r3, #72	; 0x48
 800784e:	015b      	lsls	r3, r3, #5
 8007850:	4413      	add	r3, r2
 8007852:	681a      	ldr	r2, [r3, #0]
 8007854:	7afb      	ldrb	r3, [r7, #11]
 8007856:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800785a:	68f9      	ldr	r1, [r7, #12]
 800785c:	3348      	adds	r3, #72	; 0x48
 800785e:	015b      	lsls	r3, r3, #5
 8007860:	440b      	add	r3, r1
 8007862:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 8007864:	7afb      	ldrb	r3, [r7, #11]
 8007866:	68fa      	ldr	r2, [r7, #12]
 8007868:	3348      	adds	r3, #72	; 0x48
 800786a:	015b      	lsls	r3, r3, #5
 800786c:	4413      	add	r3, r2
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007876:	68f9      	ldr	r1, [r7, #12]
 8007878:	3348      	adds	r3, #72	; 0x48
 800787a:	015b      	lsls	r3, r3, #5
 800787c:	440b      	add	r3, r1
 800787e:	601a      	str	r2, [r3, #0]
  } else {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8007880:	e01b      	b.n	80078ba <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 8007882:	7afb      	ldrb	r3, [r7, #11]
 8007884:	68fa      	ldr	r2, [r7, #12]
 8007886:	3358      	adds	r3, #88	; 0x58
 8007888:	015b      	lsls	r3, r3, #5
 800788a:	4413      	add	r3, r2
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	7afb      	ldrb	r3, [r7, #11]
 8007890:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007894:	68f9      	ldr	r1, [r7, #12]
 8007896:	3358      	adds	r3, #88	; 0x58
 8007898:	015b      	lsls	r3, r3, #5
 800789a:	440b      	add	r3, r1
 800789c:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	68fa      	ldr	r2, [r7, #12]
 80078a2:	3358      	adds	r3, #88	; 0x58
 80078a4:	015b      	lsls	r3, r3, #5
 80078a6:	4413      	add	r3, r2
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	7afb      	ldrb	r3, [r7, #11]
 80078ac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80078b0:	68f9      	ldr	r1, [r7, #12]
 80078b2:	3358      	adds	r3, #88	; 0x58
 80078b4:	015b      	lsls	r3, r3, #5
 80078b6:	440b      	add	r3, r1
 80078b8:	601a      	str	r2, [r3, #0]
}
 80078ba:	bf00      	nop
 80078bc:	3714      	adds	r7, #20
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	080087c0 	.word	0x080087c0

080078cc <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t* dst, uint16_t len) {
 80078cc:	b480      	push	{r7}
 80078ce:	b08d      	sub	sp, #52	; 0x34
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
 80078d8:	4613      	mov	r3, r2
 80078da:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80078dc:	79fb      	ldrb	r3, [r7, #7]
 80078de:	4a27      	ldr	r2, [pc, #156]	; (800797c <read_fifo_packet+0xb0>)
 80078e0:	011b      	lsls	r3, r3, #4
 80078e2:	4413      	add	r3, r2
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t* rx_fifo = dwc2->fifo[0];
 80078e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ee:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 80078f0:	88bb      	ldrh	r3, [r7, #4]
 80078f2:	089b      	lsrs	r3, r3, #2
 80078f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while (full_words--) {
 80078f6:	e00b      	b.n	8007910 <read_fifo_packet+0x44>
    tu_unaligned_write32(dst, *rx_fifo);
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	61ba      	str	r2, [r7, #24]
 8007900:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 8007902:	69bb      	ldr	r3, [r7, #24]
 8007904:	697a      	ldr	r2, [r7, #20]
 8007906:	601a      	str	r2, [r3, #0]
}
 8007908:	bf00      	nop
    dst += 4;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	3304      	adds	r3, #4
 800790e:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 8007910:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007912:	1e5a      	subs	r2, r3, #1
 8007914:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1ee      	bne.n	80078f8 <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 800791a:	88bb      	ldrh	r3, [r7, #4]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (bytes_rem != 0) {
 8007926:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800792a:	2b00      	cmp	r3, #0
 800792c:	d020      	beq.n	8007970 <read_fifo_packet+0xa4>
    uint32_t const tmp = *rx_fifo;
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	61fb      	str	r3, [r7, #28]
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) dst[1] = tu_u32_byte1(tmp);
 8007940:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007944:	2b01      	cmp	r3, #1
 8007946:	d907      	bls.n	8007958 <read_fifo_packet+0x8c>
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	0a12      	lsrs	r2, r2, #8
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 2) dst[2] = tu_u32_byte2(tmp);
 8007958:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800795c:	2b02      	cmp	r3, #2
 800795e:	d907      	bls.n	8007970 <read_fifo_packet+0xa4>
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	3302      	adds	r3, #2
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	0c12      	lsrs	r2, r2, #16
 800796c:	b2d2      	uxtb	r2, r2
 800796e:	701a      	strb	r2, [r3, #0]
  }
}
 8007970:	bf00      	nop
 8007972:	3734      	adds	r7, #52	; 0x34
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr
 800797c:	080087c0 	.word	0x080087c0

08007980 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const* src, uint16_t len) {
 8007980:	b480      	push	{r7}
 8007982:	b089      	sub	sp, #36	; 0x24
 8007984:	af00      	add	r7, sp, #0
 8007986:	603a      	str	r2, [r7, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	4603      	mov	r3, r0
 800798c:	71fb      	strb	r3, [r7, #7]
 800798e:	460b      	mov	r3, r1
 8007990:	71bb      	strb	r3, [r7, #6]
 8007992:	4613      	mov	r3, r2
 8007994:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007996:	79fb      	ldrb	r3, [r7, #7]
 8007998:	4a23      	ldr	r2, [pc, #140]	; (8007a28 <write_fifo_packet+0xa8>)
 800799a:	011b      	lsls	r3, r3, #4
 800799c:	4413      	add	r3, r2
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	617b      	str	r3, [r7, #20]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 80079a2:	79bb      	ldrb	r3, [r7, #6]
 80079a4:	3301      	adds	r3, #1
 80079a6:	031b      	lsls	r3, r3, #12
 80079a8:	697a      	ldr	r2, [r7, #20]
 80079aa:	4413      	add	r3, r2
 80079ac:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 80079ae:	88bb      	ldrh	r3, [r7, #4]
 80079b0:	089b      	lsrs	r3, r3, #2
 80079b2:	83fb      	strh	r3, [r7, #30]
  while (full_words--) {
 80079b4:	e008      	b.n	80079c8 <write_fifo_packet+0x48>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	60bb      	str	r3, [r7, #8]
  return *((uint32_t const *) mem);
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	601a      	str	r2, [r3, #0]
    src += 4;
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	3304      	adds	r3, #4
 80079c6:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 80079c8:	8bfb      	ldrh	r3, [r7, #30]
 80079ca:	1e5a      	subs	r2, r3, #1
 80079cc:	83fa      	strh	r2, [r7, #30]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1f1      	bne.n	80079b6 <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 80079d2:	88bb      	ldrh	r3, [r7, #4]
 80079d4:	b2db      	uxtb	r3, r3
 80079d6:	f003 0303 	and.w	r3, r3, #3
 80079da:	73fb      	strb	r3, [r7, #15]
  if (bytes_rem) {
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d01b      	beq.n	8007a1a <write_fifo_packet+0x9a>
    uint32_t tmp_word = src[0];
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 1) tmp_word |= (src[1] << 8);
 80079e8:	7bfb      	ldrb	r3, [r7, #15]
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d907      	bls.n	80079fe <write_fifo_packet+0x7e>
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	3301      	adds	r3, #1
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	021b      	lsls	r3, r3, #8
 80079f6:	461a      	mov	r2, r3
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	4313      	orrs	r3, r2
 80079fc:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 2) tmp_word |= (src[2] << 16);
 80079fe:	7bfb      	ldrb	r3, [r7, #15]
 8007a00:	2b02      	cmp	r3, #2
 8007a02:	d907      	bls.n	8007a14 <write_fifo_packet+0x94>
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	3302      	adds	r3, #2
 8007a08:	781b      	ldrb	r3, [r3, #0]
 8007a0a:	041b      	lsls	r3, r3, #16
 8007a0c:	461a      	mov	r2, r3
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	69ba      	ldr	r2, [r7, #24]
 8007a18:	601a      	str	r2, [r3, #0]
  }
}
 8007a1a:	bf00      	nop
 8007a1c:	3724      	adds	r7, #36	; 0x24
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	080087c0 	.word	0x080087c0

08007a2c <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport) {
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b08c      	sub	sp, #48	; 0x30
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	4603      	mov	r3, r0
 8007a34:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007a36:	79fb      	ldrb	r3, [r7, #7]
 8007a38:	4a5d      	ldr	r2, [pc, #372]	; (8007bb0 <handle_rxflvl_irq+0x184>)
 8007a3a:	011b      	lsls	r3, r3, #4
 8007a3c:	4413      	add	r3, r2
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const* rx_fifo = dwc2->fifo[0];
 8007a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a48:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8007a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	623b      	str	r3, [r7, #32]
  uint8_t const pktsts = (ctl_word & GRXSTSP_PKTSTS_Msk) >> GRXSTSP_PKTSTS_Pos;
 8007a50:	6a3b      	ldr	r3, [r7, #32]
 8007a52:	0c5b      	lsrs	r3, r3, #17
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	77fb      	strb	r3, [r7, #31]
  uint8_t const epnum = (ctl_word & GRXSTSP_EPNUM_Msk) >> GRXSTSP_EPNUM_Pos;
 8007a5c:	6a3b      	ldr	r3, [r7, #32]
 8007a5e:	b2db      	uxtb	r3, r3
 8007a60:	f003 030f 	and.w	r3, r3, #15
 8007a64:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt = (ctl_word & GRXSTSP_BCNT_Msk) >> GRXSTSP_BCNT_Pos;
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	091b      	lsrs	r3, r3, #4
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007a70:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8007a72:	7fbb      	ldrb	r3, [r7, #30]
 8007a74:	3358      	adds	r3, #88	; 0x58
 8007a76:	015b      	lsls	r3, r3, #5
 8007a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a7a:	4413      	add	r3, r2
 8007a7c:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch (pktsts) {
 8007a7e:	7ffb      	ldrb	r3, [r7, #31]
 8007a80:	3b01      	subs	r3, #1
 8007a82:	2b05      	cmp	r3, #5
 8007a84:	d87e      	bhi.n	8007b84 <handle_rxflvl_irq+0x158>
 8007a86:	a201      	add	r2, pc, #4	; (adr r2, 8007a8c <handle_rxflvl_irq+0x60>)
 8007a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a8c:	08007b99 	.word	0x08007b99
 8007a90:	08007ac5 	.word	0x08007ac5
 8007a94:	08007b3f 	.word	0x08007b3f
 8007a98:	08007ab7 	.word	0x08007ab7
 8007a9c:	08007b85 	.word	0x08007b85
 8007aa0:	08007aa5 	.word	0x08007aa5
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a42      	ldr	r2, [pc, #264]	; (8007bb4 <handle_rxflvl_irq+0x188>)
 8007aaa:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8007aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a40      	ldr	r2, [pc, #256]	; (8007bb4 <handle_rxflvl_irq+0x188>)
 8007ab2:	6053      	str	r3, [r2, #4]
      break;
 8007ab4:	e077      	b.n	8007ba6 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	611a      	str	r2, [r3, #16]
      break;
 8007ac2:	e070      	b.n	8007ba6 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX: {
      // Out packet received
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8007ac4:	7fbb      	ldrb	r3, [r7, #30]
 8007ac6:	015b      	lsls	r3, r3, #5
 8007ac8:	4a3b      	ldr	r2, [pc, #236]	; (8007bb8 <handle_rxflvl_irq+0x18c>)
 8007aca:	4413      	add	r3, r2
 8007acc:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if (xfer->ff) {
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d007      	beq.n	8007ae6 <handle_rxflvl_irq+0xba>
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	8bba      	ldrh	r2, [r7, #28]
 8007adc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd f8a4 	bl	8004c2c <tu_fifo_write_n_const_addr_full_words>
 8007ae4:	e00c      	b.n	8007b00 <handle_rxflvl_irq+0xd4>
      } else {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	6819      	ldr	r1, [r3, #0]
 8007aea:	8bba      	ldrh	r2, [r7, #28]
 8007aec:	79fb      	ldrb	r3, [r7, #7]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f7ff feec 	bl	80078cc <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	8bbb      	ldrh	r3, [r7, #28]
 8007afa:	441a      	add	r2, r3
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if (bcnt < xfer->max_size) {
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	895b      	ldrh	r3, [r3, #10]
 8007b04:	8bba      	ldrh	r2, [r7, #28]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d248      	bcs.n	8007b9c <handle_rxflvl_irq+0x170>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8007b0a:	69bb      	ldr	r3, [r7, #24]
 8007b0c:	691b      	ldr	r3, [r3, #16]
 8007b0e:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	891a      	ldrh	r2, [r3, #8]
 8007b16:	b28b      	uxth	r3, r1
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	811a      	strh	r2, [r3, #8]
        if (epnum == 0) {
 8007b20:	7fbb      	ldrb	r3, [r7, #30]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d13a      	bne.n	8007b9c <handle_rxflvl_irq+0x170>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	891a      	ldrh	r2, [r3, #8]
 8007b2a:	4b24      	ldr	r3, [pc, #144]	; (8007bbc <handle_rxflvl_irq+0x190>)
 8007b2c:	881b      	ldrh	r3, [r3, #0]
 8007b2e:	1ad3      	subs	r3, r2, r3
 8007b30:	b29a      	uxth	r2, r3
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8007b36:	4b21      	ldr	r3, [pc, #132]	; (8007bbc <handle_rxflvl_irq+0x190>)
 8007b38:	2200      	movs	r2, #0
 8007b3a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
      break;
 8007b3c:	e02e      	b.n	8007b9c <handle_rxflvl_irq+0x170>
      // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
      // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
      // XFRC complete is additionally generated when
      // - setup packet is received
      // - complete the data stage of control write is complete
      if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8007b3e:	7fbb      	ldrb	r3, [r7, #30]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d12d      	bne.n	8007ba0 <handle_rxflvl_irq+0x174>
 8007b44:	8bbb      	ldrh	r3, [r7, #28]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d12a      	bne.n	8007ba0 <handle_rxflvl_irq+0x174>
 8007b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b4e:	4a1c      	ldr	r2, [pc, #112]	; (8007bc0 <handle_rxflvl_irq+0x194>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d925      	bls.n	8007ba0 <handle_rxflvl_irq+0x174>
        uint32_t doepint = epout->doepint;
 8007b54:	69bb      	ldr	r3, [r7, #24]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	617b      	str	r3, [r7, #20]

        if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR)) {
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	f248 0320 	movw	r3, #32800	; 0x8020
 8007b60:	4013      	ands	r3, r2
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d01c      	beq.n	8007ba0 <handle_rxflvl_irq+0x174>
          // skip this "no-data" transfer complete event
          // Note: STPKTRX will be clear later by setup received handler
          uint32_t clear_flags = DOEPINT_XFRC;
 8007b66:	2301      	movs	r3, #1
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c

          if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d003      	beq.n	8007b7c <handle_rxflvl_irq+0x150>
 8007b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b76:	f043 0320 	orr.w	r3, r3, #32
 8007b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

          epout->doepint = clear_flags;
 8007b7c:	69bb      	ldr	r3, [r7, #24]
 8007b7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b80:	609a      	str	r2, [r3, #8]

          // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
        }
      }
      break;
 8007b82:	e00d      	b.n	8007ba0 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 8007b84:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <handle_rxflvl_irq+0x198>)
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0301 	and.w	r3, r3, #1
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d007      	beq.n	8007ba4 <handle_rxflvl_irq+0x178>
 8007b94:	be00      	bkpt	0x0000
      break;
 8007b96:	e005      	b.n	8007ba4 <handle_rxflvl_irq+0x178>
      break;
 8007b98:	bf00      	nop
 8007b9a:	e004      	b.n	8007ba6 <handle_rxflvl_irq+0x17a>
      break;
 8007b9c:	bf00      	nop
 8007b9e:	e002      	b.n	8007ba6 <handle_rxflvl_irq+0x17a>
      break;
 8007ba0:	bf00      	nop
 8007ba2:	e000      	b.n	8007ba6 <handle_rxflvl_irq+0x17a>
      break;
 8007ba4:	bf00      	nop
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3730      	adds	r7, #48	; 0x30
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	080087c0 	.word	0x080087c0
 8007bb4:	200013b4 	.word	0x200013b4
 8007bb8:	200013bc 	.word	0x200013bc
 8007bbc:	2000143c 	.word	0x2000143c
 8007bc0:	4f543009 	.word	0x4f543009
 8007bc4:	e000edf0 	.word	0xe000edf0

08007bc8 <handle_epout_irq>:

static void handle_epout_irq(uint8_t rhport) {
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b096      	sub	sp, #88	; 0x58
 8007bcc:	af02      	add	r7, sp, #8
 8007bce:	4603      	mov	r3, r0
 8007bd0:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007bd2:	79fb      	ldrb	r3, [r7, #7]
 8007bd4:	4a60      	ldr	r2, [pc, #384]	; (8007d58 <handle_epout_irq+0x190>)
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	4413      	add	r3, r2
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8007bde:	79fb      	ldrb	r3, [r7, #7]
 8007be0:	4a5d      	ldr	r2, [pc, #372]	; (8007d58 <handle_epout_irq+0x190>)
 8007be2:	011b      	lsls	r3, r3, #4
 8007be4:	4413      	add	r3, r2
 8007be6:	3308      	adds	r3, #8
 8007be8:	781b      	ldrb	r3, [r3, #0]
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8007bee:	2300      	movs	r3, #0
 8007bf0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007bf4:	e0a4      	b.n	8007d40 <handle_epout_irq+0x178>
    if (dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n)) {
 8007bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bf8:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8007bfc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c00:	3310      	adds	r3, #16
 8007c02:	fa22 f303 	lsr.w	r3, r2, r3
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8093 	beq.w	8007d36 <handle_epout_irq+0x16e>
      dwc2_epout_t* epout = &dwc2->epout[n];
 8007c10:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007c14:	3358      	adds	r3, #88	; 0x58
 8007c16:	015b      	lsls	r3, r3, #5
 8007c18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c1a:	4413      	add	r3, r2
 8007c1c:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 8007c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c20:	689b      	ldr	r3, [r3, #8]
 8007c22:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if (doepint & DOEPINT_STUP) {
 8007c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d034      	beq.n	8007c98 <handle_epout_irq+0xd0>
        uint32_t clear_flag = DOEPINT_STUP;
 8007c2e:	2308      	movs	r3, #8
 8007c30:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8007c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d008      	beq.n	8007c4e <handle_epout_irq+0x86>
 8007c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c40:	4a46      	ldr	r2, [pc, #280]	; (8007d5c <handle_epout_irq+0x194>)
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d903      	bls.n	8007c4e <handle_epout_irq+0x86>
          clear_flag |= DOEPINT_STPKTRX;
 8007c46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007c4c:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 8007c4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c52:	609a      	str	r2, [r3, #8]
 8007c54:	79fb      	ldrb	r3, [r7, #7]
 8007c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007c5a:	4b41      	ldr	r3, [pc, #260]	; (8007d60 <handle_epout_irq+0x198>)
 8007c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c5e:	2301      	movs	r3, #1
 8007c60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_handler(&event, in_isr);
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8007c64:	f107 0314 	add.w	r3, r7, #20
 8007c68:	2200      	movs	r2, #0
 8007c6a:	601a      	str	r2, [r3, #0]
 8007c6c:	605a      	str	r2, [r3, #4]
 8007c6e:	609a      	str	r2, [r3, #8]
 8007c70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007c74:	753b      	strb	r3, [r7, #20]
 8007c76:	2306      	movs	r3, #6
 8007c78:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8007c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c7c:	f107 0318 	add.w	r3, r7, #24
 8007c80:	6810      	ldr	r0, [r2, #0]
 8007c82:	6851      	ldr	r1, [r2, #4]
 8007c84:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8007c86:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007c8a:	f107 0314 	add.w	r3, r7, #20
 8007c8e:	4611      	mov	r1, r2
 8007c90:	4618      	mov	r0, r3
 8007c92:	f7fd fff9 	bl	8005c88 <dcd_event_handler>
}
 8007c96:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if (epout->doepint & DOEPINT_XFRC) {
 8007c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c9a:	689b      	ldr	r3, [r3, #8]
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d048      	beq.n	8007d36 <handle_epout_irq+0x16e>
        epout->doepint = DOEPINT_XFRC;
 8007ca4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	609a      	str	r2, [r3, #8]

        xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8007caa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cae:	015b      	lsls	r3, r3, #5
 8007cb0:	4a2c      	ldr	r2, [pc, #176]	; (8007d64 <handle_epout_irq+0x19c>)
 8007cb2:	4413      	add	r3, r2
 8007cb4:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8007cb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d10e      	bne.n	8007cdc <handle_epout_irq+0x114>
 8007cbe:	4b2a      	ldr	r3, [pc, #168]	; (8007d68 <handle_epout_irq+0x1a0>)
 8007cc0:	881b      	ldrh	r3, [r3, #0]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <handle_epout_irq+0x114>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8007cc6:	4b28      	ldr	r3, [pc, #160]	; (8007d68 <handle_epout_irq+0x1a0>)
 8007cc8:	881b      	ldrh	r3, [r3, #0]
 8007cca:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8007cce:	79f8      	ldrb	r0, [r7, #7]
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f7fe ff55 	bl	8006b84 <edpt_schedule_packets>
 8007cda:	e02c      	b.n	8007d36 <handle_epout_irq+0x16e>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cde:	891b      	ldrh	r3, [r3, #8]
 8007ce0:	461a      	mov	r2, r3
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007ce8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007cec:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007cf0:	627a      	str	r2, [r7, #36]	; 0x24
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8007cfe:	f107 0308 	add.w	r3, r7, #8
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
 8007d06:	605a      	str	r2, [r3, #4]
 8007d08:	609a      	str	r2, [r3, #8]
 8007d0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007d0e:	723b      	strb	r3, [r7, #8]
 8007d10:	2307      	movs	r3, #7
 8007d12:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 8007d14:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007d18:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8007d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d1c:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8007d1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007d22:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 8007d24:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007d28:	f107 0308 	add.w	r3, r7, #8
 8007d2c:	4611      	mov	r1, r2
 8007d2e:	4618      	mov	r0, r3
 8007d30:	f7fd ffaa 	bl	8005c88 <dcd_event_handler>
}
 8007d34:	bf00      	nop
  for (uint8_t n = 0; n < ep_count; n++) {
 8007d36:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007d40:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007d44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	f4ff af54 	bcc.w	8007bf6 <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 8007d4e:	bf00      	nop
 8007d50:	bf00      	nop
 8007d52:	3750      	adds	r7, #80	; 0x50
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	080087c0 	.word	0x080087c0
 8007d5c:	4f543009 	.word	0x4f543009
 8007d60:	200013b4 	.word	0x200013b4
 8007d64:	200013bc 	.word	0x200013bc
 8007d68:	2000143c 	.word	0x2000143c

08007d6c <handle_epin_irq>:

static void handle_epin_irq(uint8_t rhport) {
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b094      	sub	sp, #80	; 0x50
 8007d70:	af02      	add	r7, sp, #8
 8007d72:	4603      	mov	r3, r0
 8007d74:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007d76:	79fb      	ldrb	r3, [r7, #7]
 8007d78:	4a88      	ldr	r2, [pc, #544]	; (8007f9c <handle_epin_irq+0x230>)
 8007d7a:	011b      	lsls	r3, r3, #4
 8007d7c:	4413      	add	r3, r2
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8007d82:	79fb      	ldrb	r3, [r7, #7]
 8007d84:	4a85      	ldr	r2, [pc, #532]	; (8007f9c <handle_epin_irq+0x230>)
 8007d86:	011b      	lsls	r3, r3, #4
 8007d88:	4413      	add	r3, r2
 8007d8a:	3308      	adds	r3, #8
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin = dwc2->epin;
 8007d92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d98:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8007d9a:	2300      	movs	r3, #0
 8007d9c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007da0:	e0f0      	b.n	8007f84 <handle_epin_irq+0x218>
    if (dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n)) {
 8007da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007da4:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8007da8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dac:	fa22 f303 	lsr.w	r3, r2, r3
 8007db0:	f003 0301 	and.w	r3, r3, #1
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80e0 	beq.w	8007f7a <handle_epin_irq+0x20e>
      // IN XFER complete (entire xfer).
      xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8007dba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dbe:	015b      	lsls	r3, r3, #5
 8007dc0:	3310      	adds	r3, #16
 8007dc2:	4a77      	ldr	r2, [pc, #476]	; (8007fa0 <handle_epin_irq+0x234>)
 8007dc4:	4413      	add	r3, r2
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34

      if (epin[n].diepint & DIEPINT_XFRC) {
 8007dc8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dcc:	015b      	lsls	r3, r3, #5
 8007dce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dd0:	4413      	add	r3, r2
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d046      	beq.n	8007e6a <handle_epin_irq+0xfe>
        epin[n].diepint = DIEPINT_XFRC;
 8007ddc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007de0:	015b      	lsls	r3, r3, #5
 8007de2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007de4:	4413      	add	r3, r2
 8007de6:	2201      	movs	r2, #1
 8007de8:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8007dea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d10e      	bne.n	8007e10 <handle_epin_irq+0xa4>
 8007df2:	4b6c      	ldr	r3, [pc, #432]	; (8007fa4 <handle_epin_irq+0x238>)
 8007df4:	885b      	ldrh	r3, [r3, #2]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d00a      	beq.n	8007e10 <handle_epin_irq+0xa4>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8007dfa:	4b6a      	ldr	r3, [pc, #424]	; (8007fa4 <handle_epin_irq+0x238>)
 8007dfc:	885b      	ldrh	r3, [r3, #2]
 8007dfe:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007e02:	79f8      	ldrb	r0, [r7, #7]
 8007e04:	9300      	str	r3, [sp, #0]
 8007e06:	2301      	movs	r3, #1
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f7fe febb 	bl	8006b84 <edpt_schedule_packets>
 8007e0e:	e02c      	b.n	8007e6a <handle_epin_irq+0xfe>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007e10:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e14:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e18:	b2d9      	uxtb	r1, r3
 8007e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e1c:	891b      	ldrh	r3, [r3, #8]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007e26:	460b      	mov	r3, r1
 8007e28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007e2c:	623a      	str	r2, [r7, #32]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	77fb      	strb	r3, [r7, #31]
 8007e32:	2301      	movs	r3, #1
 8007e34:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8007e36:	f107 030c 	add.w	r3, r7, #12
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	601a      	str	r2, [r3, #0]
 8007e3e:	605a      	str	r2, [r3, #4]
 8007e40:	609a      	str	r2, [r3, #8]
 8007e42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e46:	733b      	strb	r3, [r7, #12]
 8007e48:	2307      	movs	r3, #7
 8007e4a:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 8007e4c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007e50:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8007e52:	6a3b      	ldr	r3, [r7, #32]
 8007e54:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8007e56:	7ffb      	ldrb	r3, [r7, #31]
 8007e58:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 8007e5a:	7fba      	ldrb	r2, [r7, #30]
 8007e5c:	f107 030c 	add.w	r3, r7, #12
 8007e60:	4611      	mov	r1, r2
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7fd ff10 	bl	8005c88 <dcd_event_handler>
}
 8007e68:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ((epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n))) {
 8007e6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e6e:	015b      	lsls	r3, r3, #5
 8007e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e72:	4413      	add	r3, r2
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d07d      	beq.n	8007f7a <handle_epin_irq+0x20e>
 8007e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e80:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8007e84:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007e88:	2101      	movs	r1, #1
 8007e8a:	fa01 f202 	lsl.w	r2, r1, r2
 8007e8e:	4013      	ands	r3, r2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d072      	beq.n	8007f7a <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8007e94:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e98:	015b      	lsls	r3, r3, #5
 8007e9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e9c:	4413      	add	r3, r2
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	0cdb      	lsrs	r3, r3, #19
 8007ea2:	b29b      	uxth	r3, r3
 8007ea4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007ea8:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for (uint16_t i = 0; i < remaining_packets; i++) {
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007eb0:	e045      	b.n	8007f3e <handle_epin_irq+0x1d2>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 8007eb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007eb6:	015b      	lsls	r3, r3, #5
 8007eb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007eba:	4413      	add	r3, r2
 8007ebc:	691b      	ldr	r3, [r3, #16]
 8007ebe:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8007ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec2:	895a      	ldrh	r2, [r3, #10]
 8007ec4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8007ec6:	83bb      	strh	r3, [r7, #28]
 8007ec8:	4613      	mov	r3, r2
 8007eca:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007ecc:	8bba      	ldrh	r2, [r7, #28]
 8007ece:	8b7b      	ldrh	r3, [r7, #26]
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	bf28      	it	cs
 8007ed4:	4613      	movcs	r3, r2
 8007ed6:	b29b      	uxth	r3, r3
 8007ed8:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8007eda:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007edc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ee0:	015b      	lsls	r3, r3, #5
 8007ee2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007ee4:	440b      	add	r3, r1
 8007ee6:	699b      	ldr	r3, [r3, #24]
 8007ee8:	0099      	lsls	r1, r3, #2
 8007eea:	4b2f      	ldr	r3, [pc, #188]	; (8007fa8 <handle_epin_irq+0x23c>)
 8007eec:	400b      	ands	r3, r1
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d82b      	bhi.n	8007f4a <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if (xfer->ff) {
 8007ef2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d00e      	beq.n	8007f18 <handle_epin_irq+0x1ac>
            volatile uint32_t* tx_fifo = dwc2->fifo[n];
 8007efa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007efe:	3301      	adds	r3, #1
 8007f00:	031b      	lsls	r3, r3, #12
 8007f02:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f04:	4413      	add	r3, r2
 8007f06:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 8007f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fc fe36 	bl	8004b82 <tu_fifo_read_n_const_addr_full_words>
 8007f16:	e00d      	b.n	8007f34 <handle_epin_irq+0x1c8>
          } else {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 8007f18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f1a:	681a      	ldr	r2, [r3, #0]
 8007f1c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f1e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007f22:	79f8      	ldrb	r0, [r7, #7]
 8007f24:	f7ff fd2c 	bl	8007980 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 8007f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f2e:	441a      	add	r2, r3
 8007f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f32:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < remaining_packets; i++) {
 8007f34:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8007f3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8007f42:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8007f44:	429a      	cmp	r2, r3
 8007f46:	d3b4      	bcc.n	8007eb2 <handle_epin_irq+0x146>
 8007f48:	e000      	b.n	8007f4c <handle_epin_irq+0x1e0>
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 8007f4a:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0) {
 8007f4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f50:	015b      	lsls	r3, r3, #5
 8007f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f54:	4413      	add	r3, r2
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d10c      	bne.n	8007f7a <handle_epin_irq+0x20e>
          dwc2->diepempmsk &= ~(1 << n);
 8007f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f62:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8007f66:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007f6a:	2101      	movs	r1, #1
 8007f6c:	fa01 f202 	lsl.w	r2, r1, r2
 8007f70:	43d2      	mvns	r2, r2
 8007f72:	401a      	ands	r2, r3
 8007f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f76:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for (uint8_t n = 0; n < ep_count; n++) {
 8007f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f7e:	3301      	adds	r3, #1
 8007f80:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f84:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8007f88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	f4ff af08 	bcc.w	8007da2 <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 8007f92:	bf00      	nop
 8007f94:	bf00      	nop
 8007f96:	3748      	adds	r7, #72	; 0x48
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	080087c0 	.word	0x080087c0
 8007fa0:	200013bc 	.word	0x200013bc
 8007fa4:	2000143c 	.word	0x2000143c
 8007fa8:	0003fffc 	.word	0x0003fffc

08007fac <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b0a0      	sub	sp, #128	; 0x80
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007fb6:	79fb      	ldrb	r3, [r7, #7]
 8007fb8:	4ab7      	ldr	r2, [pc, #732]	; (8008298 <dcd_int_handler+0x2ec>)
 8007fba:	011b      	lsls	r3, r3, #4
 8007fbc:	4413      	add	r3, r2
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	67bb      	str	r3, [r7, #120]	; 0x78

  uint32_t const int_mask = dwc2->gintmsk;
 8007fc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fc4:	699b      	ldr	r3, [r3, #24]
 8007fc6:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t const int_status = dwc2->gintsts & int_mask;
 8007fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007fce:	4013      	ands	r3, r2
 8007fd0:	673b      	str	r3, [r7, #112]	; 0x70

  if (int_status & GINTSTS_USBRST) {
 8007fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d007      	beq.n	8007fec <dcd_int_handler+0x40>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 8007fdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007fde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007fe2:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8007fe4:	79fb      	ldrb	r3, [r7, #7]
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe fd42 	bl	8006a70 <bus_reset>
  }

  if (int_status & GINTSTS_ENUMDNE) {
 8007fec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d03e      	beq.n	8008074 <dcd_int_handler+0xc8>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8007ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007ff8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007ffc:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos) {
 8007ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008000:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8008004:	085b      	lsrs	r3, r3, #1
 8008006:	f003 0303 	and.w	r3, r3, #3
 800800a:	2b00      	cmp	r3, #0
 800800c:	d002      	beq.n	8008014 <dcd_int_handler+0x68>
 800800e:	2b02      	cmp	r3, #2
 8008010:	d004      	beq.n	800801c <dcd_int_handler+0x70>
 8008012:	e007      	b.n	8008024 <dcd_int_handler+0x78>
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 8008014:	2302      	movs	r3, #2
 8008016:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800801a:	e007      	b.n	800802c <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 800801c:	2301      	movs	r3, #1
 800801e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 8008022:	e003      	b.n	800802c <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 8008024:	2300      	movs	r3, #0
 8008026:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 800802a:	bf00      	nop
 800802c:	79fb      	ldrb	r3, [r7, #7]
 800802e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8008032:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8008036:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800803a:	2301      	movs	r3, #1
 800803c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 8008040:	f107 0320 	add.w	r3, r7, #32
 8008044:	2200      	movs	r2, #0
 8008046:	601a      	str	r2, [r3, #0]
 8008048:	605a      	str	r2, [r3, #4]
 800804a:	609a      	str	r2, [r3, #8]
 800804c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8008050:	f887 3020 	strb.w	r3, [r7, #32]
 8008054:	2301      	movs	r3, #1
 8008056:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.bus_reset.speed = speed;
 800805a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800805e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dcd_event_handler(&event, in_isr);
 8008062:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8008066:	f107 0320 	add.w	r3, r7, #32
 800806a:	4611      	mov	r1, r2
 800806c:	4618      	mov	r0, r3
 800806e:	f7fd fe0b 	bl	8005c88 <dcd_event_handler>
}
 8008072:	bf00      	nop
    // TODO must update GUSBCFG_TRDT according to link speed

    dcd_event_bus_reset(rhport, speed, true);
  }

  if (int_status & GINTSTS_USBSUSP) {
 8008074:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008076:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800807a:	2b00      	cmp	r3, #0
 800807c:	d023      	beq.n	80080c6 <dcd_int_handler+0x11a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800807e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008080:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008084:	615a      	str	r2, [r3, #20]
 8008086:	79fb      	ldrb	r3, [r7, #7]
 8008088:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800808c:	2304      	movs	r3, #4
 800808e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8008092:	2301      	movs	r3, #1
 8008094:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008098:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800809c:	2200      	movs	r2, #0
 800809e:	601a      	str	r2, [r3, #0]
 80080a0:	605a      	str	r2, [r3, #4]
 80080a2:	609a      	str	r2, [r3, #8]
 80080a4:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80080a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 80080ac:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80080b0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 80080b4:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 80080b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80080bc:	4611      	mov	r1, r2
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fd fde2 	bl	8005c88 <dcd_event_handler>
}
 80080c4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & GINTSTS_WKUINT) {
 80080c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	da23      	bge.n	8008114 <dcd_int_handler+0x168>
    dwc2->gintsts = GINTSTS_WKUINT;
 80080cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080d2:	615a      	str	r2, [r3, #20]
 80080d4:	79fb      	ldrb	r3, [r7, #7]
 80080d6:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 80080da:	2305      	movs	r3, #5
 80080dc:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 80080e0:	2301      	movs	r3, #1
 80080e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80080e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80080ea:	2200      	movs	r2, #0
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	605a      	str	r2, [r3, #4]
 80080f0:	609a      	str	r2, [r3, #8]
 80080f2:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 80080f6:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 80080fa:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 80080fe:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8008102:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008106:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800810a:	4611      	mov	r1, r2
 800810c:	4618      	mov	r0, r3
 800810e:	f7fd fdbb 	bl	8005c88 <dcd_event_handler>
}
 8008112:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (int_status & GINTSTS_OTGINT) {
 8008114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008116:	f003 0304 	and.w	r3, r3, #4
 800811a:	2b00      	cmp	r3, #0
 800811c:	d028      	beq.n	8008170 <dcd_int_handler+0x1c4>
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 800811e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (otg_int & GOTGINT_SEDET) {
 8008124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008126:	f003 0304 	and.w	r3, r3, #4
 800812a:	2b00      	cmp	r3, #0
 800812c:	d01d      	beq.n	800816a <dcd_int_handler+0x1be>
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8008134:	2302      	movs	r3, #2
 8008136:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800813a:	2301      	movs	r3, #1
 800813c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008140:	f107 0314 	add.w	r3, r7, #20
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	605a      	str	r2, [r3, #4]
 800814a:	609a      	str	r2, [r3, #8]
 800814c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8008150:	753b      	strb	r3, [r7, #20]
 8008152:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8008156:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8008158:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 800815c:	f107 0314 	add.w	r3, r7, #20
 8008160:	4611      	mov	r1, r2
 8008162:	4618      	mov	r0, r3
 8008164:	f7fd fd90 	bl	8005c88 <dcd_event_handler>
}
 8008168:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800816a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800816c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800816e:	605a      	str	r2, [r3, #4]
  }

  if (int_status & GINTSTS_SOF) {
 8008170:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008172:	f003 0308 	and.w	r3, r3, #8
 8008176:	2b00      	cmp	r3, #0
 8008178:	d051      	beq.n	800821e <dcd_int_handler+0x272>
    dwc2->gotgint = GINTSTS_SOF;
 800817a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800817c:	2208      	movs	r2, #8
 800817e:	605a      	str	r2, [r3, #4]

    if (_sof_en) {
 8008180:	4b46      	ldr	r3, [pc, #280]	; (800829c <dcd_int_handler+0x2f0>)
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d024      	beq.n	80081d2 <dcd_int_handler+0x226>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 8008188:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800818a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800818e:	0a1b      	lsrs	r3, r3, #8
 8008190:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008194:	66bb      	str	r3, [r7, #104]	; 0x68
 8008196:	79fb      	ldrb	r3, [r7, #7]
 8008198:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800819c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800819e:	657b      	str	r3, [r7, #84]	; 0x54
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 80081a6:	f107 0308 	add.w	r3, r7, #8
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]
 80081ae:	605a      	str	r2, [r3, #4]
 80081b0:	609a      	str	r2, [r3, #8]
 80081b2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80081b6:	723b      	strb	r3, [r7, #8]
 80081b8:	2303      	movs	r3, #3
 80081ba:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 80081bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081be:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 80081c0:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 80081c4:	f107 0308 	add.w	r3, r7, #8
 80081c8:	4611      	mov	r1, r2
 80081ca:	4618      	mov	r0, r3
 80081cc:	f7fd fd5c 	bl	8005c88 <dcd_event_handler>
}
 80081d0:	e005      	b.n	80081de <dcd_int_handler+0x232>
      dcd_event_sof(rhport, frame, true);
    } else {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 80081d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081d4:	699b      	ldr	r3, [r3, #24]
 80081d6:	f023 0208 	bic.w	r2, r3, #8
 80081da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081dc:	619a      	str	r2, [r3, #24]
 80081de:	79fb      	ldrb	r3, [r7, #7]
 80081e0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80081e4:	2303      	movs	r3, #3
 80081e6:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 80081ea:	2301      	movs	r3, #1
 80081ec:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80081f0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80081f4:	2200      	movs	r2, #0
 80081f6:	601a      	str	r2, [r3, #0]
 80081f8:	605a      	str	r2, [r3, #4]
 80081fa:	609a      	str	r2, [r3, #8]
 80081fc:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008200:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008204:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8008208:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_handler(&event, in_isr);
 800820c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8008210:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008214:	4611      	mov	r1, r2
 8008216:	4618      	mov	r0, r3
 8008218:	f7fd fd36 	bl	8005c88 <dcd_event_handler>
}
 800821c:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if (int_status & GINTSTS_RXFLVL) {
 800821e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008220:	f003 0310 	and.w	r3, r3, #16
 8008224:	2b00      	cmp	r3, #0
 8008226:	d020      	beq.n	800826a <dcd_int_handler+0x2be>
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 8008228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	f023 0210 	bic.w	r2, r3, #16
 8008230:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008232:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do {
      handle_rxflvl_irq(rhport);
 8008234:	79fb      	ldrb	r3, [r7, #7]
 8008236:	4618      	mov	r0, r3
 8008238:	f7ff fbf8 	bl	8007a2c <handle_rxflvl_irq>
    } while (dwc2->gotgint & GINTSTS_RXFLVL);
 800823c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	f003 0310 	and.w	r3, r3, #16
 8008244:	2b00      	cmp	r3, #0
 8008246:	d1f5      	bne.n	8008234 <dcd_int_handler+0x288>

    // Manage RX FIFO size
    if (_out_ep_closed) {
 8008248:	4b15      	ldr	r3, [pc, #84]	; (80082a0 <dcd_int_handler+0x2f4>)
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	2b00      	cmp	r3, #0
 800824e:	d006      	beq.n	800825e <dcd_int_handler+0x2b2>
      update_grxfsiz(rhport);
 8008250:	79fb      	ldrb	r3, [r7, #7]
 8008252:	4618      	mov	r0, r3
 8008254:	f7fe fbca 	bl	80069ec <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 8008258:	4b11      	ldr	r3, [pc, #68]	; (80082a0 <dcd_int_handler+0x2f4>)
 800825a:	2200      	movs	r2, #0
 800825c:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800825e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	f043 0210 	orr.w	r2, r3, #16
 8008266:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008268:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if (int_status & GINTSTS_OEPINT) {
 800826a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800826c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <dcd_int_handler+0x2d0>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 8008274:	79fb      	ldrb	r3, [r7, #7]
 8008276:	4618      	mov	r0, r3
 8008278:	f7ff fca6 	bl	8007bc8 <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if (int_status & GINTSTS_IEPINT) {
 800827c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800827e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008282:	2b00      	cmp	r3, #0
 8008284:	d003      	beq.n	800828e <dcd_int_handler+0x2e2>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 8008286:	79fb      	ldrb	r3, [r7, #7]
 8008288:	4618      	mov	r0, r3
 800828a:	f7ff fd6f 	bl	8007d6c <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 800828e:	bf00      	nop
 8008290:	3780      	adds	r7, #128	; 0x80
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}
 8008296:	bf00      	nop
 8008298:	080087c0 	.word	0x080087c0
 800829c:	20001443 	.word	0x20001443
 80082a0:	20001442 	.word	0x20001442

080082a4 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b085      	sub	sp, #20
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
 80082ac:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	781b      	ldrb	r3, [r3, #0]
 80082b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d106      	bne.n	80082ca <tu_edpt_claim+0x26>
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	781b      	ldrb	r3, [r3, #0]
 80082c0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <tu_edpt_claim+0x2a>
 80082ca:	2300      	movs	r3, #0
 80082cc:	e01e      	b.n	800830c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	781b      	ldrb	r3, [r3, #0]
 80082d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80082d6:	b2db      	uxtb	r3, r3
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d108      	bne.n	80082ee <tu_edpt_claim+0x4a>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	781b      	ldrb	r3, [r3, #0]
 80082e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d101      	bne.n	80082ee <tu_edpt_claim+0x4a>
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <tu_edpt_claim+0x4c>
 80082ee:	2300      	movs	r3, #0
 80082f0:	73fb      	strb	r3, [r7, #15]
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	f003 0301 	and.w	r3, r3, #1
 80082f8:	73fb      	strb	r3, [r7, #15]
  if (available)
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d004      	beq.n	800830a <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8008300:	687a      	ldr	r2, [r7, #4]
 8008302:	7813      	ldrb	r3, [r2, #0]
 8008304:	f043 0304 	orr.w	r3, r3, #4
 8008308:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800830a:	7bfb      	ldrb	r3, [r7, #15]
}
 800830c:	4618      	mov	r0, r3
 800830e:	3714      	adds	r7, #20
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <tu_edpt_validate>:

  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 8008318:	b480      	push	{r7}
 800831a:	b08b      	sub	sp, #44	; 0x2c
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	460b      	mov	r3, r1
 8008322:	70fb      	strb	r3, [r7, #3]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	889b      	ldrh	r3, [r3, #4]
 800832c:	b29b      	uxth	r3, r3
 800832e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008332:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8008334:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	78db      	ldrb	r3, [r3, #3]
 800833a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800833e:	b2db      	uxtb	r3, r3
 8008340:	2b03      	cmp	r3, #3
 8008342:	d03e      	beq.n	80083c2 <tu_edpt_validate+0xaa>
 8008344:	2b03      	cmp	r3, #3
 8008346:	dc53      	bgt.n	80083f0 <tu_edpt_validate+0xd8>
 8008348:	2b01      	cmp	r3, #1
 800834a:	d002      	beq.n	8008352 <tu_edpt_validate+0x3a>
 800834c:	2b02      	cmp	r3, #2
 800834e:	d018      	beq.n	8008382 <tu_edpt_validate+0x6a>
 8008350:	e04e      	b.n	80083f0 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8008352:	78fb      	ldrb	r3, [r7, #3]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d102      	bne.n	800835e <tu_edpt_validate+0x46>
 8008358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835c:	e001      	b.n	8008362 <tu_edpt_validate+0x4a>
 800835e:	f240 33ff 	movw	r3, #1023	; 0x3ff
 8008362:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 8008364:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008366:	8afb      	ldrh	r3, [r7, #22]
 8008368:	429a      	cmp	r2, r3
 800836a:	d943      	bls.n	80083f4 <tu_edpt_validate+0xdc>
 800836c:	4b27      	ldr	r3, [pc, #156]	; (800840c <tu_edpt_validate+0xf4>)
 800836e:	613b      	str	r3, [r7, #16]
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f003 0301 	and.w	r3, r3, #1
 8008378:	2b00      	cmp	r3, #0
 800837a:	d000      	beq.n	800837e <tu_edpt_validate+0x66>
 800837c:	be00      	bkpt	0x0000
 800837e:	2300      	movs	r3, #0
 8008380:	e03e      	b.n	8008400 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8008382:	78fb      	ldrb	r3, [r7, #3]
 8008384:	2b02      	cmp	r3, #2
 8008386:	d10e      	bne.n	80083a6 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800838a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800838e:	d033      	beq.n	80083f8 <tu_edpt_validate+0xe0>
 8008390:	4b1e      	ldr	r3, [pc, #120]	; (800840c <tu_edpt_validate+0xf4>)
 8008392:	61bb      	str	r3, [r7, #24]
 8008394:	69bb      	ldr	r3, [r7, #24]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0301 	and.w	r3, r3, #1
 800839c:	2b00      	cmp	r3, #0
 800839e:	d000      	beq.n	80083a2 <tu_edpt_validate+0x8a>
 80083a0:	be00      	bkpt	0x0000
 80083a2:	2300      	movs	r3, #0
 80083a4:	e02c      	b.n	8008400 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 80083a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80083a8:	2b40      	cmp	r3, #64	; 0x40
 80083aa:	d925      	bls.n	80083f8 <tu_edpt_validate+0xe0>
 80083ac:	4b17      	ldr	r3, [pc, #92]	; (800840c <tu_edpt_validate+0xf4>)
 80083ae:	61fb      	str	r3, [r7, #28]
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f003 0301 	and.w	r3, r3, #1
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d000      	beq.n	80083be <tu_edpt_validate+0xa6>
 80083bc:	be00      	bkpt	0x0000
 80083be:	2300      	movs	r3, #0
 80083c0:	e01e      	b.n	8008400 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 80083c2:	78fb      	ldrb	r3, [r7, #3]
 80083c4:	2b02      	cmp	r3, #2
 80083c6:	d102      	bne.n	80083ce <tu_edpt_validate+0xb6>
 80083c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80083cc:	e000      	b.n	80083d0 <tu_edpt_validate+0xb8>
 80083ce:	2340      	movs	r3, #64	; 0x40
 80083d0:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 80083d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80083d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d910      	bls.n	80083fc <tu_edpt_validate+0xe4>
 80083da:	4b0c      	ldr	r3, [pc, #48]	; (800840c <tu_edpt_validate+0xf4>)
 80083dc:	623b      	str	r3, [r7, #32]
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0301 	and.w	r3, r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d000      	beq.n	80083ec <tu_edpt_validate+0xd4>
 80083ea:	be00      	bkpt	0x0000
 80083ec:	2300      	movs	r3, #0
 80083ee:	e007      	b.n	8008400 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 80083f0:	2300      	movs	r3, #0
 80083f2:	e005      	b.n	8008400 <tu_edpt_validate+0xe8>
    break;
 80083f4:	bf00      	nop
 80083f6:	e002      	b.n	80083fe <tu_edpt_validate+0xe6>
    break;
 80083f8:	bf00      	nop
 80083fa:	e000      	b.n	80083fe <tu_edpt_validate+0xe6>
    break;
 80083fc:	bf00      	nop
  }

  return true;
 80083fe:	2301      	movs	r3, #1
}
 8008400:	4618      	mov	r0, r3
 8008402:	372c      	adds	r7, #44	; 0x2c
 8008404:	46bd      	mov	sp, r7
 8008406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840a:	4770      	bx	lr
 800840c:	e000edf0 	.word	0xe000edf0

08008410 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 8008410:	b480      	push	{r7}
 8008412:	b08d      	sub	sp, #52	; 0x34
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	4611      	mov	r1, r2
 800841c:	461a      	mov	r2, r3
 800841e:	460b      	mov	r3, r1
 8008420:	80fb      	strh	r3, [r7, #6]
 8008422:	4613      	mov	r3, r2
 8008424:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800842a:	88fb      	ldrh	r3, [r7, #6]
 800842c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800842e:	4413      	add	r3, r2
 8008430:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 8008432:	e027      	b.n	8008484 <tu_edpt_bind_driver+0x74>
 8008434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008436:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008438:	6a3b      	ldr	r3, [r7, #32]
 800843a:	3301      	adds	r3, #1
 800843c:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 800843e:	2b05      	cmp	r3, #5
 8008440:	d116      	bne.n	8008470 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8008442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008444:	789b      	ldrb	r3, [r3, #2]
 8008446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800844a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800844e:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008450:	7fbb      	ldrb	r3, [r7, #30]
 8008452:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008456:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8008458:	005b      	lsls	r3, r3, #1
 800845a:	68fa      	ldr	r2, [r7, #12]
 800845c:	4413      	add	r3, r2
 800845e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008462:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008464:	7ffa      	ldrb	r2, [r7, #31]
 8008466:	09d2      	lsrs	r2, r2, #7
 8008468:	b2d2      	uxtb	r2, r2
 800846a:	4611      	mov	r1, r2
 800846c:	797a      	ldrb	r2, [r7, #5]
 800846e:	545a      	strb	r2, [r3, r1]
 8008470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008472:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008478:	697b      	ldr	r3, [r7, #20]
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	461a      	mov	r2, r3
 800847e:	697b      	ldr	r3, [r7, #20]
 8008480:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8008482:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8008484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008488:	429a      	cmp	r2, r3
 800848a:	d3d3      	bcc.n	8008434 <tu_edpt_bind_driver+0x24>
  }
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	3734      	adds	r7, #52	; 0x34
 8008492:	46bd      	mov	sp, r7
 8008494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008498:	4770      	bx	lr

0800849a <memset>:
 800849a:	4402      	add	r2, r0
 800849c:	4603      	mov	r3, r0
 800849e:	4293      	cmp	r3, r2
 80084a0:	d100      	bne.n	80084a4 <memset+0xa>
 80084a2:	4770      	bx	lr
 80084a4:	f803 1b01 	strb.w	r1, [r3], #1
 80084a8:	e7f9      	b.n	800849e <memset+0x4>
	...

080084ac <__libc_init_array>:
 80084ac:	b570      	push	{r4, r5, r6, lr}
 80084ae:	4d0d      	ldr	r5, [pc, #52]	; (80084e4 <__libc_init_array+0x38>)
 80084b0:	4c0d      	ldr	r4, [pc, #52]	; (80084e8 <__libc_init_array+0x3c>)
 80084b2:	1b64      	subs	r4, r4, r5
 80084b4:	10a4      	asrs	r4, r4, #2
 80084b6:	2600      	movs	r6, #0
 80084b8:	42a6      	cmp	r6, r4
 80084ba:	d109      	bne.n	80084d0 <__libc_init_array+0x24>
 80084bc:	4d0b      	ldr	r5, [pc, #44]	; (80084ec <__libc_init_array+0x40>)
 80084be:	4c0c      	ldr	r4, [pc, #48]	; (80084f0 <__libc_init_array+0x44>)
 80084c0:	f000 f826 	bl	8008510 <_init>
 80084c4:	1b64      	subs	r4, r4, r5
 80084c6:	10a4      	asrs	r4, r4, #2
 80084c8:	2600      	movs	r6, #0
 80084ca:	42a6      	cmp	r6, r4
 80084cc:	d105      	bne.n	80084da <__libc_init_array+0x2e>
 80084ce:	bd70      	pop	{r4, r5, r6, pc}
 80084d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80084d4:	4798      	blx	r3
 80084d6:	3601      	adds	r6, #1
 80084d8:	e7ee      	b.n	80084b8 <__libc_init_array+0xc>
 80084da:	f855 3b04 	ldr.w	r3, [r5], #4
 80084de:	4798      	blx	r3
 80084e0:	3601      	adds	r6, #1
 80084e2:	e7f2      	b.n	80084ca <__libc_init_array+0x1e>
 80084e4:	080087d8 	.word	0x080087d8
 80084e8:	080087d8 	.word	0x080087d8
 80084ec:	080087d8 	.word	0x080087d8
 80084f0:	080087dc 	.word	0x080087dc

080084f4 <memcpy>:
 80084f4:	440a      	add	r2, r1
 80084f6:	4291      	cmp	r1, r2
 80084f8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084fc:	d100      	bne.n	8008500 <memcpy+0xc>
 80084fe:	4770      	bx	lr
 8008500:	b510      	push	{r4, lr}
 8008502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800850a:	4291      	cmp	r1, r2
 800850c:	d1f9      	bne.n	8008502 <memcpy+0xe>
 800850e:	bd10      	pop	{r4, pc}

08008510 <_init>:
 8008510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008512:	bf00      	nop
 8008514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008516:	bc08      	pop	{r3}
 8008518:	469e      	mov	lr, r3
 800851a:	4770      	bx	lr

0800851c <_fini>:
 800851c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851e:	bf00      	nop
 8008520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008522:	bc08      	pop	{r3}
 8008524:	469e      	mov	lr, r3
 8008526:	4770      	bx	lr
