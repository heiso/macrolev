
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008520  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b0  080086b8  080086b8  000186b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008968  08008968  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08008968  08008968  00018968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008970  08008970  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008970  08008970  00018970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008974  08008974  00018974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08008978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001558  2000002c  080089a4  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001584  080089a4  00021584  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012dcd  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003292  00000000  00000000  00032e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  00036100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000aa9  00000000  00000000  00036e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b88e  00000000  00000000  00037931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011220  00000000  00000000  000531bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000abcfa  00000000  00000000  000643df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038fc  00000000  00000000  001100dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  001139d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000002c 	.word	0x2000002c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080086a0 	.word	0x080086a0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000030 	.word	0x20000030
 80001d4:	080086a0 	.word	0x080086a0

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_dmul>:
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001f6:	bf1d      	ittte	ne
 80001f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001fc:	ea94 0f0c 	teqne	r4, ip
 8000200:	ea95 0f0c 	teqne	r5, ip
 8000204:	f000 f8de 	bleq	80003c4 <__aeabi_dmul+0x1dc>
 8000208:	442c      	add	r4, r5
 800020a:	ea81 0603 	eor.w	r6, r1, r3
 800020e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000212:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000216:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800021a:	bf18      	it	ne
 800021c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000224:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000228:	d038      	beq.n	800029c <__aeabi_dmul+0xb4>
 800022a:	fba0 ce02 	umull	ip, lr, r0, r2
 800022e:	f04f 0500 	mov.w	r5, #0
 8000232:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000236:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800023a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800023e:	f04f 0600 	mov.w	r6, #0
 8000242:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000246:	f09c 0f00 	teq	ip, #0
 800024a:	bf18      	it	ne
 800024c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000250:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000254:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000258:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800025c:	d204      	bcs.n	8000268 <__aeabi_dmul+0x80>
 800025e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000262:	416d      	adcs	r5, r5
 8000264:	eb46 0606 	adc.w	r6, r6, r6
 8000268:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800026c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000270:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000274:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000278:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800027c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000280:	bf88      	it	hi
 8000282:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000286:	d81e      	bhi.n	80002c6 <__aeabi_dmul+0xde>
 8000288:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	bd70      	pop	{r4, r5, r6, pc}
 800029c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a0:	ea46 0101 	orr.w	r1, r6, r1
 80002a4:	ea40 0002 	orr.w	r0, r0, r2
 80002a8:	ea81 0103 	eor.w	r1, r1, r3
 80002ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b0:	bfc2      	ittt	gt
 80002b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ba:	bd70      	popgt	{r4, r5, r6, pc}
 80002bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c0:	f04f 0e00 	mov.w	lr, #0
 80002c4:	3c01      	subs	r4, #1
 80002c6:	f300 80ab 	bgt.w	8000420 <__aeabi_dmul+0x238>
 80002ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ce:	bfde      	ittt	le
 80002d0:	2000      	movle	r0, #0
 80002d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002d6:	bd70      	pople	{r4, r5, r6, pc}
 80002d8:	f1c4 0400 	rsb	r4, r4, #0
 80002dc:	3c20      	subs	r4, #32
 80002de:	da35      	bge.n	800034c <__aeabi_dmul+0x164>
 80002e0:	340c      	adds	r4, #12
 80002e2:	dc1b      	bgt.n	800031c <__aeabi_dmul+0x134>
 80002e4:	f104 0414 	add.w	r4, r4, #20
 80002e8:	f1c4 0520 	rsb	r5, r4, #32
 80002ec:	fa00 f305 	lsl.w	r3, r0, r5
 80002f0:	fa20 f004 	lsr.w	r0, r0, r4
 80002f4:	fa01 f205 	lsl.w	r2, r1, r5
 80002f8:	ea40 0002 	orr.w	r0, r0, r2
 80002fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000300:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000304:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000308:	fa21 f604 	lsr.w	r6, r1, r4
 800030c:	eb42 0106 	adc.w	r1, r2, r6
 8000310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000314:	bf08      	it	eq
 8000316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800031a:	bd70      	pop	{r4, r5, r6, pc}
 800031c:	f1c4 040c 	rsb	r4, r4, #12
 8000320:	f1c4 0520 	rsb	r5, r4, #32
 8000324:	fa00 f304 	lsl.w	r3, r0, r4
 8000328:	fa20 f005 	lsr.w	r0, r0, r5
 800032c:	fa01 f204 	lsl.w	r2, r1, r4
 8000330:	ea40 0002 	orr.w	r0, r0, r2
 8000334:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000338:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 0520 	rsb	r5, r4, #32
 8000350:	fa00 f205 	lsl.w	r2, r0, r5
 8000354:	ea4e 0e02 	orr.w	lr, lr, r2
 8000358:	fa20 f304 	lsr.w	r3, r0, r4
 800035c:	fa01 f205 	lsl.w	r2, r1, r5
 8000360:	ea43 0302 	orr.w	r3, r3, r2
 8000364:	fa21 f004 	lsr.w	r0, r1, r4
 8000368:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800036c:	fa21 f204 	lsr.w	r2, r1, r4
 8000370:	ea20 0002 	bic.w	r0, r0, r2
 8000374:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000378:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800037c:	bf08      	it	eq
 800037e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000382:	bd70      	pop	{r4, r5, r6, pc}
 8000384:	f094 0f00 	teq	r4, #0
 8000388:	d10f      	bne.n	80003aa <__aeabi_dmul+0x1c2>
 800038a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800038e:	0040      	lsls	r0, r0, #1
 8000390:	eb41 0101 	adc.w	r1, r1, r1
 8000394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3c01      	subeq	r4, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1a6>
 800039e:	ea41 0106 	orr.w	r1, r1, r6
 80003a2:	f095 0f00 	teq	r5, #0
 80003a6:	bf18      	it	ne
 80003a8:	4770      	bxne	lr
 80003aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ae:	0052      	lsls	r2, r2, #1
 80003b0:	eb43 0303 	adc.w	r3, r3, r3
 80003b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003b8:	bf08      	it	eq
 80003ba:	3d01      	subeq	r5, #1
 80003bc:	d0f7      	beq.n	80003ae <__aeabi_dmul+0x1c6>
 80003be:	ea43 0306 	orr.w	r3, r3, r6
 80003c2:	4770      	bx	lr
 80003c4:	ea94 0f0c 	teq	r4, ip
 80003c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003cc:	bf18      	it	ne
 80003ce:	ea95 0f0c 	teqne	r5, ip
 80003d2:	d00c      	beq.n	80003ee <__aeabi_dmul+0x206>
 80003d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d8:	bf18      	it	ne
 80003da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003de:	d1d1      	bne.n	8000384 <__aeabi_dmul+0x19c>
 80003e0:	ea81 0103 	eor.w	r1, r1, r3
 80003e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003f2:	bf06      	itte	eq
 80003f4:	4610      	moveq	r0, r2
 80003f6:	4619      	moveq	r1, r3
 80003f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003fc:	d019      	beq.n	8000432 <__aeabi_dmul+0x24a>
 80003fe:	ea94 0f0c 	teq	r4, ip
 8000402:	d102      	bne.n	800040a <__aeabi_dmul+0x222>
 8000404:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000408:	d113      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800040a:	ea95 0f0c 	teq	r5, ip
 800040e:	d105      	bne.n	800041c <__aeabi_dmul+0x234>
 8000410:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000414:	bf1c      	itt	ne
 8000416:	4610      	movne	r0, r2
 8000418:	4619      	movne	r1, r3
 800041a:	d10a      	bne.n	8000432 <__aeabi_dmul+0x24a>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd70      	pop	{r4, r5, r6, pc}
 8000432:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000436:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800043a:	bd70      	pop	{r4, r5, r6, pc}

0800043c <__aeabi_drsub>:
 800043c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000440:	e002      	b.n	8000448 <__adddf3>
 8000442:	bf00      	nop

08000444 <__aeabi_dsub>:
 8000444:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000448 <__adddf3>:
 8000448:	b530      	push	{r4, r5, lr}
 800044a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800044e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000452:	ea94 0f05 	teq	r4, r5
 8000456:	bf08      	it	eq
 8000458:	ea90 0f02 	teqeq	r0, r2
 800045c:	bf1f      	itttt	ne
 800045e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000462:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000466:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800046a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800046e:	f000 80e2 	beq.w	8000636 <__adddf3+0x1ee>
 8000472:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000476:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800047a:	bfb8      	it	lt
 800047c:	426d      	neglt	r5, r5
 800047e:	dd0c      	ble.n	800049a <__adddf3+0x52>
 8000480:	442c      	add	r4, r5
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	ea82 0000 	eor.w	r0, r2, r0
 800048e:	ea83 0101 	eor.w	r1, r3, r1
 8000492:	ea80 0202 	eor.w	r2, r0, r2
 8000496:	ea81 0303 	eor.w	r3, r1, r3
 800049a:	2d36      	cmp	r5, #54	; 0x36
 800049c:	bf88      	it	hi
 800049e:	bd30      	pophi	{r4, r5, pc}
 80004a0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004a8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004ac:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b0:	d002      	beq.n	80004b8 <__adddf3+0x70>
 80004b2:	4240      	negs	r0, r0
 80004b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004b8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004bc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004c4:	d002      	beq.n	80004cc <__adddf3+0x84>
 80004c6:	4252      	negs	r2, r2
 80004c8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004cc:	ea94 0f05 	teq	r4, r5
 80004d0:	f000 80a7 	beq.w	8000622 <__adddf3+0x1da>
 80004d4:	f1a4 0401 	sub.w	r4, r4, #1
 80004d8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004dc:	db0d      	blt.n	80004fa <__adddf3+0xb2>
 80004de:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004e2:	fa22 f205 	lsr.w	r2, r2, r5
 80004e6:	1880      	adds	r0, r0, r2
 80004e8:	f141 0100 	adc.w	r1, r1, #0
 80004ec:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f0:	1880      	adds	r0, r0, r2
 80004f2:	fa43 f305 	asr.w	r3, r3, r5
 80004f6:	4159      	adcs	r1, r3
 80004f8:	e00e      	b.n	8000518 <__adddf3+0xd0>
 80004fa:	f1a5 0520 	sub.w	r5, r5, #32
 80004fe:	f10e 0e20 	add.w	lr, lr, #32
 8000502:	2a01      	cmp	r2, #1
 8000504:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000508:	bf28      	it	cs
 800050a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800050e:	fa43 f305 	asr.w	r3, r3, r5
 8000512:	18c0      	adds	r0, r0, r3
 8000514:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	d507      	bpl.n	800052e <__adddf3+0xe6>
 800051e:	f04f 0e00 	mov.w	lr, #0
 8000522:	f1dc 0c00 	rsbs	ip, ip, #0
 8000526:	eb7e 0000 	sbcs.w	r0, lr, r0
 800052a:	eb6e 0101 	sbc.w	r1, lr, r1
 800052e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000532:	d31b      	bcc.n	800056c <__adddf3+0x124>
 8000534:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000538:	d30c      	bcc.n	8000554 <__adddf3+0x10c>
 800053a:	0849      	lsrs	r1, r1, #1
 800053c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000540:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000544:	f104 0401 	add.w	r4, r4, #1
 8000548:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800054c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000550:	f080 809a 	bcs.w	8000688 <__adddf3+0x240>
 8000554:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000558:	bf08      	it	eq
 800055a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800055e:	f150 0000 	adcs.w	r0, r0, #0
 8000562:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000566:	ea41 0105 	orr.w	r1, r1, r5
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000570:	4140      	adcs	r0, r0
 8000572:	eb41 0101 	adc.w	r1, r1, r1
 8000576:	3c01      	subs	r4, #1
 8000578:	bf28      	it	cs
 800057a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800057e:	d2e9      	bcs.n	8000554 <__adddf3+0x10c>
 8000580:	f091 0f00 	teq	r1, #0
 8000584:	bf04      	itt	eq
 8000586:	4601      	moveq	r1, r0
 8000588:	2000      	moveq	r0, #0
 800058a:	fab1 f381 	clz	r3, r1
 800058e:	bf08      	it	eq
 8000590:	3320      	addeq	r3, #32
 8000592:	f1a3 030b 	sub.w	r3, r3, #11
 8000596:	f1b3 0220 	subs.w	r2, r3, #32
 800059a:	da0c      	bge.n	80005b6 <__adddf3+0x16e>
 800059c:	320c      	adds	r2, #12
 800059e:	dd08      	ble.n	80005b2 <__adddf3+0x16a>
 80005a0:	f102 0c14 	add.w	ip, r2, #20
 80005a4:	f1c2 020c 	rsb	r2, r2, #12
 80005a8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005ac:	fa21 f102 	lsr.w	r1, r1, r2
 80005b0:	e00c      	b.n	80005cc <__adddf3+0x184>
 80005b2:	f102 0214 	add.w	r2, r2, #20
 80005b6:	bfd8      	it	le
 80005b8:	f1c2 0c20 	rsble	ip, r2, #32
 80005bc:	fa01 f102 	lsl.w	r1, r1, r2
 80005c0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005c4:	bfdc      	itt	le
 80005c6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ca:	4090      	lslle	r0, r2
 80005cc:	1ae4      	subs	r4, r4, r3
 80005ce:	bfa2      	ittt	ge
 80005d0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005d4:	4329      	orrge	r1, r5
 80005d6:	bd30      	popge	{r4, r5, pc}
 80005d8:	ea6f 0404 	mvn.w	r4, r4
 80005dc:	3c1f      	subs	r4, #31
 80005de:	da1c      	bge.n	800061a <__adddf3+0x1d2>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc0e      	bgt.n	8000602 <__adddf3+0x1ba>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0220 	rsb	r2, r4, #32
 80005ec:	fa20 f004 	lsr.w	r0, r0, r4
 80005f0:	fa01 f302 	lsl.w	r3, r1, r2
 80005f4:	ea40 0003 	orr.w	r0, r0, r3
 80005f8:	fa21 f304 	lsr.w	r3, r1, r4
 80005fc:	ea45 0103 	orr.w	r1, r5, r3
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f1c4 040c 	rsb	r4, r4, #12
 8000606:	f1c4 0220 	rsb	r2, r4, #32
 800060a:	fa20 f002 	lsr.w	r0, r0, r2
 800060e:	fa01 f304 	lsl.w	r3, r1, r4
 8000612:	ea40 0003 	orr.w	r0, r0, r3
 8000616:	4629      	mov	r1, r5
 8000618:	bd30      	pop	{r4, r5, pc}
 800061a:	fa21 f004 	lsr.w	r0, r1, r4
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	f094 0f00 	teq	r4, #0
 8000626:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800062a:	bf06      	itte	eq
 800062c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000630:	3401      	addeq	r4, #1
 8000632:	3d01      	subne	r5, #1
 8000634:	e74e      	b.n	80004d4 <__adddf3+0x8c>
 8000636:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063a:	bf18      	it	ne
 800063c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000640:	d029      	beq.n	8000696 <__adddf3+0x24e>
 8000642:	ea94 0f05 	teq	r4, r5
 8000646:	bf08      	it	eq
 8000648:	ea90 0f02 	teqeq	r0, r2
 800064c:	d005      	beq.n	800065a <__adddf3+0x212>
 800064e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000652:	bf04      	itt	eq
 8000654:	4619      	moveq	r1, r3
 8000656:	4610      	moveq	r0, r2
 8000658:	bd30      	pop	{r4, r5, pc}
 800065a:	ea91 0f03 	teq	r1, r3
 800065e:	bf1e      	ittt	ne
 8000660:	2100      	movne	r1, #0
 8000662:	2000      	movne	r0, #0
 8000664:	bd30      	popne	{r4, r5, pc}
 8000666:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800066a:	d105      	bne.n	8000678 <__adddf3+0x230>
 800066c:	0040      	lsls	r0, r0, #1
 800066e:	4149      	adcs	r1, r1
 8000670:	bf28      	it	cs
 8000672:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000676:	bd30      	pop	{r4, r5, pc}
 8000678:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800067c:	bf3c      	itt	cc
 800067e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000682:	bd30      	popcc	{r4, r5, pc}
 8000684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000688:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800068c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000690:	f04f 0000 	mov.w	r0, #0
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800069a:	bf1a      	itte	ne
 800069c:	4619      	movne	r1, r3
 800069e:	4610      	movne	r0, r2
 80006a0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006a4:	bf1c      	itt	ne
 80006a6:	460b      	movne	r3, r1
 80006a8:	4602      	movne	r2, r0
 80006aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ae:	bf06      	itte	eq
 80006b0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006b4:	ea91 0f03 	teqeq	r1, r3
 80006b8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006bc:	bd30      	pop	{r4, r5, pc}
 80006be:	bf00      	nop

080006c0 <__aeabi_ui2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f04f 0500 	mov.w	r5, #0
 80006d8:	f04f 0100 	mov.w	r1, #0
 80006dc:	e750      	b.n	8000580 <__adddf3+0x138>
 80006de:	bf00      	nop

080006e0 <__aeabi_i2d>:
 80006e0:	f090 0f00 	teq	r0, #0
 80006e4:	bf04      	itt	eq
 80006e6:	2100      	moveq	r1, #0
 80006e8:	4770      	bxeq	lr
 80006ea:	b530      	push	{r4, r5, lr}
 80006ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006f4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006f8:	bf48      	it	mi
 80006fa:	4240      	negmi	r0, r0
 80006fc:	f04f 0100 	mov.w	r1, #0
 8000700:	e73e      	b.n	8000580 <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_f2d>:
 8000704:	0042      	lsls	r2, r0, #1
 8000706:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800070a:	ea4f 0131 	mov.w	r1, r1, rrx
 800070e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000712:	bf1f      	itttt	ne
 8000714:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000718:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800071c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000720:	4770      	bxne	lr
 8000722:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000726:	bf08      	it	eq
 8000728:	4770      	bxeq	lr
 800072a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800072e:	bf04      	itt	eq
 8000730:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000734:	4770      	bxeq	lr
 8000736:	b530      	push	{r4, r5, lr}
 8000738:	f44f 7460 	mov.w	r4, #896	; 0x380
 800073c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	e71c      	b.n	8000580 <__adddf3+0x138>
 8000746:	bf00      	nop

08000748 <__aeabi_ul2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f04f 0500 	mov.w	r5, #0
 8000756:	e00a      	b.n	800076e <__aeabi_l2d+0x16>

08000758 <__aeabi_l2d>:
 8000758:	ea50 0201 	orrs.w	r2, r0, r1
 800075c:	bf08      	it	eq
 800075e:	4770      	bxeq	lr
 8000760:	b530      	push	{r4, r5, lr}
 8000762:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000766:	d502      	bpl.n	800076e <__aeabi_l2d+0x16>
 8000768:	4240      	negs	r0, r0
 800076a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800076e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000772:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000776:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800077a:	f43f aed8 	beq.w	800052e <__adddf3+0xe6>
 800077e:	f04f 0203 	mov.w	r2, #3
 8000782:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000786:	bf18      	it	ne
 8000788:	3203      	addne	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000796:	f1c2 0320 	rsb	r3, r2, #32
 800079a:	fa00 fc03 	lsl.w	ip, r0, r3
 800079e:	fa20 f002 	lsr.w	r0, r0, r2
 80007a2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007a6:	ea40 000e 	orr.w	r0, r0, lr
 80007aa:	fa21 f102 	lsr.w	r1, r1, r2
 80007ae:	4414      	add	r4, r2
 80007b0:	e6bd      	b.n	800052e <__adddf3+0xe6>
 80007b2:	bf00      	nop

080007b4 <__aeabi_d2uiz>:
 80007b4:	004a      	lsls	r2, r1, #1
 80007b6:	d211      	bcs.n	80007dc <__aeabi_d2uiz+0x28>
 80007b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007bc:	d211      	bcs.n	80007e2 <__aeabi_d2uiz+0x2e>
 80007be:	d50d      	bpl.n	80007dc <__aeabi_d2uiz+0x28>
 80007c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007c8:	d40e      	bmi.n	80007e8 <__aeabi_d2uiz+0x34>
 80007ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007d6:	fa23 f002 	lsr.w	r0, r3, r2
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007e6:	d102      	bne.n	80007ee <__aeabi_d2uiz+0x3a>
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007ec:	4770      	bx	lr
 80007ee:	f04f 0000 	mov.w	r0, #0
 80007f2:	4770      	bx	lr

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000804:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000808:	f000 b970 	b.w	8000aec <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9e08      	ldr	r6, [sp, #32]
 800082a:	460d      	mov	r5, r1
 800082c:	4604      	mov	r4, r0
 800082e:	460f      	mov	r7, r1
 8000830:	2b00      	cmp	r3, #0
 8000832:	d14a      	bne.n	80008ca <__udivmoddi4+0xa6>
 8000834:	428a      	cmp	r2, r1
 8000836:	4694      	mov	ip, r2
 8000838:	d965      	bls.n	8000906 <__udivmoddi4+0xe2>
 800083a:	fab2 f382 	clz	r3, r2
 800083e:	b143      	cbz	r3, 8000852 <__udivmoddi4+0x2e>
 8000840:	fa02 fc03 	lsl.w	ip, r2, r3
 8000844:	f1c3 0220 	rsb	r2, r3, #32
 8000848:	409f      	lsls	r7, r3
 800084a:	fa20 f202 	lsr.w	r2, r0, r2
 800084e:	4317      	orrs	r7, r2
 8000850:	409c      	lsls	r4, r3
 8000852:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000856:	fa1f f58c 	uxth.w	r5, ip
 800085a:	fbb7 f1fe 	udiv	r1, r7, lr
 800085e:	0c22      	lsrs	r2, r4, #16
 8000860:	fb0e 7711 	mls	r7, lr, r1, r7
 8000864:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000868:	fb01 f005 	mul.w	r0, r1, r5
 800086c:	4290      	cmp	r0, r2
 800086e:	d90a      	bls.n	8000886 <__udivmoddi4+0x62>
 8000870:	eb1c 0202 	adds.w	r2, ip, r2
 8000874:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000878:	f080 811c 	bcs.w	8000ab4 <__udivmoddi4+0x290>
 800087c:	4290      	cmp	r0, r2
 800087e:	f240 8119 	bls.w	8000ab4 <__udivmoddi4+0x290>
 8000882:	3902      	subs	r1, #2
 8000884:	4462      	add	r2, ip
 8000886:	1a12      	subs	r2, r2, r0
 8000888:	b2a4      	uxth	r4, r4
 800088a:	fbb2 f0fe 	udiv	r0, r2, lr
 800088e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000892:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000896:	fb00 f505 	mul.w	r5, r0, r5
 800089a:	42a5      	cmp	r5, r4
 800089c:	d90a      	bls.n	80008b4 <__udivmoddi4+0x90>
 800089e:	eb1c 0404 	adds.w	r4, ip, r4
 80008a2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80008a6:	f080 8107 	bcs.w	8000ab8 <__udivmoddi4+0x294>
 80008aa:	42a5      	cmp	r5, r4
 80008ac:	f240 8104 	bls.w	8000ab8 <__udivmoddi4+0x294>
 80008b0:	4464      	add	r4, ip
 80008b2:	3802      	subs	r0, #2
 80008b4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80008b8:	1b64      	subs	r4, r4, r5
 80008ba:	2100      	movs	r1, #0
 80008bc:	b11e      	cbz	r6, 80008c6 <__udivmoddi4+0xa2>
 80008be:	40dc      	lsrs	r4, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	e9c6 4300 	strd	r4, r3, [r6]
 80008c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ca:	428b      	cmp	r3, r1
 80008cc:	d908      	bls.n	80008e0 <__udivmoddi4+0xbc>
 80008ce:	2e00      	cmp	r6, #0
 80008d0:	f000 80ed 	beq.w	8000aae <__udivmoddi4+0x28a>
 80008d4:	2100      	movs	r1, #0
 80008d6:	e9c6 0500 	strd	r0, r5, [r6]
 80008da:	4608      	mov	r0, r1
 80008dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e0:	fab3 f183 	clz	r1, r3
 80008e4:	2900      	cmp	r1, #0
 80008e6:	d149      	bne.n	800097c <__udivmoddi4+0x158>
 80008e8:	42ab      	cmp	r3, r5
 80008ea:	d302      	bcc.n	80008f2 <__udivmoddi4+0xce>
 80008ec:	4282      	cmp	r2, r0
 80008ee:	f200 80f8 	bhi.w	8000ae2 <__udivmoddi4+0x2be>
 80008f2:	1a84      	subs	r4, r0, r2
 80008f4:	eb65 0203 	sbc.w	r2, r5, r3
 80008f8:	2001      	movs	r0, #1
 80008fa:	4617      	mov	r7, r2
 80008fc:	2e00      	cmp	r6, #0
 80008fe:	d0e2      	beq.n	80008c6 <__udivmoddi4+0xa2>
 8000900:	e9c6 4700 	strd	r4, r7, [r6]
 8000904:	e7df      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000906:	b902      	cbnz	r2, 800090a <__udivmoddi4+0xe6>
 8000908:	deff      	udf	#255	; 0xff
 800090a:	fab2 f382 	clz	r3, r2
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 8090 	bne.w	8000a34 <__udivmoddi4+0x210>
 8000914:	1a8a      	subs	r2, r1, r2
 8000916:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800091a:	fa1f fe8c 	uxth.w	lr, ip
 800091e:	2101      	movs	r1, #1
 8000920:	fbb2 f5f7 	udiv	r5, r2, r7
 8000924:	fb07 2015 	mls	r0, r7, r5, r2
 8000928:	0c22      	lsrs	r2, r4, #16
 800092a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800092e:	fb0e f005 	mul.w	r0, lr, r5
 8000932:	4290      	cmp	r0, r2
 8000934:	d908      	bls.n	8000948 <__udivmoddi4+0x124>
 8000936:	eb1c 0202 	adds.w	r2, ip, r2
 800093a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800093e:	d202      	bcs.n	8000946 <__udivmoddi4+0x122>
 8000940:	4290      	cmp	r0, r2
 8000942:	f200 80cb 	bhi.w	8000adc <__udivmoddi4+0x2b8>
 8000946:	4645      	mov	r5, r8
 8000948:	1a12      	subs	r2, r2, r0
 800094a:	b2a4      	uxth	r4, r4
 800094c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000950:	fb07 2210 	mls	r2, r7, r0, r2
 8000954:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000958:	fb0e fe00 	mul.w	lr, lr, r0
 800095c:	45a6      	cmp	lr, r4
 800095e:	d908      	bls.n	8000972 <__udivmoddi4+0x14e>
 8000960:	eb1c 0404 	adds.w	r4, ip, r4
 8000964:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000968:	d202      	bcs.n	8000970 <__udivmoddi4+0x14c>
 800096a:	45a6      	cmp	lr, r4
 800096c:	f200 80bb 	bhi.w	8000ae6 <__udivmoddi4+0x2c2>
 8000970:	4610      	mov	r0, r2
 8000972:	eba4 040e 	sub.w	r4, r4, lr
 8000976:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800097a:	e79f      	b.n	80008bc <__udivmoddi4+0x98>
 800097c:	f1c1 0720 	rsb	r7, r1, #32
 8000980:	408b      	lsls	r3, r1
 8000982:	fa22 fc07 	lsr.w	ip, r2, r7
 8000986:	ea4c 0c03 	orr.w	ip, ip, r3
 800098a:	fa05 f401 	lsl.w	r4, r5, r1
 800098e:	fa20 f307 	lsr.w	r3, r0, r7
 8000992:	40fd      	lsrs	r5, r7
 8000994:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000998:	4323      	orrs	r3, r4
 800099a:	fbb5 f8f9 	udiv	r8, r5, r9
 800099e:	fa1f fe8c 	uxth.w	lr, ip
 80009a2:	fb09 5518 	mls	r5, r9, r8, r5
 80009a6:	0c1c      	lsrs	r4, r3, #16
 80009a8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80009ac:	fb08 f50e 	mul.w	r5, r8, lr
 80009b0:	42a5      	cmp	r5, r4
 80009b2:	fa02 f201 	lsl.w	r2, r2, r1
 80009b6:	fa00 f001 	lsl.w	r0, r0, r1
 80009ba:	d90b      	bls.n	80009d4 <__udivmoddi4+0x1b0>
 80009bc:	eb1c 0404 	adds.w	r4, ip, r4
 80009c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80009c4:	f080 8088 	bcs.w	8000ad8 <__udivmoddi4+0x2b4>
 80009c8:	42a5      	cmp	r5, r4
 80009ca:	f240 8085 	bls.w	8000ad8 <__udivmoddi4+0x2b4>
 80009ce:	f1a8 0802 	sub.w	r8, r8, #2
 80009d2:	4464      	add	r4, ip
 80009d4:	1b64      	subs	r4, r4, r5
 80009d6:	b29d      	uxth	r5, r3
 80009d8:	fbb4 f3f9 	udiv	r3, r4, r9
 80009dc:	fb09 4413 	mls	r4, r9, r3, r4
 80009e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80009e4:	fb03 fe0e 	mul.w	lr, r3, lr
 80009e8:	45a6      	cmp	lr, r4
 80009ea:	d908      	bls.n	80009fe <__udivmoddi4+0x1da>
 80009ec:	eb1c 0404 	adds.w	r4, ip, r4
 80009f0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80009f4:	d26c      	bcs.n	8000ad0 <__udivmoddi4+0x2ac>
 80009f6:	45a6      	cmp	lr, r4
 80009f8:	d96a      	bls.n	8000ad0 <__udivmoddi4+0x2ac>
 80009fa:	3b02      	subs	r3, #2
 80009fc:	4464      	add	r4, ip
 80009fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a02:	fba3 9502 	umull	r9, r5, r3, r2
 8000a06:	eba4 040e 	sub.w	r4, r4, lr
 8000a0a:	42ac      	cmp	r4, r5
 8000a0c:	46c8      	mov	r8, r9
 8000a0e:	46ae      	mov	lr, r5
 8000a10:	d356      	bcc.n	8000ac0 <__udivmoddi4+0x29c>
 8000a12:	d053      	beq.n	8000abc <__udivmoddi4+0x298>
 8000a14:	b156      	cbz	r6, 8000a2c <__udivmoddi4+0x208>
 8000a16:	ebb0 0208 	subs.w	r2, r0, r8
 8000a1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000a1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000a22:	40ca      	lsrs	r2, r1
 8000a24:	40cc      	lsrs	r4, r1
 8000a26:	4317      	orrs	r7, r2
 8000a28:	e9c6 7400 	strd	r7, r4, [r6]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	2100      	movs	r1, #0
 8000a30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a34:	f1c3 0120 	rsb	r1, r3, #32
 8000a38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000a40:	fa25 f101 	lsr.w	r1, r5, r1
 8000a44:	409d      	lsls	r5, r3
 8000a46:	432a      	orrs	r2, r5
 8000a48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a4c:	fa1f fe8c 	uxth.w	lr, ip
 8000a50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a54:	fb07 1510 	mls	r5, r7, r0, r1
 8000a58:	0c11      	lsrs	r1, r2, #16
 8000a5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000a5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000a62:	428d      	cmp	r5, r1
 8000a64:	fa04 f403 	lsl.w	r4, r4, r3
 8000a68:	d908      	bls.n	8000a7c <__udivmoddi4+0x258>
 8000a6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000a6e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000a72:	d22f      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a74:	428d      	cmp	r5, r1
 8000a76:	d92d      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000a78:	3802      	subs	r0, #2
 8000a7a:	4461      	add	r1, ip
 8000a7c:	1b49      	subs	r1, r1, r5
 8000a7e:	b292      	uxth	r2, r2
 8000a80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000a84:	fb07 1115 	mls	r1, r7, r5, r1
 8000a88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000a90:	4291      	cmp	r1, r2
 8000a92:	d908      	bls.n	8000aa6 <__udivmoddi4+0x282>
 8000a94:	eb1c 0202 	adds.w	r2, ip, r2
 8000a98:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000a9c:	d216      	bcs.n	8000acc <__udivmoddi4+0x2a8>
 8000a9e:	4291      	cmp	r1, r2
 8000aa0:	d914      	bls.n	8000acc <__udivmoddi4+0x2a8>
 8000aa2:	3d02      	subs	r5, #2
 8000aa4:	4462      	add	r2, ip
 8000aa6:	1a52      	subs	r2, r2, r1
 8000aa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000aac:	e738      	b.n	8000920 <__udivmoddi4+0xfc>
 8000aae:	4631      	mov	r1, r6
 8000ab0:	4630      	mov	r0, r6
 8000ab2:	e708      	b.n	80008c6 <__udivmoddi4+0xa2>
 8000ab4:	4639      	mov	r1, r7
 8000ab6:	e6e6      	b.n	8000886 <__udivmoddi4+0x62>
 8000ab8:	4610      	mov	r0, r2
 8000aba:	e6fb      	b.n	80008b4 <__udivmoddi4+0x90>
 8000abc:	4548      	cmp	r0, r9
 8000abe:	d2a9      	bcs.n	8000a14 <__udivmoddi4+0x1f0>
 8000ac0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ac4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ac8:	3b01      	subs	r3, #1
 8000aca:	e7a3      	b.n	8000a14 <__udivmoddi4+0x1f0>
 8000acc:	4645      	mov	r5, r8
 8000ace:	e7ea      	b.n	8000aa6 <__udivmoddi4+0x282>
 8000ad0:	462b      	mov	r3, r5
 8000ad2:	e794      	b.n	80009fe <__udivmoddi4+0x1da>
 8000ad4:	4640      	mov	r0, r8
 8000ad6:	e7d1      	b.n	8000a7c <__udivmoddi4+0x258>
 8000ad8:	46d0      	mov	r8, sl
 8000ada:	e77b      	b.n	80009d4 <__udivmoddi4+0x1b0>
 8000adc:	3d02      	subs	r5, #2
 8000ade:	4462      	add	r2, ip
 8000ae0:	e732      	b.n	8000948 <__udivmoddi4+0x124>
 8000ae2:	4608      	mov	r0, r1
 8000ae4:	e70a      	b.n	80008fc <__udivmoddi4+0xd8>
 8000ae6:	4464      	add	r4, ip
 8000ae8:	3802      	subs	r0, #2
 8000aea:	e742      	b.n	8000972 <__udivmoddi4+0x14e>

08000aec <__aeabi_idiv0>:
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <tud_hid_ready>:

//--------------------------------------------------------------------+
// Inline Functions
//--------------------------------------------------------------------+
static inline bool tud_hid_ready(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  return tud_hid_n_ready(0);
 8000af4:	2000      	movs	r0, #0
 8000af6:	f003 f82b 	bl	8003b50 <tud_hid_n_ready>
 8000afa:	4603      	mov	r3, r0
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <tud_hid_keyboard_report>:
{
  return tud_hid_n_report(0, report_id, report, len);
}

static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, uint8_t keycode[6])
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	4603      	mov	r3, r0
 8000b08:	603a      	str	r2, [r7, #0]
 8000b0a:	71fb      	strb	r3, [r7, #7]
 8000b0c:	460b      	mov	r3, r1
 8000b0e:	71bb      	strb	r3, [r7, #6]
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000b10:	79ba      	ldrb	r2, [r7, #6]
 8000b12:	79f9      	ldrb	r1, [r7, #7]
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	2000      	movs	r0, #0
 8000b18:	f003 f8d4 	bl	8003cc4 <tud_hid_n_keyboard_report>
 8000b1c:	4603      	mov	r3, r0
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b2c:	f001 f882 	bl	8001c34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b30:	f000 f848 	bl	8000bc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b34:	f000 f968 	bl	8000e08 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b38:	f000 f8ac 	bl	8000c94 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b3c:	f000 f936 	bl	8000dac <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_Delay(300);
 8000b40:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b44:	f001 f8e8 	bl	8001d18 <HAL_Delay>

  keys_init(25, 0, 0);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2100      	movs	r1, #0
 8000b4c:	2019      	movs	r0, #25
 8000b4e:	f000 fc0d 	bl	800136c <keys_init>

  tud_init(BOARD_TUD_RHPORT);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f004 f9b2 	bl	8004ebc <tud_init>
  can_send_report = 1;
 8000b58:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <main+0x8c>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	701a      	strb	r2, [r3, #0]
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 8000b5e:	2100      	movs	r1, #0
 8000b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b64:	f004 fac0 	bl	80050e8 <tud_task_ext>
}
 8000b68:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    tud_task();

    keys_loop();
 8000b6a:	f000 fb39 	bl	80011e0 <keys_loop>

    if (should_send_report && can_send_report && tud_hid_ready()) {
 8000b6e:	4b12      	ldr	r3, [pc, #72]	; (8000bb8 <main+0x90>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d0f3      	beq.n	8000b5e <main+0x36>
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <main+0x8c>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0ef      	beq.n	8000b5e <main+0x36>
 8000b7e:	f7ff ffb7 	bl	8000af0 <tud_hid_ready>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d0ea      	beq.n	8000b5e <main+0x36>
      if (tud_suspended()) {
 8000b88:	f004 f94e 	bl	8004e28 <tud_suspended>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <main+0x70>
        tud_remote_wakeup();
 8000b92:	f004 f95d 	bl	8004e50 <tud_remote_wakeup>
 8000b96:	e7e2      	b.n	8000b5e <main+0x36>
      } else {
        can_send_report = 0;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <main+0x8c>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
        should_send_report = 0;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <main+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(ITF_NUM_KEYBOARD, modifiers, keycodes);
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <main+0x94>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	4a05      	ldr	r2, [pc, #20]	; (8000bc0 <main+0x98>)
 8000baa:	4619      	mov	r1, r3
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff ffa7 	bl	8000b00 <tud_hid_keyboard_report>
    tud_task();
 8000bb2:	e7d4      	b.n	8000b5e <main+0x36>
 8000bb4:	20001335 	.word	0x20001335
 8000bb8:	20001334 	.word	0x20001334
 8000bbc:	20001336 	.word	0x20001336
 8000bc0:	20001338 	.word	0x20001338

08000bc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b094      	sub	sp, #80	; 0x50
 8000bc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bca:	f107 0320 	add.w	r3, r7, #32
 8000bce:	2230      	movs	r2, #48	; 0x30
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f007 fd29 	bl	800862a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bd8:	f107 030c 	add.w	r3, r7, #12
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
 8000be6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000be8:	2300      	movs	r3, #0
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <SystemClock_Config+0xc8>)
 8000bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf0:	4a26      	ldr	r2, [pc, #152]	; (8000c8c <SystemClock_Config+0xc8>)
 8000bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf8:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <SystemClock_Config+0xc8>)
 8000bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c00:	60bb      	str	r3, [r7, #8]
 8000c02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
 8000c08:	4b21      	ldr	r3, [pc, #132]	; (8000c90 <SystemClock_Config+0xcc>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a20      	ldr	r2, [pc, #128]	; (8000c90 <SystemClock_Config+0xcc>)
 8000c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c12:	6013      	str	r3, [r2, #0]
 8000c14:	4b1e      	ldr	r3, [pc, #120]	; (8000c90 <SystemClock_Config+0xcc>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c1c:	607b      	str	r3, [r7, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c20:	2301      	movs	r3, #1
 8000c22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000c34:	230d      	movs	r3, #13
 8000c36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000c38:	2378      	movs	r3, #120	; 0x78
 8000c3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c40:	2305      	movs	r3, #5
 8000c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000c44:	f107 0320 	add.w	r3, r7, #32
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f002 f839 	bl	8002cc0 <HAL_RCC_OscConfig>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <SystemClock_Config+0x94>
    Error_Handler();
 8000c54:	f000 fdff 	bl	8001856 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000c58:	230f      	movs	r3, #15
 8000c5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 8000c6e:	f107 030c 	add.w	r3, r7, #12
 8000c72:	2100      	movs	r1, #0
 8000c74:	4618      	mov	r0, r3
 8000c76:	f002 fa9b 	bl	80031b0 <HAL_RCC_ClockConfig>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <SystemClock_Config+0xc0>
    Error_Handler();
 8000c80:	f000 fde9 	bl	8001856 <Error_Handler>
  }
}
 8000c84:	bf00      	nop
 8000c86:	3750      	adds	r7, #80	; 0x50
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40007000 	.word	0x40007000

08000c94 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000ca6:	4b3e      	ldr	r3, [pc, #248]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000ca8:	4a3e      	ldr	r2, [pc, #248]	; (8000da4 <MX_ADC1_Init+0x110>)
 8000caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cac:	4b3c      	ldr	r3, [pc, #240]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb2:	4b3b      	ldr	r3, [pc, #236]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cb8:	4b39      	ldr	r3, [pc, #228]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cba:	2201      	movs	r2, #1
 8000cbc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cbe:	4b38      	ldr	r3, [pc, #224]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8000cc4:	4b36      	ldr	r3, [pc, #216]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8000ccc:	4b34      	ldr	r3, [pc, #208]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cce:	2201      	movs	r2, #1
 8000cd0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cd2:	4b33      	ldr	r3, [pc, #204]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cda:	4a33      	ldr	r2, [pc, #204]	; (8000da8 <MX_ADC1_Init+0x114>)
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b30      	ldr	r3, [pc, #192]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000ce4:	4b2e      	ldr	r3, [pc, #184]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cea:	4b2d      	ldr	r3, [pc, #180]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf2:	4b2b      	ldr	r3, [pc, #172]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000cf8:	4829      	ldr	r0, [pc, #164]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000cfa:	f001 f831 	bl	8001d60 <HAL_ADC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x74>
    Error_Handler();
 8000d04:	f000 fda7 	bl	8001856 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_3;
 8000d08:	2303      	movs	r3, #3
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	4821      	ldr	r0, [pc, #132]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000d1a:	f001 f9e5 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x94>
    Error_Handler();
 8000d24:	f000 fd97 	bl	8001856 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_4;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	481a      	ldr	r0, [pc, #104]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000d36:	f001 f9d7 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xb0>
    Error_Handler();
 8000d40:	f000 fd89 	bl	8001856 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_5;
 8000d44:	2305      	movs	r3, #5
 8000d46:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d4c:	463b      	mov	r3, r7
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4813      	ldr	r0, [pc, #76]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000d52:	f001 f9c9 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <MX_ADC1_Init+0xcc>
    Error_Handler();
 8000d5c:	f000 fd7b 	bl	8001856 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d60:	2306      	movs	r3, #6
 8000d62:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d68:	463b      	mov	r3, r7
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000d6e:	f001 f9bb 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_ADC1_Init+0xe8>
    Error_Handler();
 8000d78:	f000 fd6d 	bl	8001856 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d7c:	2307      	movs	r3, #7
 8000d7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d80:	2305      	movs	r3, #5
 8000d82:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC1_Init+0x10c>)
 8000d8a:	f001 f9ad 	bl	80020e8 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC1_Init+0x104>
    Error_Handler();
 8000d94:	f000 fd5f 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20000048 	.word	0x20000048
 8000da4:	40012000 	.word	0x40012000
 8000da8:	0f000001 	.word	0x0f000001

08000dac <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db0:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000db6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dba:	2204      	movs	r2, #4
 8000dbc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000dc4:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dca:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dcc:	2202      	movs	r2, #2
 8000dce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000de2:	4b08      	ldr	r3, [pc, #32]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de8:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 8000dee:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df0:	f001 fe57 	bl	8002aa2 <HAL_PCD_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 8000dfa:	f000 fd2c 	bl	8001856 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 8000dfe:	bf00      	nop
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	20000090 	.word	0x20000090

08000e08 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b088      	sub	sp, #32
 8000e0c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]
 8000e1c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	603b      	str	r3, [r7, #0]
 8000e5a:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	; 0x30
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_GPIO_Init+0x9c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	603b      	str	r3, [r7, #0]
 8000e70:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000e78:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0xa0>)
 8000e7a:	f001 fdf9 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8000e7e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e90:	f107 030c 	add.w	r3, r7, #12
 8000e94:	4619      	mov	r1, r3
 8000e96:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_GPIO_Init+0xa0>)
 8000e98:	f001 fc66 	bl	8002768 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400
 8000eac:	00000000 	.word	0x00000000

08000eb0 <update_key_state>:

/* USER CODE BEGIN 4 */
void update_key_state(struct key *key) {
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = HAL_ADC_GetValue(&hadc1);
 8000eb8:	4863      	ldr	r0, [pc, #396]	; (8001048 <update_key_state+0x198>)
 8000eba:	f001 f907 	bl	80020cc <HAL_ADC_GetValue>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	b21b      	sxth	r3, r3
 8000ec2:	813b      	strh	r3, [r7, #8]

  if (key->calibration.is_calibrating) {
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	799b      	ldrb	r3, [r3, #6]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d034      	beq.n	8000f36 <update_key_state+0x86>
    // Calibrate idle value
    key->calibration.idle_value = (1 - 0.6) * state.value + 0.6 * key->calibration.idle_value;
 8000ecc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff fc05 	bl	80006e0 <__aeabi_i2d>
 8000ed6:	a358      	add	r3, pc, #352	; (adr r3, 8001038 <update_key_state+0x188>)
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f7ff f984 	bl	80001e8 <__aeabi_dmul>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4614      	mov	r4, r2
 8000ee6:	461d      	mov	r5, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	895b      	ldrh	r3, [r3, #10]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fbf7 	bl	80006e0 <__aeabi_i2d>
 8000ef2:	a353      	add	r3, pc, #332	; (adr r3, 8001040 <update_key_state+0x190>)
 8000ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef8:	f7ff f976 	bl	80001e8 <__aeabi_dmul>
 8000efc:	4602      	mov	r2, r0
 8000efe:	460b      	mov	r3, r1
 8000f00:	4620      	mov	r0, r4
 8000f02:	4629      	mov	r1, r5
 8000f04:	f7ff faa0 	bl	8000448 <__adddf3>
 8000f08:	4602      	mov	r2, r0
 8000f0a:	460b      	mov	r3, r1
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	4619      	mov	r1, r3
 8000f10:	f7ff fc50 	bl	80007b4 <__aeabi_d2uiz>
 8000f14:	4603      	mov	r3, r0
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	815a      	strh	r2, [r3, #10]

    key->calibration.cycles_count++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	891b      	ldrh	r3, [r3, #8]
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29a      	uxth	r2, r3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	811a      	strh	r2, [r3, #8]

    if (key->calibration.cycles_count >= CALIBRATION_CYCLES) {
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	891b      	ldrh	r3, [r3, #8]
 8000f2c:	2b13      	cmp	r3, #19
 8000f2e:	d902      	bls.n	8000f36 <update_key_state+0x86>
      key->calibration.is_calibrating = 0;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2200      	movs	r2, #0
 8000f34:	719a      	strb	r2, [r3, #6]
    }
  }

  if (key->calibration.is_calibrating == 0) {
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	799b      	ldrb	r3, [r3, #6]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d16a      	bne.n	8001014 <update_key_state+0x164>
    // if (state.value > key->calibration.idle_value) {
    //   key->calibration.idle_value = (1 - 0.8) * state.value + 0.8 * key->calibration.idle_value;
    // }

    // Get distance from top
    if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000f3e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f42:	461a      	mov	r2, r3
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	895b      	ldrh	r3, [r3, #10]
 8000f48:	3b0a      	subs	r3, #10
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	db02      	blt.n	8000f54 <update_key_state+0xa4>
      state.distance = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	817b      	strh	r3, [r7, #10]
 8000f52:	e008      	b.n	8000f66 <update_key_state+0xb6>
    } else {
      state.distance = key->calibration.idle_value - state.value;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	895a      	ldrh	r2, [r3, #10]
 8000f58:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	b21b      	sxth	r3, r3
 8000f64:	817b      	strh	r3, [r7, #10]
    }

    // Calibrate max distance value
    if (state.distance > key->calibration.max_distance) {
 8000f66:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	899b      	ldrh	r3, [r3, #12]
 8000f70:	429a      	cmp	r2, r3
 8000f72:	dd04      	ble.n	8000f7e <update_key_state+0xce>
      // key->calibration.max_distance = (1 - 0.8) * state.distance + 0.8 * key->calibration.max_distance;
      key->calibration.max_distance = state.distance;
 8000f74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f78:	b29a      	uxth	r2, r3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	819a      	strh	r2, [r3, #12]
    }

    // Limit max distance
    if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000f7e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	899b      	ldrh	r3, [r3, #12]
 8000f88:	3b28      	subs	r3, #40	; 0x28
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	db03      	blt.n	8000f96 <update_key_state+0xe6>
      state.distance = key->calibration.max_distance;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	899b      	ldrh	r3, [r3, #12]
 8000f92:	b21b      	sxth	r3, r3
 8000f94:	817b      	strh	r3, [r7, #10]
    }

    // Map distance in percentages
    state.distance_percentage = (state.distance * 100) / key->calibration.max_distance;
 8000f96:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	2364      	movs	r3, #100	; 0x64
 8000f9e:	fb02 f303 	mul.w	r3, r2, r3
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	8992      	ldrh	r2, [r2, #12]
 8000fa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8000faa:	b21b      	sxth	r3, r3
 8000fac:	81bb      	strh	r3, [r7, #12]

    // Update velocity
    state.velocity = state.distance_percentage - key->state.distance_percentage;
 8000fae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000fb2:	b29a      	uxth	r2, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	b29b      	uxth	r3, r3
 8000fc0:	b21b      	sxth	r3, r3
 8000fc2:	81fb      	strh	r3, [r7, #14]

    // Update Acceleration
    state.acceleration = (state.velocity - key->state.velocity) / 2;
 8000fc4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	0fda      	lsrs	r2, r3, #31
 8000fd4:	4413      	add	r3, r2
 8000fd6:	105b      	asrs	r3, r3, #1
 8000fd8:	b21b      	sxth	r3, r3
 8000fda:	823b      	strh	r3, [r7, #16]
    // state.acceleration = 0;

    // Update jerk
    state.jerk = (state.acceleration - key->state.acceleration) / 3;
 8000fdc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	4a18      	ldr	r2, [pc, #96]	; (800104c <update_key_state+0x19c>)
 8000fec:	fb82 1203 	smull	r1, r2, r2, r3
 8000ff0:	17db      	asrs	r3, r3, #31
 8000ff2:	1ad3      	subs	r3, r2, r3
 8000ff4:	b21b      	sxth	r3, r3
 8000ff6:	827b      	strh	r3, [r7, #18]
    // state.jerk = 0;

    // Update movement
    state.is_pressing = key->state.velocity > 0 && state.velocity > 0;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	dd05      	ble.n	800100e <update_key_state+0x15e>
 8001002:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001006:	2b00      	cmp	r3, #0
 8001008:	dd01      	ble.n	800100e <update_key_state+0x15e>
 800100a:	2301      	movs	r3, #1
 800100c:	e000      	b.n	8001010 <update_key_state+0x160>
 800100e:	2300      	movs	r3, #0
 8001010:	b2db      	uxtb	r3, r3
 8001012:	753b      	strb	r3, [r7, #20]
  }

  key->state = state;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f103 040e 	add.w	r4, r3, #14
 800101a:	f107 0308 	add.w	r3, r7, #8
 800101e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001020:	6020      	str	r0, [r4, #0]
 8001022:	6061      	str	r1, [r4, #4]
 8001024:	60a2      	str	r2, [r4, #8]
 8001026:	881b      	ldrh	r3, [r3, #0]
 8001028:	81a3      	strh	r3, [r4, #12]
}
 800102a:	bf00      	nop
 800102c:	3718      	adds	r7, #24
 800102e:	46bd      	mov	sp, r7
 8001030:	bdb0      	pop	{r4, r5, r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	9999999a 	.word	0x9999999a
 800103c:	3fd99999 	.word	0x3fd99999
 8001040:	33333333 	.word	0x33333333
 8001044:	3fe33333 	.word	0x3fe33333
 8001048:	20000048 	.word	0x20000048
 800104c:	55555556 	.word	0x55555556

08001050 <update_key>:

void update_key(struct key *key) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  update_key_state(key);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <update_key_state>

  if (!key->calibration.is_calibrating) {
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	799b      	ldrb	r3, [r3, #6]
 8001062:	2b00      	cmp	r3, #0
 8001064:	f040 80b7 	bne.w	80011d6 <update_key+0x186>
     * |     |                    |
     * |-----|                    -
     *
     */

    uint32_t now = HAL_GetTick();
 8001068:	f000 fe4a 	bl	8001d00 <HAL_GetTick>
 800106c:	60f8      	str	r0, [r7, #12]
    uint8_t is_ready_to_trigger = key->actuation.triggered_at + MIN_TIME_BETWEEN_EVENTS < now;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001072:	330a      	adds	r3, #10
 8001074:	68fa      	ldr	r2, [r7, #12]
 8001076:	429a      	cmp	r2, r3
 8001078:	bf8c      	ite	hi
 800107a:	2301      	movhi	r3, #1
 800107c:	2300      	movls	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	72fb      	strb	r3, [r7, #11]
    uint8_t has_moved_more_than_min = abs(key->state.distance_percentage - key->actuation.changed_at) > MIN_MOVEMENT_BETWEEN_EVENTS;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	8bdb      	ldrh	r3, [r3, #30]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	bfb8      	it	lt
 8001094:	425b      	neglt	r3, r3
 8001096:	2b03      	cmp	r3, #3
 8001098:	bfcc      	ite	gt
 800109a:	2301      	movgt	r3, #1
 800109c:	2300      	movle	r3, #0
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	72bb      	strb	r3, [r7, #10]
    uint8_t is_after_trigger_offset = key->state.distance_percentage > key->actuation.trigger_offset;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	8c1b      	ldrh	r3, [r3, #32]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	bfcc      	ite	gt
 80010b2:	2301      	movgt	r3, #1
 80010b4:	2300      	movle	r3, #0
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	727b      	strb	r3, [r7, #9]

    switch (key->actuation.status) {
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7f1b      	ldrb	r3, [r3, #28]
 80010be:	2b04      	cmp	r3, #4
 80010c0:	d873      	bhi.n	80011aa <update_key+0x15a>
 80010c2:	a201      	add	r2, pc, #4	; (adr r2, 80010c8 <update_key+0x78>)
 80010c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010c8:	080010dd 	.word	0x080010dd
 80010cc:	080010dd 	.word	0x080010dd
 80010d0:	0800111f 	.word	0x0800111f
 80010d4:	08001165 	.word	0x08001165
 80010d8:	0800117f 	.word	0x0800117f

    case STATUS_RESET:
    case STATUS_RESET_AFTER_TAP:
      // if reset, can be triggered or tap
      if (has_moved_more_than_min && is_after_trigger_offset) {
 80010dc:	7abb      	ldrb	r3, [r7, #10]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d060      	beq.n	80011a4 <update_key+0x154>
 80010e2:	7a7b      	ldrb	r3, [r7, #9]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d05d      	beq.n	80011a4 <update_key+0x154>
        if (key->has_tap_layer) {
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	78db      	ldrb	r3, [r3, #3]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <update_key+0xa8>
          key->actuation.status = STATUS_MIGHT_BE_TAP;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2202      	movs	r2, #2
 80010f4:	771a      	strb	r2, [r3, #28]
 80010f6:	e008      	b.n	800110a <update_key+0xba>
        } else if (is_ready_to_trigger) {
 80010f8:	7afb      	ldrb	r3, [r7, #11]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d005      	beq.n	800110a <update_key+0xba>
          key->actuation.status = STATUS_TRIGGERED;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2204      	movs	r2, #4
 8001102:	771a      	strb	r2, [r3, #28]
          keys_on_change(key);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f000 f9e3 	bl	80014d0 <keys_on_change>
        }
        key->actuation.triggered_at = now;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	629a      	str	r2, [r3, #40]	; 0x28
        key->actuation.changed_at = key->state.distance_percentage;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001116:	b29a      	uxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	83da      	strh	r2, [r3, #30]
      }
      break;
 800111c:	e042      	b.n	80011a4 <update_key+0x154>

    case STATUS_MIGHT_BE_TAP:
      // if might be tap, can be tap or triggered
      if (has_moved_more_than_min && !is_after_trigger_offset && now - key->actuation.triggered_at <= TAP_TIMEOUT) {
 800111e:	7abb      	ldrb	r3, [r7, #10]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00c      	beq.n	800113e <update_key+0xee>
 8001124:	7a7b      	ldrb	r3, [r7, #9]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d109      	bne.n	800113e <update_key+0xee>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	68fa      	ldr	r2, [r7, #12]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b7d      	cmp	r3, #125	; 0x7d
 8001134:	d803      	bhi.n	800113e <update_key+0xee>
        key->actuation.status = STATUS_TAP;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2203      	movs	r2, #3
 800113a:	771a      	strb	r2, [r3, #28]
 800113c:	e008      	b.n	8001150 <update_key+0x100>
      } else if (now - key->actuation.triggered_at > TAP_TIMEOUT) {
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b7d      	cmp	r3, #125	; 0x7d
 8001148:	d902      	bls.n	8001150 <update_key+0x100>
        key->actuation.status = STATUS_TRIGGERED;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2204      	movs	r2, #4
 800114e:	771a      	strb	r2, [r3, #28]
      }
      key->actuation.changed_at = key->state.distance_percentage;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001156:	b29a      	uxth	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	83da      	strh	r2, [r3, #30]
      keys_on_change(key);
 800115c:	6878      	ldr	r0, [r7, #4]
 800115e:	f000 f9b7 	bl	80014d0 <keys_on_change>
      break;
 8001162:	e022      	b.n	80011aa <update_key+0x15a>

    case STATUS_TAP:
      // if tap, can be reset
      key->actuation.status = STATUS_RESET_AFTER_TAP;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2201      	movs	r2, #1
 8001168:	771a      	strb	r2, [r3, #28]
      key->actuation.changed_at = key->state.distance_percentage;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001170:	b29a      	uxth	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	83da      	strh	r2, [r3, #30]
      keys_on_change(key);
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f000 f9aa 	bl	80014d0 <keys_on_change>
      break;
 800117c:	e015      	b.n	80011aa <update_key+0x15a>

    case STATUS_TRIGGERED:
      // if triggered, can be reset
      if (has_moved_more_than_min && !is_after_trigger_offset) {
 800117e:	7abb      	ldrb	r3, [r7, #10]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d011      	beq.n	80011a8 <update_key+0x158>
 8001184:	7a7b      	ldrb	r3, [r7, #9]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d10e      	bne.n	80011a8 <update_key+0x158>
        key->actuation.status = STATUS_RESET;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
        key->actuation.changed_at = key->state.distance_percentage;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001196:	b29a      	uxth	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	83da      	strh	r2, [r3, #30]
        keys_on_change(key);
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f000 f997 	bl	80014d0 <keys_on_change>
      }
      break;
 80011a2:	e001      	b.n	80011a8 <update_key+0x158>
      break;
 80011a4:	bf00      	nop
 80011a6:	e000      	b.n	80011aa <update_key+0x15a>
      break;
 80011a8:	bf00      	nop
    //   // keys_on_reset(key);
    //   keys_on_change(key);
    // }

    // Full reset
    if (key->state.distance_percentage == 0) {
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d110      	bne.n	80011d6 <update_key+0x186>
      key->actuation.changed_at = 0;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	83da      	strh	r2, [r3, #30]
      if (key->actuation.status != STATUS_RESET && key->actuation.status != STATUS_RESET_AFTER_TAP) {
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	7f1b      	ldrb	r3, [r3, #28]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <update_key+0x186>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	7f1b      	ldrb	r3, [r3, #28]
 80011c6:	2b01      	cmp	r3, #1
 80011c8:	d005      	beq.n	80011d6 <update_key+0x186>
        key->actuation.status = STATUS_RESET;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	771a      	strb	r2, [r3, #28]
        keys_on_change(key);
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f000 f97d 	bl	80014d0 <keys_on_change>
      }
    }
  }
}
 80011d6:	bf00      	nop
 80011d8:	3710      	adds	r7, #16
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop

080011e0 <keys_loop>:

void keys_loop() {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	71fb      	strb	r3, [r7, #7]
 80011ea:	e04d      	b.n	8001288 <keys_loop+0xa8>
    for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80011ec:	2300      	movs	r3, #0
 80011ee:	71bb      	strb	r3, [r7, #6]
 80011f0:	e013      	b.n	800121a <keys_loop+0x3a>
      HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 80011f2:	79bb      	ldrb	r3, [r7, #6]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <keys_loop+0xb8>)
 80011f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011fa:	b299      	uxth	r1, r3
 80011fc:	79fa      	ldrb	r2, [r7, #7]
 80011fe:	79bb      	ldrb	r3, [r7, #6]
 8001200:	fa42 f303 	asr.w	r3, r2, r3
 8001204:	b2db      	uxtb	r3, r3
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	b2db      	uxtb	r3, r3
 800120c:	461a      	mov	r2, r3
 800120e:	4823      	ldr	r0, [pc, #140]	; (800129c <keys_loop+0xbc>)
 8001210:	f001 fc2e 	bl	8002a70 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8001214:	79bb      	ldrb	r3, [r7, #6]
 8001216:	3301      	adds	r3, #1
 8001218:	71bb      	strb	r3, [r7, #6]
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	2b03      	cmp	r3, #3
 800121e:	d9e8      	bls.n	80011f2 <keys_loop+0x12>
    }

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001220:	2300      	movs	r3, #0
 8001222:	717b      	strb	r3, [r7, #5]
 8001224:	e027      	b.n	8001276 <keys_loop+0x96>
      //   continue;
      // }

      // sConfig.Channel = adc_channels[adc_channel];
      // HAL_ADC_ConfigChannel(&hadc1, &sConfig);
      HAL_ADC_Start(&hadc1);
 8001226:	481e      	ldr	r0, [pc, #120]	; (80012a0 <keys_loop+0xc0>)
 8001228:	f000 fdde 	bl	8001de8 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100);
 800122c:	2164      	movs	r1, #100	; 0x64
 800122e:	481c      	ldr	r0, [pc, #112]	; (80012a0 <keys_loop+0xc0>)
 8001230:	f000 fec1 	bl	8001fb6 <HAL_ADC_PollForConversion>

      if (keys[adc_channel][amux_channel].is_enabled == 1) {
 8001234:	797b      	ldrb	r3, [r7, #5]
 8001236:	79fa      	ldrb	r2, [r7, #7]
 8001238:	491a      	ldr	r1, [pc, #104]	; (80012a4 <keys_loop+0xc4>)
 800123a:	202c      	movs	r0, #44	; 0x2c
 800123c:	fb00 f202 	mul.w	r2, r0, r2
 8001240:	f44f 7030 	mov.w	r0, #704	; 0x2c0
 8001244:	fb00 f303 	mul.w	r3, r0, r3
 8001248:	4413      	add	r3, r2
 800124a:	440b      	add	r3, r1
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10e      	bne.n	8001270 <keys_loop+0x90>
        update_key(&keys[adc_channel][amux_channel]);
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	79fa      	ldrb	r2, [r7, #7]
 8001256:	212c      	movs	r1, #44	; 0x2c
 8001258:	fb01 f202 	mul.w	r2, r1, r2
 800125c:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001260:	fb01 f303 	mul.w	r3, r1, r3
 8001264:	4413      	add	r3, r2
 8001266:	4a0f      	ldr	r2, [pc, #60]	; (80012a4 <keys_loop+0xc4>)
 8001268:	4413      	add	r3, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff fef0 	bl	8001050 <update_key>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001270:	797b      	ldrb	r3, [r7, #5]
 8001272:	3301      	adds	r3, #1
 8001274:	717b      	strb	r3, [r7, #5]
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	2b04      	cmp	r3, #4
 800127a:	d9d4      	bls.n	8001226 <keys_loop+0x46>
      }
    }
    HAL_ADC_Stop(&hadc1);
 800127c:	4808      	ldr	r0, [pc, #32]	; (80012a0 <keys_loop+0xc0>)
 800127e:	f000 fe67 	bl	8001f50 <HAL_ADC_Stop>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	3301      	adds	r3, #1
 8001286:	71fb      	strb	r3, [r7, #7]
 8001288:	79fb      	ldrb	r3, [r7, #7]
 800128a:	2b0f      	cmp	r3, #15
 800128c:	d9ae      	bls.n	80011ec <keys_loop+0xc>
  // HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);

  // update_key(&keys[0][0]);

  // HAL_ADC_Stop(&hadc1);
};
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3708      	adds	r7, #8
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	080088a0 	.word	0x080088a0
 800129c:	40020400 	.word	0x40020400
 80012a0:	20000048 	.word	0x20000048
 80012a4:	20000574 	.word	0x20000574

080012a8 <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t col, uint16_t trigger_offset, uint16_t rapid_trigger_offset, uint8_t is_continuous_rapid_trigger_enabled) {
 80012a8:	b490      	push	{r4, r7}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4604      	mov	r4, r0
 80012b0:	4608      	mov	r0, r1
 80012b2:	4611      	mov	r1, r2
 80012b4:	461a      	mov	r2, r3
 80012b6:	4623      	mov	r3, r4
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	4603      	mov	r3, r0
 80012bc:	71bb      	strb	r3, [r7, #6]
 80012be:	460b      	mov	r3, r1
 80012c0:	717b      	strb	r3, [r7, #5]
 80012c2:	4613      	mov	r3, r2
 80012c4:	713b      	strb	r3, [r7, #4]
  struct key *key = &keys[adc_channel][amux_channel];
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	79ba      	ldrb	r2, [r7, #6]
 80012ca:	212c      	movs	r1, #44	; 0x2c
 80012cc:	fb01 f202 	mul.w	r2, r1, r2
 80012d0:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 80012d4:	fb01 f303 	mul.w	r3, r1, r3
 80012d8:	4413      	add	r3, r2
 80012da:	4a22      	ldr	r2, [pc, #136]	; (8001364 <init_key+0xbc>)
 80012dc:	4413      	add	r3, r2
 80012de:	60fb      	str	r3, [r7, #12]

  key->is_enabled = 1;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	2201      	movs	r2, #1
 80012e4:	701a      	strb	r2, [r3, #0]
  key->has_tap_layer = keymaps[_TAP_LAYER][row][col] != ____;
 80012e6:	797a      	ldrb	r2, [r7, #5]
 80012e8:	7939      	ldrb	r1, [r7, #4]
 80012ea:	481f      	ldr	r0, [pc, #124]	; (8001368 <init_key+0xc0>)
 80012ec:	4613      	mov	r3, r2
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	1a9b      	subs	r3, r3, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	334b      	adds	r3, #75	; 0x4b
 80012f6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	bf14      	ite	ne
 80012fe:	2301      	movne	r3, #1
 8001300:	2300      	moveq	r3, #0
 8001302:	b2db      	uxtb	r3, r3
 8001304:	461a      	mov	r2, r3
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	70da      	strb	r2, [r3, #3]
  key->modifier_bitmask = NO_MODIFIER_BITMASK;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	2200      	movs	r2, #0
 800130e:	711a      	strb	r2, [r3, #4]

  key->row = row;
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	797a      	ldrb	r2, [r7, #5]
 8001314:	705a      	strb	r2, [r3, #1]
  key->column = col;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	793a      	ldrb	r2, [r7, #4]
 800131a:	709a      	strb	r2, [r3, #2]

  key->calibration.is_calibrating = 1;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2201      	movs	r2, #1
 8001320:	719a      	strb	r2, [r3, #6]
  key->calibration.cycles_count = 0;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	2200      	movs	r2, #0
 8001326:	811a      	strh	r2, [r3, #8]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 800132e:	815a      	strh	r2, [r3, #10]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001336:	819a      	strh	r2, [r3, #12]

  key->actuation.status = STATUS_RESET;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2200      	movs	r2, #0
 800133c:	771a      	strb	r2, [r3, #28]
  key->actuation.changed_at = 0;
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	2200      	movs	r2, #0
 8001342:	83da      	strh	r2, [r3, #30]
  key->actuation.trigger_offset = trigger_offset;
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	8b3a      	ldrh	r2, [r7, #24]
 8001348:	841a      	strh	r2, [r3, #32]
  key->actuation.rapid_trigger_offset = rapid_trigger_offset;
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8bba      	ldrh	r2, [r7, #28]
 800134e:	845a      	strh	r2, [r3, #34]	; 0x22
  key->actuation.is_continuous_rapid_trigger_enabled = is_continuous_rapid_trigger_enabled;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001356:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800135a:	bf00      	nop
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bc90      	pop	{r4, r7}
 8001362:	4770      	bx	lr
 8001364:	20000574 	.word	0x20000574
 8001368:	08008774 	.word	0x08008774

0800136c <keys_init>:

void keys_init(uint16_t trigger_offset, uint16_t rapid_trigger_offset, uint8_t is_continuous_rapid_trigger_enabled) {
 800136c:	b590      	push	{r4, r7, lr}
 800136e:	b089      	sub	sp, #36	; 0x24
 8001370:	af04      	add	r7, sp, #16
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]
 8001376:	460b      	mov	r3, r1
 8001378:	80bb      	strh	r3, [r7, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	70fb      	strb	r3, [r7, #3]
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
 8001382:	e01b      	b.n	80013bc <keys_init+0x50>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001384:	2300      	movs	r3, #0
 8001386:	73bb      	strb	r3, [r7, #14]
 8001388:	e012      	b.n	80013b0 <keys_init+0x44>
      struct key *key = &keys[adc_channel][amux_channel];
 800138a:	7bbb      	ldrb	r3, [r7, #14]
 800138c:	7bfa      	ldrb	r2, [r7, #15]
 800138e:	212c      	movs	r1, #44	; 0x2c
 8001390:	fb01 f202 	mul.w	r2, r1, r2
 8001394:	f44f 7130 	mov.w	r1, #704	; 0x2c0
 8001398:	fb01 f303 	mul.w	r3, r1, r3
 800139c:	4413      	add	r3, r2
 800139e:	4a30      	ldr	r2, [pc, #192]	; (8001460 <keys_init+0xf4>)
 80013a0:	4413      	add	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
      key->is_enabled = 0;
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	2200      	movs	r2, #0
 80013a8:	701a      	strb	r2, [r3, #0]
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	3301      	adds	r3, #1
 80013ae:	73bb      	strb	r3, [r7, #14]
 80013b0:	7bbb      	ldrb	r3, [r7, #14]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d9e9      	bls.n	800138a <keys_init+0x1e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	3301      	adds	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
 80013bc:	7bfb      	ldrb	r3, [r7, #15]
 80013be:	2b0f      	cmp	r3, #15
 80013c0:	d9e0      	bls.n	8001384 <keys_init+0x18>
    }
  }

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	737b      	strb	r3, [r7, #13]
 80013c6:	e042      	b.n	800144e <keys_init+0xe2>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 80013c8:	2300      	movs	r3, #0
 80013ca:	733b      	strb	r3, [r7, #12]
 80013cc:	e039      	b.n	8001442 <keys_init+0xd6>
      if (channels_by_row_col[row][col][0] == XXXX || channels_by_row_col[row][col][1] == XXXX) {
 80013ce:	7b7a      	ldrb	r2, [r7, #13]
 80013d0:	7b39      	ldrb	r1, [r7, #12]
 80013d2:	4824      	ldr	r0, [pc, #144]	; (8001464 <keys_init+0xf8>)
 80013d4:	4613      	mov	r3, r2
 80013d6:	011b      	lsls	r3, r3, #4
 80013d8:	1a9b      	subs	r3, r3, r2
 80013da:	440b      	add	r3, r1
 80013dc:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80013e0:	2bff      	cmp	r3, #255	; 0xff
 80013e2:	d02a      	beq.n	800143a <keys_init+0xce>
 80013e4:	7b7a      	ldrb	r2, [r7, #13]
 80013e6:	7b39      	ldrb	r1, [r7, #12]
 80013e8:	481e      	ldr	r0, [pc, #120]	; (8001464 <keys_init+0xf8>)
 80013ea:	4613      	mov	r3, r2
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	1a9b      	subs	r3, r3, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4403      	add	r3, r0
 80013f6:	785b      	ldrb	r3, [r3, #1]
 80013f8:	2bff      	cmp	r3, #255	; 0xff
 80013fa:	d01e      	beq.n	800143a <keys_init+0xce>
        // no hall effect sensor on this channel
        continue;
      }

      init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col, trigger_offset, rapid_trigger_offset, is_continuous_rapid_trigger_enabled);
 80013fc:	7b7a      	ldrb	r2, [r7, #13]
 80013fe:	7b39      	ldrb	r1, [r7, #12]
 8001400:	4818      	ldr	r0, [pc, #96]	; (8001464 <keys_init+0xf8>)
 8001402:	4613      	mov	r3, r2
 8001404:	011b      	lsls	r3, r3, #4
 8001406:	1a9b      	subs	r3, r3, r2
 8001408:	440b      	add	r3, r1
 800140a:	f810 0013 	ldrb.w	r0, [r0, r3, lsl #1]
 800140e:	7b7a      	ldrb	r2, [r7, #13]
 8001410:	7b39      	ldrb	r1, [r7, #12]
 8001412:	4c14      	ldr	r4, [pc, #80]	; (8001464 <keys_init+0xf8>)
 8001414:	4613      	mov	r3, r2
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	1a9b      	subs	r3, r3, r2
 800141a:	440b      	add	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	4423      	add	r3, r4
 8001420:	7859      	ldrb	r1, [r3, #1]
 8001422:	7b3c      	ldrb	r4, [r7, #12]
 8001424:	7b7a      	ldrb	r2, [r7, #13]
 8001426:	78fb      	ldrb	r3, [r7, #3]
 8001428:	9302      	str	r3, [sp, #8]
 800142a:	88bb      	ldrh	r3, [r7, #4]
 800142c:	9301      	str	r3, [sp, #4]
 800142e:	88fb      	ldrh	r3, [r7, #6]
 8001430:	9300      	str	r3, [sp, #0]
 8001432:	4623      	mov	r3, r4
 8001434:	f7ff ff38 	bl	80012a8 <init_key>
 8001438:	e000      	b.n	800143c <keys_init+0xd0>
        continue;
 800143a:	bf00      	nop
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 800143c:	7b3b      	ldrb	r3, [r7, #12]
 800143e:	3301      	adds	r3, #1
 8001440:	733b      	strb	r3, [r7, #12]
 8001442:	7b3b      	ldrb	r3, [r7, #12]
 8001444:	2b0e      	cmp	r3, #14
 8001446:	d9c2      	bls.n	80013ce <keys_init+0x62>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8001448:	7b7b      	ldrb	r3, [r7, #13]
 800144a:	3301      	adds	r3, #1
 800144c:	737b      	strb	r3, [r7, #13]
 800144e:	7b7b      	ldrb	r3, [r7, #13]
 8001450:	2b04      	cmp	r3, #4
 8001452:	d9b9      	bls.n	80013c8 <keys_init+0x5c>
    }
  }
}
 8001454:	bf00      	nop
 8001456:	bf00      	nop
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	bf00      	nop
 8001460:	20000574 	.word	0x20000574
 8001464:	080086dc 	.word	0x080086dc

08001468 <get_bitmask_for_modifier>:

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if (keycode == HID_KEY_CONTROL_LEFT) {
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	2be0      	cmp	r3, #224	; 0xe0
 8001476:	d101      	bne.n	800147c <get_bitmask_for_modifier+0x14>
    return 0b00000001;
 8001478:	2301      	movs	r3, #1
 800147a:	e023      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_SHIFT_LEFT) {
 800147c:	79fb      	ldrb	r3, [r7, #7]
 800147e:	2be1      	cmp	r3, #225	; 0xe1
 8001480:	d101      	bne.n	8001486 <get_bitmask_for_modifier+0x1e>
    return 0b00000010;
 8001482:	2302      	movs	r3, #2
 8001484:	e01e      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_ALT_LEFT) {
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2be2      	cmp	r3, #226	; 0xe2
 800148a:	d101      	bne.n	8001490 <get_bitmask_for_modifier+0x28>
    return 0b00000100;
 800148c:	2304      	movs	r3, #4
 800148e:	e019      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_GUI_LEFT) {
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2be3      	cmp	r3, #227	; 0xe3
 8001494:	d101      	bne.n	800149a <get_bitmask_for_modifier+0x32>
    return 0b00001000;
 8001496:	2308      	movs	r3, #8
 8001498:	e014      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_CONTROL_RIGHT) {
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	2be4      	cmp	r3, #228	; 0xe4
 800149e:	d101      	bne.n	80014a4 <get_bitmask_for_modifier+0x3c>
    return 0b00010000;
 80014a0:	2310      	movs	r3, #16
 80014a2:	e00f      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_SHIFT_RIGHT) {
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2be5      	cmp	r3, #229	; 0xe5
 80014a8:	d101      	bne.n	80014ae <get_bitmask_for_modifier+0x46>
    return 0b00100000;
 80014aa:	2320      	movs	r3, #32
 80014ac:	e00a      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_ALT_RIGHT) {
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2be6      	cmp	r3, #230	; 0xe6
 80014b2:	d101      	bne.n	80014b8 <get_bitmask_for_modifier+0x50>
    return 0b01000000;
 80014b4:	2340      	movs	r3, #64	; 0x40
 80014b6:	e005      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else if (keycode == HID_KEY_GUI_RIGHT) {
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	2be7      	cmp	r3, #231	; 0xe7
 80014bc:	d101      	bne.n	80014c2 <get_bitmask_for_modifier+0x5a>
    return 0b10000000;
 80014be:	2380      	movs	r3, #128	; 0x80
 80014c0:	e000      	b.n	80014c4 <get_bitmask_for_modifier+0x5c>
  } else {
    return NO_MODIFIER_BITMASK;
 80014c2:	2300      	movs	r3, #0
  }
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <keys_on_change>:

void keys_on_change(struct key *key) {
 80014d0:	b590      	push	{r4, r7, lr}
 80014d2:	b089      	sub	sp, #36	; 0x24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if (keymaps[_BASE_LAYER][key->row][key->column] == XXXX) {
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	785b      	ldrb	r3, [r3, #1]
 80014dc:	4619      	mov	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	789b      	ldrb	r3, [r3, #2]
 80014e2:	4618      	mov	r0, r3
 80014e4:	4aa1      	ldr	r2, [pc, #644]	; (800176c <keys_on_change+0x29c>)
 80014e6:	460b      	mov	r3, r1
 80014e8:	011b      	lsls	r3, r3, #4
 80014ea:	1a5b      	subs	r3, r3, r1
 80014ec:	4403      	add	r3, r0
 80014ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f2:	2bff      	cmp	r3, #255	; 0xff
 80014f4:	f000 815b 	beq.w	80017ae <keys_on_change+0x2de>
    return;
  }

  switch (key->actuation.status) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	7f1b      	ldrb	r3, [r3, #28]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	f200 815d 	bhi.w	80017bc <keys_on_change+0x2ec>
 8001502:	a201      	add	r2, pc, #4	; (adr r2, 8001508 <keys_on_change+0x38>)
 8001504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001508:	080016cf 	.word	0x080016cf
 800150c:	08001627 	.word	0x08001627
 8001510:	080017bd 	.word	0x080017bd
 8001514:	080015ab 	.word	0x080015ab
 8001518:	0800151d 	.word	0x0800151d
  case STATUS_TRIGGERED:
    key->modifier_bitmask = get_bitmask_for_modifier(keymaps[_BASE_LAYER][key->row][key->column]);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	785b      	ldrb	r3, [r3, #1]
 8001520:	4619      	mov	r1, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	789b      	ldrb	r3, [r3, #2]
 8001526:	4618      	mov	r0, r3
 8001528:	4a90      	ldr	r2, [pc, #576]	; (800176c <keys_on_change+0x29c>)
 800152a:	460b      	mov	r3, r1
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	1a5b      	subs	r3, r3, r1
 8001530:	4403      	add	r3, r0
 8001532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001536:	b2db      	uxtb	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff95 	bl	8001468 <get_bitmask_for_modifier>
 800153e:	4603      	mov	r3, r0
 8001540:	461a      	mov	r2, r3
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	711a      	strb	r2, [r3, #4]
    if (key->modifier_bitmask != NO_MODIFIER_BITMASK) {
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	791b      	ldrb	r3, [r3, #4]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <keys_on_change+0x96>
      modifiers |= key->modifier_bitmask;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	791a      	ldrb	r2, [r3, #4]
 8001552:	4b87      	ldr	r3, [pc, #540]	; (8001770 <keys_on_change+0x2a0>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	4313      	orrs	r3, r2
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4b85      	ldr	r3, [pc, #532]	; (8001770 <keys_on_change+0x2a0>)
 800155c:	701a      	strb	r2, [r3, #0]
      should_send_report = 1;
 800155e:	4b85      	ldr	r3, [pc, #532]	; (8001774 <keys_on_change+0x2a4>)
 8001560:	2201      	movs	r2, #1
 8001562:	701a      	strb	r2, [r3, #0]
    } else if (current_keycode_index < 6) {
      keycodes[current_keycode_index] = keymaps[_BASE_LAYER][key->row][key->column];
      current_keycode_index++;
      should_send_report = 1;
    }
    break;
 8001564:	e125      	b.n	80017b2 <keys_on_change+0x2e2>
    } else if (current_keycode_index < 6) {
 8001566:	4b84      	ldr	r3, [pc, #528]	; (8001778 <keys_on_change+0x2a8>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b05      	cmp	r3, #5
 800156c:	f200 8121 	bhi.w	80017b2 <keys_on_change+0x2e2>
      keycodes[current_keycode_index] = keymaps[_BASE_LAYER][key->row][key->column];
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	785b      	ldrb	r3, [r3, #1]
 8001574:	4619      	mov	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	789b      	ldrb	r3, [r3, #2]
 800157a:	4618      	mov	r0, r3
 800157c:	4a7b      	ldr	r2, [pc, #492]	; (800176c <keys_on_change+0x29c>)
 800157e:	460b      	mov	r3, r1
 8001580:	011b      	lsls	r3, r3, #4
 8001582:	1a5b      	subs	r3, r3, r1
 8001584:	4403      	add	r3, r0
 8001586:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800158a:	4b7b      	ldr	r3, [pc, #492]	; (8001778 <keys_on_change+0x2a8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	461a      	mov	r2, r3
 8001590:	b2c9      	uxtb	r1, r1
 8001592:	4b7a      	ldr	r3, [pc, #488]	; (800177c <keys_on_change+0x2ac>)
 8001594:	5499      	strb	r1, [r3, r2]
      current_keycode_index++;
 8001596:	4b78      	ldr	r3, [pc, #480]	; (8001778 <keys_on_change+0x2a8>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	3301      	adds	r3, #1
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4b76      	ldr	r3, [pc, #472]	; (8001778 <keys_on_change+0x2a8>)
 80015a0:	701a      	strb	r2, [r3, #0]
      should_send_report = 1;
 80015a2:	4b74      	ldr	r3, [pc, #464]	; (8001774 <keys_on_change+0x2a4>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
    break;
 80015a8:	e103      	b.n	80017b2 <keys_on_change+0x2e2>

  case STATUS_TAP:
    key->modifier_bitmask = get_bitmask_for_modifier(keymaps[_TAP_LAYER][key->row][key->column]);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	785b      	ldrb	r3, [r3, #1]
 80015ae:	4619      	mov	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	789b      	ldrb	r3, [r3, #2]
 80015b4:	4618      	mov	r0, r3
 80015b6:	4a6d      	ldr	r2, [pc, #436]	; (800176c <keys_on_change+0x29c>)
 80015b8:	460b      	mov	r3, r1
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	1a5b      	subs	r3, r3, r1
 80015be:	4403      	add	r3, r0
 80015c0:	334b      	adds	r3, #75	; 0x4b
 80015c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff4d 	bl	8001468 <get_bitmask_for_modifier>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	711a      	strb	r2, [r3, #4]
    if (key->modifier_bitmask == NO_MODIFIER_BITMASK && current_keycode_index < 6) {
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	791b      	ldrb	r3, [r3, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	f040 80eb 	bne.w	80017b6 <keys_on_change+0x2e6>
 80015e0:	4b65      	ldr	r3, [pc, #404]	; (8001778 <keys_on_change+0x2a8>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	f200 80e6 	bhi.w	80017b6 <keys_on_change+0x2e6>
      keycodes[current_keycode_index] = keymaps[_TAP_LAYER][key->row][key->column];
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	785b      	ldrb	r3, [r3, #1]
 80015ee:	4619      	mov	r1, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	789b      	ldrb	r3, [r3, #2]
 80015f4:	4618      	mov	r0, r3
 80015f6:	4a5d      	ldr	r2, [pc, #372]	; (800176c <keys_on_change+0x29c>)
 80015f8:	460b      	mov	r3, r1
 80015fa:	011b      	lsls	r3, r3, #4
 80015fc:	1a5b      	subs	r3, r3, r1
 80015fe:	4403      	add	r3, r0
 8001600:	334b      	adds	r3, #75	; 0x4b
 8001602:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001606:	4b5c      	ldr	r3, [pc, #368]	; (8001778 <keys_on_change+0x2a8>)
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	461a      	mov	r2, r3
 800160c:	b2c9      	uxtb	r1, r1
 800160e:	4b5b      	ldr	r3, [pc, #364]	; (800177c <keys_on_change+0x2ac>)
 8001610:	5499      	strb	r1, [r3, r2]
      current_keycode_index++;
 8001612:	4b59      	ldr	r3, [pc, #356]	; (8001778 <keys_on_change+0x2a8>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	3301      	adds	r3, #1
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4b57      	ldr	r3, [pc, #348]	; (8001778 <keys_on_change+0x2a8>)
 800161c:	701a      	strb	r2, [r3, #0]
      should_send_report = 1;
 800161e:	4b55      	ldr	r3, [pc, #340]	; (8001774 <keys_on_change+0x2a4>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
    }
    break;
 8001624:	e0c7      	b.n	80017b6 <keys_on_change+0x2e6>

  case STATUS_RESET_AFTER_TAP:
    if (key->modifier_bitmask == NO_MODIFIER_BITMASK) {
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	791b      	ldrb	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	f040 80c5 	bne.w	80017ba <keys_on_change+0x2ea>
      uint8_t new_keycodes[6] = {0, 0, 0, 0, 0, 0};
 8001630:	4a53      	ldr	r2, [pc, #332]	; (8001780 <keys_on_change+0x2b0>)
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	e892 0003 	ldmia.w	r2, {r0, r1}
 800163a:	6018      	str	r0, [r3, #0]
 800163c:	3304      	adds	r3, #4
 800163e:	8019      	strh	r1, [r3, #0]
      uint8_t new_keycode_index = 0;
 8001640:	2300      	movs	r3, #0
 8001642:	77fb      	strb	r3, [r7, #31]

      for (uint8_t i = 0; i < 6; i++) {
 8001644:	2300      	movs	r3, #0
 8001646:	77bb      	strb	r3, [r7, #30]
 8001648:	e026      	b.n	8001698 <keys_on_change+0x1c8>
        if (keycodes[i] != 0 && keycodes[i] != keymaps[_TAP_LAYER][key->row][key->column]) {
 800164a:	7fbb      	ldrb	r3, [r7, #30]
 800164c:	4a4b      	ldr	r2, [pc, #300]	; (800177c <keys_on_change+0x2ac>)
 800164e:	5cd3      	ldrb	r3, [r2, r3]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d01e      	beq.n	8001692 <keys_on_change+0x1c2>
 8001654:	7fbb      	ldrb	r3, [r7, #30]
 8001656:	4a49      	ldr	r2, [pc, #292]	; (800177c <keys_on_change+0x2ac>)
 8001658:	5cd3      	ldrb	r3, [r2, r3]
 800165a:	b29a      	uxth	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	785b      	ldrb	r3, [r3, #1]
 8001660:	4618      	mov	r0, r3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	461c      	mov	r4, r3
 8001668:	4940      	ldr	r1, [pc, #256]	; (800176c <keys_on_change+0x29c>)
 800166a:	4603      	mov	r3, r0
 800166c:	011b      	lsls	r3, r3, #4
 800166e:	1a1b      	subs	r3, r3, r0
 8001670:	4423      	add	r3, r4
 8001672:	334b      	adds	r3, #75	; 0x4b
 8001674:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001678:	429a      	cmp	r2, r3
 800167a:	d00a      	beq.n	8001692 <keys_on_change+0x1c2>
          new_keycodes[new_keycode_index] = keycodes[i];
 800167c:	7fba      	ldrb	r2, [r7, #30]
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	493e      	ldr	r1, [pc, #248]	; (800177c <keys_on_change+0x2ac>)
 8001682:	5c8a      	ldrb	r2, [r1, r2]
 8001684:	3320      	adds	r3, #32
 8001686:	443b      	add	r3, r7
 8001688:	f803 2c0c 	strb.w	r2, [r3, #-12]
          new_keycode_index++;
 800168c:	7ffb      	ldrb	r3, [r7, #31]
 800168e:	3301      	adds	r3, #1
 8001690:	77fb      	strb	r3, [r7, #31]
      for (uint8_t i = 0; i < 6; i++) {
 8001692:	7fbb      	ldrb	r3, [r7, #30]
 8001694:	3301      	adds	r3, #1
 8001696:	77bb      	strb	r3, [r7, #30]
 8001698:	7fbb      	ldrb	r3, [r7, #30]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d9d5      	bls.n	800164a <keys_on_change+0x17a>
        }
      }

      for (uint8_t i = 0; i < 6; i++) {
 800169e:	2300      	movs	r3, #0
 80016a0:	777b      	strb	r3, [r7, #29]
 80016a2:	e00a      	b.n	80016ba <keys_on_change+0x1ea>
        keycodes[i] = new_keycodes[i];
 80016a4:	7f7a      	ldrb	r2, [r7, #29]
 80016a6:	7f7b      	ldrb	r3, [r7, #29]
 80016a8:	3220      	adds	r2, #32
 80016aa:	443a      	add	r2, r7
 80016ac:	f812 1c0c 	ldrb.w	r1, [r2, #-12]
 80016b0:	4a32      	ldr	r2, [pc, #200]	; (800177c <keys_on_change+0x2ac>)
 80016b2:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 6; i++) {
 80016b4:	7f7b      	ldrb	r3, [r7, #29]
 80016b6:	3301      	adds	r3, #1
 80016b8:	777b      	strb	r3, [r7, #29]
 80016ba:	7f7b      	ldrb	r3, [r7, #29]
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d9f1      	bls.n	80016a4 <keys_on_change+0x1d4>
      }

      current_keycode_index = new_keycode_index;
 80016c0:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <keys_on_change+0x2a8>)
 80016c2:	7ffb      	ldrb	r3, [r7, #31]
 80016c4:	7013      	strb	r3, [r2, #0]
      should_send_report = 1;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <keys_on_change+0x2a4>)
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
    }
    break;
 80016cc:	e075      	b.n	80017ba <keys_on_change+0x2ea>

  case STATUS_RESET:
    if (key->modifier_bitmask != NO_MODIFIER_BITMASK) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	791b      	ldrb	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d010      	beq.n	80016f8 <keys_on_change+0x228>
      modifiers &= ~key->modifier_bitmask;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	791b      	ldrb	r3, [r3, #4]
 80016da:	b25b      	sxtb	r3, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	b25a      	sxtb	r2, r3
 80016e0:	4b23      	ldr	r3, [pc, #140]	; (8001770 <keys_on_change+0x2a0>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	b25b      	sxtb	r3, r3
 80016e6:	4013      	ands	r3, r2
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b20      	ldr	r3, [pc, #128]	; (8001770 <keys_on_change+0x2a0>)
 80016ee:	701a      	strb	r2, [r3, #0]
      key->modifier_bitmask = NO_MODIFIER_BITMASK;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	711a      	strb	r2, [r3, #4]
 80016f6:	e056      	b.n	80017a6 <keys_on_change+0x2d6>
    } else {
      uint8_t new_keycodes[6] = {0, 0, 0, 0, 0, 0};
 80016f8:	4a21      	ldr	r2, [pc, #132]	; (8001780 <keys_on_change+0x2b0>)
 80016fa:	f107 030c 	add.w	r3, r7, #12
 80016fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001702:	6018      	str	r0, [r3, #0]
 8001704:	3304      	adds	r3, #4
 8001706:	8019      	strh	r1, [r3, #0]
      uint8_t new_keycode_index = 0;
 8001708:	2300      	movs	r3, #0
 800170a:	773b      	strb	r3, [r7, #28]

      for (uint8_t i = 0; i < 6; i++) {
 800170c:	2300      	movs	r3, #0
 800170e:	76fb      	strb	r3, [r7, #27]
 8001710:	e025      	b.n	800175e <keys_on_change+0x28e>
        if (keycodes[i] != 0 && keycodes[i] != keymaps[_BASE_LAYER][key->row][key->column]) {
 8001712:	7efb      	ldrb	r3, [r7, #27]
 8001714:	4a19      	ldr	r2, [pc, #100]	; (800177c <keys_on_change+0x2ac>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01d      	beq.n	8001758 <keys_on_change+0x288>
 800171c:	7efb      	ldrb	r3, [r7, #27]
 800171e:	4a17      	ldr	r2, [pc, #92]	; (800177c <keys_on_change+0x2ac>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	b29a      	uxth	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	785b      	ldrb	r3, [r3, #1]
 8001728:	4618      	mov	r0, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	789b      	ldrb	r3, [r3, #2]
 800172e:	461c      	mov	r4, r3
 8001730:	490e      	ldr	r1, [pc, #56]	; (800176c <keys_on_change+0x29c>)
 8001732:	4603      	mov	r3, r0
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	1a1b      	subs	r3, r3, r0
 8001738:	4423      	add	r3, r4
 800173a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800173e:	429a      	cmp	r2, r3
 8001740:	d00a      	beq.n	8001758 <keys_on_change+0x288>
          new_keycodes[new_keycode_index] = keycodes[i];
 8001742:	7efa      	ldrb	r2, [r7, #27]
 8001744:	7f3b      	ldrb	r3, [r7, #28]
 8001746:	490d      	ldr	r1, [pc, #52]	; (800177c <keys_on_change+0x2ac>)
 8001748:	5c8a      	ldrb	r2, [r1, r2]
 800174a:	3320      	adds	r3, #32
 800174c:	443b      	add	r3, r7
 800174e:	f803 2c14 	strb.w	r2, [r3, #-20]
          new_keycode_index++;
 8001752:	7f3b      	ldrb	r3, [r7, #28]
 8001754:	3301      	adds	r3, #1
 8001756:	773b      	strb	r3, [r7, #28]
      for (uint8_t i = 0; i < 6; i++) {
 8001758:	7efb      	ldrb	r3, [r7, #27]
 800175a:	3301      	adds	r3, #1
 800175c:	76fb      	strb	r3, [r7, #27]
 800175e:	7efb      	ldrb	r3, [r7, #27]
 8001760:	2b05      	cmp	r3, #5
 8001762:	d9d6      	bls.n	8001712 <keys_on_change+0x242>
        }
      }

      for (uint8_t i = 0; i < 6; i++) {
 8001764:	2300      	movs	r3, #0
 8001766:	76bb      	strb	r3, [r7, #26]
 8001768:	e017      	b.n	800179a <keys_on_change+0x2ca>
 800176a:	bf00      	nop
 800176c:	08008774 	.word	0x08008774
 8001770:	20001336 	.word	0x20001336
 8001774:	20001334 	.word	0x20001334
 8001778:	2000133e 	.word	0x2000133e
 800177c:	20001338 	.word	0x20001338
 8001780:	080086b8 	.word	0x080086b8
        keycodes[i] = new_keycodes[i];
 8001784:	7eba      	ldrb	r2, [r7, #26]
 8001786:	7ebb      	ldrb	r3, [r7, #26]
 8001788:	3220      	adds	r2, #32
 800178a:	443a      	add	r2, r7
 800178c:	f812 1c14 	ldrb.w	r1, [r2, #-20]
 8001790:	4a0c      	ldr	r2, [pc, #48]	; (80017c4 <keys_on_change+0x2f4>)
 8001792:	54d1      	strb	r1, [r2, r3]
      for (uint8_t i = 0; i < 6; i++) {
 8001794:	7ebb      	ldrb	r3, [r7, #26]
 8001796:	3301      	adds	r3, #1
 8001798:	76bb      	strb	r3, [r7, #26]
 800179a:	7ebb      	ldrb	r3, [r7, #26]
 800179c:	2b05      	cmp	r3, #5
 800179e:	d9f1      	bls.n	8001784 <keys_on_change+0x2b4>
      }

      current_keycode_index = new_keycode_index;
 80017a0:	4a09      	ldr	r2, [pc, #36]	; (80017c8 <keys_on_change+0x2f8>)
 80017a2:	7f3b      	ldrb	r3, [r7, #28]
 80017a4:	7013      	strb	r3, [r2, #0]
    }
    should_send_report = 1;
 80017a6:	4b09      	ldr	r3, [pc, #36]	; (80017cc <keys_on_change+0x2fc>)
 80017a8:	2201      	movs	r2, #1
 80017aa:	701a      	strb	r2, [r3, #0]
    break;
 80017ac:	e006      	b.n	80017bc <keys_on_change+0x2ec>
    return;
 80017ae:	bf00      	nop
 80017b0:	e004      	b.n	80017bc <keys_on_change+0x2ec>
    break;
 80017b2:	bf00      	nop
 80017b4:	e002      	b.n	80017bc <keys_on_change+0x2ec>
    break;
 80017b6:	bf00      	nop
 80017b8:	e000      	b.n	80017bc <keys_on_change+0x2ec>
    break;
 80017ba:	bf00      	nop
  }
}
 80017bc:	3724      	adds	r7, #36	; 0x24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd90      	pop	{r4, r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20001338 	.word	0x20001338
 80017c8:	2000133e 	.word	0x2000133e
 80017cc:	20001334 	.word	0x20001334

080017d0 <tud_hid_set_protocol_cb>:

// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	460a      	mov	r2, r1
 80017da:	71fb      	strb	r3, [r7, #7]
 80017dc:	4613      	mov	r3, r2
 80017de:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TODO set a indicator for user
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <tud_hid_report_complete_cb>:

// Invoked when sent REPORT successfully to host
// Application can use this to send the next report
// Note: For composite reports, report[0] is report ID
void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	4603      	mov	r3, r0
 80017f4:	6039      	str	r1, [r7, #0]
 80017f6:	71fb      	strb	r3, [r7, #7]
 80017f8:	4613      	mov	r3, r2
 80017fa:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)report;
  (void)len;

  can_send_report = 1;
 80017fc:	4b04      	ldr	r3, [pc, #16]	; (8001810 <tud_hid_report_complete_cb+0x24>)
 80017fe:	2201      	movs	r2, #1
 8001800:	701a      	strb	r2, [r3, #0]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20001335 	.word	0x20001335

08001814 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	603b      	str	r3, [r7, #0]
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
 8001820:	460b      	mov	r3, r1
 8001822:	71bb      	strb	r3, [r7, #6]
 8001824:	4613      	mov	r3, r2
 8001826:	717b      	strb	r3, [r7, #5]
  (void)report_id;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 8001836:	b480      	push	{r7}
 8001838:	b083      	sub	sp, #12
 800183a:	af00      	add	r7, sp, #0
 800183c:	603b      	str	r3, [r7, #0]
 800183e:	4603      	mov	r3, r0
 8001840:	71fb      	strb	r3, [r7, #7]
 8001842:	460b      	mov	r3, r1
 8001844:	71bb      	strb	r3, [r7, #6]
 8001846:	4613      	mov	r3, r2
 8001848:	717b      	strb	r3, [r7, #5]
  (void)report_id;
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800185a:	b672      	cpsid	i
}
 800185c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 800185e:	e7fe      	b.n	800185e <Error_Handler+0x8>

08001860 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	607b      	str	r3, [r7, #4]
 800186a:	4b10      	ldr	r3, [pc, #64]	; (80018ac <HAL_MspInit+0x4c>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a0f      	ldr	r2, [pc, #60]	; (80018ac <HAL_MspInit+0x4c>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b0d      	ldr	r3, [pc, #52]	; (80018ac <HAL_MspInit+0x4c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	2300      	movs	r3, #0
 8001884:	603b      	str	r3, [r7, #0]
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x4c>)
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x4c>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6413      	str	r3, [r2, #64]	; 0x40
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x4c>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800

080018b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_ADC_MspInit+0x7c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d127      	bne.n	8001922 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b16      	ldr	r3, [pc, #88]	; (8001930 <HAL_ADC_MspInit+0x80>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a15      	ldr	r2, [pc, #84]	; (8001930 <HAL_ADC_MspInit+0x80>)
 80018dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b13      	ldr	r3, [pc, #76]	; (8001930 <HAL_ADC_MspInit+0x80>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	60fb      	str	r3, [r7, #12]
 80018f2:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <HAL_ADC_MspInit+0x80>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <HAL_ADC_MspInit+0x80>)
 80018f8:	f043 0301 	orr.w	r3, r3, #1
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_ADC_MspInit+0x80>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0301 	and.w	r3, r3, #1
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 800190a:	23f8      	movs	r3, #248	; 0xf8
 800190c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800190e:	2303      	movs	r3, #3
 8001910:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001916:	f107 0314 	add.w	r3, r7, #20
 800191a:	4619      	mov	r1, r3
 800191c:	4805      	ldr	r0, [pc, #20]	; (8001934 <HAL_ADC_MspInit+0x84>)
 800191e:	f000 ff23 	bl	8002768 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3728      	adds	r7, #40	; 0x28
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40012000 	.word	0x40012000
 8001930:	40023800 	.word	0x40023800
 8001934:	40020000 	.word	0x40020000

08001938 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08a      	sub	sp, #40	; 0x28
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001940:	f107 0314 	add.w	r3, r7, #20
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]
 800194c:	60da      	str	r2, [r3, #12]
 800194e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001958:	d13a      	bne.n	80019d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b1e      	ldr	r3, [pc, #120]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	4a1d      	ldr	r2, [pc, #116]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	; 0x30
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001976:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800197a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	2302      	movs	r3, #2
 800197e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001988:	230a      	movs	r3, #10
 800198a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	4619      	mov	r1, r3
 8001992:	4812      	ldr	r0, [pc, #72]	; (80019dc <HAL_PCD_MspInit+0xa4>)
 8001994:	f000 fee8 	bl	8002768 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001998:	4b0f      	ldr	r3, [pc, #60]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 800199a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800199c:	4a0e      	ldr	r2, [pc, #56]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 800199e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019a2:	6353      	str	r3, [r2, #52]	; 0x34
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 80019aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ac:	4a0a      	ldr	r2, [pc, #40]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 80019ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019b2:	6453      	str	r3, [r2, #68]	; 0x44
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_PCD_MspInit+0xa0>)
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019bc:	60fb      	str	r3, [r7, #12]
 80019be:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80019c0:	2200      	movs	r2, #0
 80019c2:	2100      	movs	r1, #0
 80019c4:	2043      	movs	r0, #67	; 0x43
 80019c6:	f000 fe98 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80019ca:	2043      	movs	r0, #67	; 0x43
 80019cc:	f000 feb1 	bl	8002732 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40020000 	.word	0x40020000

080019e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 80019e4:	e7fe      	b.n	80019e4 <NMI_Handler+0x4>

080019e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 80019ea:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <HardFault_Handler+0x6>

080019ee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <MemManage_Handler+0x4>

080019f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <BusFault_Handler+0x4>

080019fa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019fe:	e7fe      	b.n	80019fe <UsageFault_Handler+0x4>

08001a00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a04:	bf00      	nop
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a20:	bf00      	nop
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
	...

08001a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a30:	f000 f952 	bl	8001cd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <SysTick_Handler+0x18>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	4a02      	ldr	r2, [pc, #8]	; (8001a44 <SysTick_Handler+0x18>)
 8001a3c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	20001340 	.word	0x20001340

08001a48 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f006 fb75 	bl	800813c <dcd_int_handler>
	return;
 8001a52:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <SystemInit+0x20>)
 8001a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a62:	4a05      	ldr	r2, [pc, #20]	; (8001a78 <SystemInit+0x20>)
 8001a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <tud_descriptor_device_cb>:

        .bNumConfigurations = 0x01};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const *tud_descriptor_device_cb(void) {
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return (uint8_t const *)&desc_device;
 8001a80:	4b02      	ldr	r3, [pc, #8]	; (8001a8c <tud_descriptor_device_cb+0x10>)
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	080088c0 	.word	0x080088c0

08001a90 <tud_hid_descriptor_report_cb>:
        TUD_HID_REPORT_DESC_KEYBOARD()};

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_hid_descriptor_report_cb(uint8_t instance) {
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	71fb      	strb	r3, [r7, #7]
  return desc_hid_keyboard_report;
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <tud_hid_descriptor_report_cb+0x18>)
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	080088d4 	.word	0x080088d4

08001aac <tud_descriptor_configuration_cb>:
        TUD_HID_DESCRIPTOR(ITF_NUM_KEYBOARD, 0, HID_ITF_PROTOCOL_KEYBOARD, sizeof(desc_hid_keyboard_report), EPNUM_KEYBOARD, CFG_TUD_HID_EP_BUFSIZE, 10)};

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const *tud_descriptor_configuration_cb(uint8_t index) {
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
  (void)index; // for multiple configurations
  return desc_configuration;
 8001ab6:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <tud_descriptor_configuration_cb+0x18>)
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	08008918 	.word	0x08008918

08001ac8 <tud_descriptor_string_cb>:

static uint16_t _desc_str[32 + 1];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const *tud_descriptor_string_cb(uint8_t index, uint16_t langid) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b088      	sub	sp, #32
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	460a      	mov	r2, r1
 8001ad2:	71fb      	strb	r3, [r7, #7]
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	80bb      	strh	r3, [r7, #4]
  (void)langid;
  size_t chr_count;

  if (index == 0) {
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d108      	bne.n	8001af0 <tud_descriptor_string_cb+0x28>
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001ade:	4b3e      	ldr	r3, [pc, #248]	; (8001bd8 <tud_descriptor_string_cb+0x110>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b3d      	ldr	r3, [pc, #244]	; (8001bdc <tud_descriptor_string_cb+0x114>)
 8001ae8:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001aea:	2301      	movs	r3, #1
 8001aec:	61fb      	str	r3, [r7, #28]
 8001aee:	e026      	b.n	8001b3e <tud_descriptor_string_cb+0x76>
  } else {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d901      	bls.n	8001afa <tud_descriptor_string_cb+0x32>
      return NULL;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e06a      	b.n	8001bd0 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 8001afa:	79fb      	ldrb	r3, [r7, #7]
 8001afc:	4a36      	ldr	r2, [pc, #216]	; (8001bd8 <tud_descriptor_string_cb+0x110>)
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	613b      	str	r3, [r7, #16]

    // Cap at max char
    chr_count = strlen(str);
 8001b04:	6938      	ldr	r0, [r7, #16]
 8001b06:	f7fe fb67 	bl	80001d8 <strlen>
 8001b0a:	61f8      	str	r0, [r7, #28]
    if (chr_count > 31)
 8001b0c:	69fb      	ldr	r3, [r7, #28]
 8001b0e:	2b1f      	cmp	r3, #31
 8001b10:	d901      	bls.n	8001b16 <tud_descriptor_string_cb+0x4e>
      chr_count = 31;
 8001b12:	231f      	movs	r3, #31
 8001b14:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (uint8_t i = 0; i < chr_count; i++) {
 8001b16:	2300      	movs	r3, #0
 8001b18:	76fb      	strb	r3, [r7, #27]
 8001b1a:	e00c      	b.n	8001b36 <tud_descriptor_string_cb+0x6e>
      _desc_str[1 + i] = str[i];
 8001b1c:	7efb      	ldrb	r3, [r7, #27]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	4413      	add	r3, r2
 8001b22:	781a      	ldrb	r2, [r3, #0]
 8001b24:	7efb      	ldrb	r3, [r7, #27]
 8001b26:	3301      	adds	r3, #1
 8001b28:	b291      	uxth	r1, r2
 8001b2a:	4a2c      	ldr	r2, [pc, #176]	; (8001bdc <tud_descriptor_string_cb+0x114>)
 8001b2c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < chr_count; i++) {
 8001b30:	7efb      	ldrb	r3, [r7, #27]
 8001b32:	3301      	adds	r3, #1
 8001b34:	76fb      	strb	r3, [r7, #27]
 8001b36:	7efb      	ldrb	r3, [r7, #27]
 8001b38:	69fa      	ldr	r2, [r7, #28]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d8ee      	bhi.n	8001b1c <tud_descriptor_string_cb+0x54>
    }
  }

  switch (index) {
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <tud_descriptor_string_cb+0x82>
 8001b44:	2b03      	cmp	r3, #3
 8001b46:	d009      	beq.n	8001b5c <tud_descriptor_string_cb+0x94>
 8001b48:	e00b      	b.n	8001b62 <tud_descriptor_string_cb+0x9a>
  case STRID_LANGID:
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <tud_descriptor_string_cb+0x110>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	881b      	ldrh	r3, [r3, #0]
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <tud_descriptor_string_cb+0x114>)
 8001b54:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001b56:	2301      	movs	r3, #1
 8001b58:	61fb      	str	r3, [r7, #28]
    break;
 8001b5a:	e02d      	b.n	8001bb8 <tud_descriptor_string_cb+0xf0>

  case STRID_SERIAL:
    chr_count = 10;
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	61fb      	str	r3, [r7, #28]
    break;
 8001b60:	e02a      	b.n	8001bb8 <tud_descriptor_string_cb+0xf0>

  default:
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if (!(index < sizeof(string_desc_arr) / sizeof(string_desc_arr[0])))
 8001b62:	79fb      	ldrb	r3, [r7, #7]
 8001b64:	2b03      	cmp	r3, #3
 8001b66:	d901      	bls.n	8001b6c <tud_descriptor_string_cb+0xa4>
      return NULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e031      	b.n	8001bd0 <tud_descriptor_string_cb+0x108>

    const char *str = string_desc_arr[index];
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	4a1a      	ldr	r2, [pc, #104]	; (8001bd8 <tud_descriptor_string_cb+0x110>)
 8001b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b74:	60fb      	str	r3, [r7, #12]

    // Cap at max char
    chr_count = strlen(str);
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7fe fb2e 	bl	80001d8 <strlen>
 8001b7c:	61f8      	str	r0, [r7, #28]
    size_t const max_count = sizeof(_desc_str) / sizeof(_desc_str[0]) - 1; // -1 for string type
 8001b7e:	2320      	movs	r3, #32
 8001b80:	60bb      	str	r3, [r7, #8]
    if (chr_count > max_count)
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	429a      	cmp	r2, r3
 8001b88:	d901      	bls.n	8001b8e <tud_descriptor_string_cb+0xc6>
      chr_count = max_count;
 8001b8a:	68bb      	ldr	r3, [r7, #8]
 8001b8c:	61fb      	str	r3, [r7, #28]

    // Convert ASCII string into UTF-16
    for (size_t i = 0; i < chr_count; i++) {
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
 8001b92:	e00c      	b.n	8001bae <tud_descriptor_string_cb+0xe6>
      _desc_str[1 + i] = str[i];
 8001b94:	68fa      	ldr	r2, [r7, #12]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	4413      	add	r3, r2
 8001b9a:	781a      	ldrb	r2, [r3, #0]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	b291      	uxth	r1, r2
 8001ba2:	4a0e      	ldr	r2, [pc, #56]	; (8001bdc <tud_descriptor_string_cb+0x114>)
 8001ba4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (size_t i = 0; i < chr_count; i++) {
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d3ee      	bcc.n	8001b94 <tud_descriptor_string_cb+0xcc>
    }
    break;
 8001bb6:	bf00      	nop
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (uint16_t)((TUSB_DESC_STRING << 8) | (2 * chr_count + 2));
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	b29b      	uxth	r3, r3
 8001bc0:	005b      	lsls	r3, r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <tud_descriptor_string_cb+0x114>)
 8001bcc:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001bce:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <tud_descriptor_string_cb+0x114>)
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3720      	adds	r7, #32
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	20001344 	.word	0x20001344

08001be0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001be0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c18 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001be4:	f7ff ff38 	bl	8001a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bea:	490d      	ldr	r1, [pc, #52]	; (8001c20 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bec:	4a0d      	ldr	r2, [pc, #52]	; (8001c24 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bf0:	e002      	b.n	8001bf8 <LoopCopyDataInit>

08001bf2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bf2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bf4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bf6:	3304      	adds	r3, #4

08001bf8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bf8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bfc:	d3f9      	bcc.n	8001bf2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bfe:	4a0a      	ldr	r2, [pc, #40]	; (8001c28 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c00:	4c0a      	ldr	r4, [pc, #40]	; (8001c2c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c04:	e001      	b.n	8001c0a <LoopFillZerobss>

08001c06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c08:	3204      	adds	r2, #4

08001c0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c0c:	d3fb      	bcc.n	8001c06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c0e:	f006 fd15 	bl	800863c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c12:	f7fe ff89 	bl	8000b28 <main>
  bx  lr    
 8001c16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001c1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c20:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001c24:	08008978 	.word	0x08008978
  ldr r2, =_sbss
 8001c28:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001c2c:	20001584 	.word	0x20001584

08001c30 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c30:	e7fe      	b.n	8001c30 <ADC_IRQHandler>
	...

08001c34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c38:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_Init+0x40>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a0d      	ldr	r2, [pc, #52]	; (8001c74 <HAL_Init+0x40>)
 8001c3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c44:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_Init+0x40>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a0a      	ldr	r2, [pc, #40]	; (8001c74 <HAL_Init+0x40>)
 8001c4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c50:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <HAL_Init+0x40>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a07      	ldr	r2, [pc, #28]	; (8001c74 <HAL_Init+0x40>)
 8001c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c5c:	2003      	movs	r0, #3
 8001c5e:	f000 fd41 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c62:	200f      	movs	r0, #15
 8001c64:	f000 f808 	bl	8001c78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c68:	f7ff fdfa 	bl	8001860 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40023c00 	.word	0x40023c00

08001c78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c80:	4b12      	ldr	r3, [pc, #72]	; (8001ccc <HAL_InitTick+0x54>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <HAL_InitTick+0x58>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c96:	4618      	mov	r0, r3
 8001c98:	f000 fd59 	bl	800274e <HAL_SYSTICK_Config>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e00e      	b.n	8001cc4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b0f      	cmp	r3, #15
 8001caa:	d80a      	bhi.n	8001cc2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cac:	2200      	movs	r2, #0
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001cb4:	f000 fd21 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cb8:	4a06      	ldr	r2, [pc, #24]	; (8001cd4 <HAL_InitTick+0x5c>)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	e000      	b.n	8001cc4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	20000018 	.word	0x20000018
 8001cd4:	20000014 	.word	0x20000014

08001cd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <HAL_IncTick+0x20>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4b06      	ldr	r3, [pc, #24]	; (8001cfc <HAL_IncTick+0x24>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	4a04      	ldr	r2, [pc, #16]	; (8001cfc <HAL_IncTick+0x24>)
 8001cea:	6013      	str	r3, [r2, #0]
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	20000018 	.word	0x20000018
 8001cfc:	20001388 	.word	0x20001388

08001d00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
  return uwTick;
 8001d04:	4b03      	ldr	r3, [pc, #12]	; (8001d14 <HAL_GetTick+0x14>)
 8001d06:	681b      	ldr	r3, [r3, #0]
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	20001388 	.word	0x20001388

08001d18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b084      	sub	sp, #16
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d20:	f7ff ffee 	bl	8001d00 <HAL_GetTick>
 8001d24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d30:	d005      	beq.n	8001d3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_Delay+0x44>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d3e:	bf00      	nop
 8001d40:	f7ff ffde 	bl	8001d00 <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	68fa      	ldr	r2, [r7, #12]
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d8f7      	bhi.n	8001d40 <HAL_Delay+0x28>
  {
  }
}
 8001d50:	bf00      	nop
 8001d52:	bf00      	nop
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000018 	.word	0x20000018

08001d60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e033      	b.n	8001dde <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f7ff fd96 	bl	80018b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d118      	bne.n	8001dd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001da6:	f023 0302 	bic.w	r3, r3, #2
 8001daa:	f043 0202 	orr.w	r2, r3, #2
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 faca 	bl	800234c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc2:	f023 0303 	bic.w	r3, r3, #3
 8001dc6:	f043 0201 	orr.w	r2, r3, #1
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	641a      	str	r2, [r3, #64]	; 0x40
 8001dce:	e001      	b.n	8001dd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3710      	adds	r7, #16
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
	...

08001de8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d101      	bne.n	8001e02 <HAL_ADC_Start+0x1a>
 8001dfe:	2302      	movs	r3, #2
 8001e00:	e097      	b.n	8001f32 <HAL_ADC_Start+0x14a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2201      	movs	r2, #1
 8001e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d018      	beq.n	8001e4a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 0201 	orr.w	r2, r2, #1
 8001e26:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e28:	4b45      	ldr	r3, [pc, #276]	; (8001f40 <HAL_ADC_Start+0x158>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a45      	ldr	r2, [pc, #276]	; (8001f44 <HAL_ADC_Start+0x15c>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0c9a      	lsrs	r2, r3, #18
 8001e34:	4613      	mov	r3, r2
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	4413      	add	r3, r2
 8001e3a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e3c:	e002      	b.n	8001e44 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	3b01      	subs	r3, #1
 8001e42:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f9      	bne.n	8001e3e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d15f      	bne.n	8001f18 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001e60:	f023 0301 	bic.w	r3, r3, #1
 8001e64:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001e82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e96:	d106      	bne.n	8001ea6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	f023 0206 	bic.w	r2, r3, #6
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ea4:	e002      	b.n	8001eac <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <HAL_ADC_Start+0x160>)
 8001eb6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ec0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d129      	bne.n	8001f30 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	689a      	ldr	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	e020      	b.n	8001f30 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a16      	ldr	r2, [pc, #88]	; (8001f4c <HAL_ADC_Start+0x164>)
 8001ef4:	4293      	cmp	r3, r2
 8001ef6:	d11b      	bne.n	8001f30 <HAL_ADC_Start+0x148>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d114      	bne.n	8001f30 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	689a      	ldr	r2, [r3, #8]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001f14:	609a      	str	r2, [r3, #8]
 8001f16:	e00b      	b.n	8001f30 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	f043 0210 	orr.w	r2, r3, #16
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	f043 0201 	orr.w	r2, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000000 	.word	0x20000000
 8001f44:	431bde83 	.word	0x431bde83
 8001f48:	40012300 	.word	0x40012300
 8001f4c:	40012000 	.word	0x40012000

08001f50 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_ADC_Stop+0x16>
 8001f62:	2302      	movs	r3, #2
 8001f64:	e021      	b.n	8001faa <HAL_ADC_Stop+0x5a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2201      	movs	r2, #1
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0201 	bic.w	r2, r2, #1
 8001f7c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d109      	bne.n	8001fa0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f90:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f94:	f023 0301 	bic.w	r3, r3, #1
 8001f98:	f043 0201 	orr.w	r2, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fd2:	d113      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fe2:	d10b      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe8:	f043 0220 	orr.w	r2, r3, #32
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e063      	b.n	80020c4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ffc:	f7ff fe80 	bl	8001d00 <HAL_GetTick>
 8002000:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002002:	e021      	b.n	8002048 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800200a:	d01d      	beq.n	8002048 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <HAL_ADC_PollForConversion+0x6c>
 8002012:	f7ff fe75 	bl	8001d00 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d212      	bcs.n	8002048 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d00b      	beq.n	8002048 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f043 0204 	orr.w	r2, r3, #4
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002044:	2303      	movs	r3, #3
 8002046:	e03d      	b.n	80020c4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0302 	and.w	r3, r3, #2
 8002052:	2b02      	cmp	r3, #2
 8002054:	d1d6      	bne.n	8002004 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0212 	mvn.w	r2, #18
 800205e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002064:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d123      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800207e:	2b00      	cmp	r3, #0
 8002080:	d11f      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800208c:	2b00      	cmp	r3, #0
 800208e:	d006      	beq.n	800209e <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d111      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d105      	bne.n	80020c2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	f043 0201 	orr.w	r2, r3, #1
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80020c2:	2300      	movs	r3, #0
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b083      	sub	sp, #12
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80020da:	4618      	mov	r0, r3
 80020dc:	370c      	adds	r7, #12
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020fc:	2b01      	cmp	r3, #1
 80020fe:	d101      	bne.n	8002104 <HAL_ADC_ConfigChannel+0x1c>
 8002100:	2302      	movs	r3, #2
 8002102:	e113      	b.n	800232c <HAL_ADC_ConfigChannel+0x244>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b09      	cmp	r3, #9
 8002112:	d925      	bls.n	8002160 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	68d9      	ldr	r1, [r3, #12]
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	b29b      	uxth	r3, r3
 8002120:	461a      	mov	r2, r3
 8002122:	4613      	mov	r3, r2
 8002124:	005b      	lsls	r3, r3, #1
 8002126:	4413      	add	r3, r2
 8002128:	3b1e      	subs	r3, #30
 800212a:	2207      	movs	r2, #7
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43da      	mvns	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	400a      	ands	r2, r1
 8002138:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68d9      	ldr	r1, [r3, #12]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	4603      	mov	r3, r0
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4403      	add	r3, r0
 8002152:	3b1e      	subs	r3, #30
 8002154:	409a      	lsls	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	430a      	orrs	r2, r1
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	e022      	b.n	80021a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6919      	ldr	r1, [r3, #16]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	461a      	mov	r2, r3
 800216e:	4613      	mov	r3, r2
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4413      	add	r3, r2
 8002174:	2207      	movs	r2, #7
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	400a      	ands	r2, r1
 8002182:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6919      	ldr	r1, [r3, #16]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	689a      	ldr	r2, [r3, #8]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	4603      	mov	r3, r0
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	4403      	add	r3, r0
 800219c:	409a      	lsls	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b06      	cmp	r3, #6
 80021ac:	d824      	bhi.n	80021f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	4413      	add	r3, r2
 80021be:	3b05      	subs	r3, #5
 80021c0:	221f      	movs	r2, #31
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	400a      	ands	r2, r1
 80021ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	b29b      	uxth	r3, r3
 80021dc:	4618      	mov	r0, r3
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b05      	subs	r3, #5
 80021ea:	fa00 f203 	lsl.w	r2, r0, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	635a      	str	r2, [r3, #52]	; 0x34
 80021f6:	e04c      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	2b0c      	cmp	r3, #12
 80021fe:	d824      	bhi.n	800224a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685a      	ldr	r2, [r3, #4]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	3b23      	subs	r3, #35	; 0x23
 8002212:	221f      	movs	r2, #31
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	43da      	mvns	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	400a      	ands	r2, r1
 8002220:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b29b      	uxth	r3, r3
 800222e:	4618      	mov	r0, r3
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	3b23      	subs	r3, #35	; 0x23
 800223c:	fa00 f203 	lsl.w	r2, r0, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
 8002248:	e023      	b.n	8002292 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	4413      	add	r3, r2
 800225a:	3b41      	subs	r3, #65	; 0x41
 800225c:	221f      	movs	r2, #31
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	400a      	ands	r2, r1
 800226a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	4618      	mov	r0, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	4613      	mov	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	4413      	add	r3, r2
 8002284:	3b41      	subs	r3, #65	; 0x41
 8002286:	fa00 f203 	lsl.w	r2, r0, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002292:	4b29      	ldr	r3, [pc, #164]	; (8002338 <HAL_ADC_ConfigChannel+0x250>)
 8002294:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_ADC_ConfigChannel+0x254>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d10f      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d8>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b12      	cmp	r3, #18
 80022a6:	d10b      	bne.n	80022c0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a1d      	ldr	r2, [pc, #116]	; (800233c <HAL_ADC_ConfigChannel+0x254>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d12b      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x23a>
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_ADC_ConfigChannel+0x258>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d003      	beq.n	80022dc <HAL_ADC_ConfigChannel+0x1f4>
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b11      	cmp	r3, #17
 80022da:	d122      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a11      	ldr	r2, [pc, #68]	; (8002340 <HAL_ADC_ConfigChannel+0x258>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d111      	bne.n	8002322 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <HAL_ADC_ConfigChannel+0x25c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a11      	ldr	r2, [pc, #68]	; (8002348 <HAL_ADC_ConfigChannel+0x260>)
 8002304:	fba2 2303 	umull	r2, r3, r2, r3
 8002308:	0c9a      	lsrs	r2, r3, #18
 800230a:	4613      	mov	r3, r2
 800230c:	009b      	lsls	r3, r3, #2
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002314:	e002      	b.n	800231c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002316:	68bb      	ldr	r3, [r7, #8]
 8002318:	3b01      	subs	r3, #1
 800231a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1f9      	bne.n	8002316 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	40012300 	.word	0x40012300
 800233c:	40012000 	.word	0x40012000
 8002340:	10000012 	.word	0x10000012
 8002344:	20000000 	.word	0x20000000
 8002348:	431bde83 	.word	0x431bde83

0800234c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002354:	4b79      	ldr	r3, [pc, #484]	; (800253c <ADC_Init+0x1f0>)
 8002356:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	685a      	ldr	r2, [r3, #4]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	431a      	orrs	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	691b      	ldr	r3, [r3, #16]
 800238c:	021a      	lsls	r2, r3, #8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	6859      	ldr	r1, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6899      	ldr	r1, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023de:	4a58      	ldr	r2, [pc, #352]	; (8002540 <ADC_Init+0x1f4>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d022      	beq.n	800242a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	689a      	ldr	r2, [r3, #8]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6899      	ldr	r1, [r3, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	430a      	orrs	r2, r1
 8002404:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	6899      	ldr	r1, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e00f      	b.n	800244a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002438:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002448:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689a      	ldr	r2, [r3, #8]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f022 0202 	bic.w	r2, r2, #2
 8002458:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	6899      	ldr	r1, [r3, #8]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	7e1b      	ldrb	r3, [r3, #24]
 8002464:	005a      	lsls	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d01b      	beq.n	80024b0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002486:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002496:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6859      	ldr	r1, [r3, #4]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a2:	3b01      	subs	r3, #1
 80024a4:	035a      	lsls	r2, r3, #13
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	e007      	b.n	80024c0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	685a      	ldr	r2, [r3, #4]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024be:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	3b01      	subs	r3, #1
 80024dc:	051a      	lsls	r2, r3, #20
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	430a      	orrs	r2, r1
 80024e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	689a      	ldr	r2, [r3, #8]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6899      	ldr	r1, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002502:	025a      	lsls	r2, r3, #9
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	430a      	orrs	r2, r1
 800250a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	689a      	ldr	r2, [r3, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800251a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6899      	ldr	r1, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	029a      	lsls	r2, r3, #10
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	609a      	str	r2, [r3, #8]
}
 8002530:	bf00      	nop
 8002532:	3714      	adds	r7, #20
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr
 800253c:	40012300 	.word	0x40012300
 8002540:	0f000001 	.word	0x0f000001

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	; (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	; (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	; (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	; (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	; 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	; 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	; (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff3e 	bl	800258c <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff8e 	bl	8002638 <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5d 	bl	80025e4 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff31 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa2 	bl	80026a0 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
	...

08002768 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002772:	2300      	movs	r3, #0
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002776:	2300      	movs	r3, #0
 8002778:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800277a:	2300      	movs	r3, #0
 800277c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	2300      	movs	r3, #0
 8002780:	61fb      	str	r3, [r7, #28]
 8002782:	e159      	b.n	8002a38 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002784:	2201      	movs	r2, #1
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	4013      	ands	r3, r2
 8002796:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002798:	693a      	ldr	r2, [r7, #16]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	429a      	cmp	r2, r3
 800279e:	f040 8148 	bne.w	8002a32 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d005      	beq.n	80027ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d130      	bne.n	800281c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	2203      	movs	r2, #3
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43db      	mvns	r3, r3
 80027cc:	69ba      	ldr	r2, [r7, #24]
 80027ce:	4013      	ands	r3, r2
 80027d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	68da      	ldr	r2, [r3, #12]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	005b      	lsls	r3, r3, #1
 80027da:	fa02 f303 	lsl.w	r3, r2, r3
 80027de:	69ba      	ldr	r2, [r7, #24]
 80027e0:	4313      	orrs	r3, r2
 80027e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027f0:	2201      	movs	r2, #1
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	091b      	lsrs	r3, r3, #4
 8002806:	f003 0201 	and.w	r2, r3, #1
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	69ba      	ldr	r2, [r7, #24]
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f003 0303 	and.w	r3, r3, #3
 8002824:	2b03      	cmp	r3, #3
 8002826:	d017      	beq.n	8002858 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	005b      	lsls	r3, r3, #1
 8002832:	2203      	movs	r2, #3
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4313      	orrs	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69ba      	ldr	r2, [r7, #24]
 8002856:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 0303 	and.w	r3, r3, #3
 8002860:	2b02      	cmp	r3, #2
 8002862:	d123      	bne.n	80028ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	08da      	lsrs	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	3208      	adds	r2, #8
 800286c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002870:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	220f      	movs	r2, #15
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	43db      	mvns	r3, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4013      	ands	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	f003 0307 	and.w	r3, r3, #7
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	4313      	orrs	r3, r2
 800289c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	08da      	lsrs	r2, r3, #3
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3208      	adds	r2, #8
 80028a6:	69b9      	ldr	r1, [r7, #24]
 80028a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	2203      	movs	r2, #3
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 0203 	and.w	r2, r3, #3
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	fa02 f303 	lsl.w	r3, r2, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80a2 	beq.w	8002a32 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	4b57      	ldr	r3, [pc, #348]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	4a56      	ldr	r2, [pc, #344]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 80028f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028fc:	6453      	str	r3, [r2, #68]	; 0x44
 80028fe:	4b54      	ldr	r3, [pc, #336]	; (8002a50 <HAL_GPIO_Init+0x2e8>)
 8002900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002902:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002906:	60fb      	str	r3, [r7, #12]
 8002908:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800290a:	4a52      	ldr	r2, [pc, #328]	; (8002a54 <HAL_GPIO_Init+0x2ec>)
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	089b      	lsrs	r3, r3, #2
 8002910:	3302      	adds	r3, #2
 8002912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002916:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	220f      	movs	r2, #15
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	43db      	mvns	r3, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4013      	ands	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a49      	ldr	r2, [pc, #292]	; (8002a58 <HAL_GPIO_Init+0x2f0>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d019      	beq.n	800296a <HAL_GPIO_Init+0x202>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a48      	ldr	r2, [pc, #288]	; (8002a5c <HAL_GPIO_Init+0x2f4>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d013      	beq.n	8002966 <HAL_GPIO_Init+0x1fe>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a47      	ldr	r2, [pc, #284]	; (8002a60 <HAL_GPIO_Init+0x2f8>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d00d      	beq.n	8002962 <HAL_GPIO_Init+0x1fa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a46      	ldr	r2, [pc, #280]	; (8002a64 <HAL_GPIO_Init+0x2fc>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d007      	beq.n	800295e <HAL_GPIO_Init+0x1f6>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a45      	ldr	r2, [pc, #276]	; (8002a68 <HAL_GPIO_Init+0x300>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d101      	bne.n	800295a <HAL_GPIO_Init+0x1f2>
 8002956:	2304      	movs	r3, #4
 8002958:	e008      	b.n	800296c <HAL_GPIO_Init+0x204>
 800295a:	2307      	movs	r3, #7
 800295c:	e006      	b.n	800296c <HAL_GPIO_Init+0x204>
 800295e:	2303      	movs	r3, #3
 8002960:	e004      	b.n	800296c <HAL_GPIO_Init+0x204>
 8002962:	2302      	movs	r3, #2
 8002964:	e002      	b.n	800296c <HAL_GPIO_Init+0x204>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <HAL_GPIO_Init+0x204>
 800296a:	2300      	movs	r3, #0
 800296c:	69fa      	ldr	r2, [r7, #28]
 800296e:	f002 0203 	and.w	r2, r2, #3
 8002972:	0092      	lsls	r2, r2, #2
 8002974:	4093      	lsls	r3, r2
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4313      	orrs	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800297c:	4935      	ldr	r1, [pc, #212]	; (8002a54 <HAL_GPIO_Init+0x2ec>)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	089b      	lsrs	r3, r3, #2
 8002982:	3302      	adds	r3, #2
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298a:	4b38      	ldr	r3, [pc, #224]	; (8002a6c <HAL_GPIO_Init+0x304>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	43db      	mvns	r3, r3
 8002994:	69ba      	ldr	r2, [r7, #24]
 8002996:	4013      	ands	r3, r2
 8002998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d003      	beq.n	80029ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029ae:	4a2f      	ldr	r2, [pc, #188]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b4:	4b2d      	ldr	r3, [pc, #180]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029b6:	68db      	ldr	r3, [r3, #12]
 80029b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	43db      	mvns	r3, r3
 80029be:	69ba      	ldr	r2, [r7, #24]
 80029c0:	4013      	ands	r3, r2
 80029c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d003      	beq.n	80029d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029da:	69bb      	ldr	r3, [r7, #24]
 80029dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029de:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_GPIO_Init+0x304>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a02:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a08:	4b18      	ldr	r3, [pc, #96]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d003      	beq.n	8002a2c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a2c:	4a0f      	ldr	r2, [pc, #60]	; (8002a6c <HAL_GPIO_Init+0x304>)
 8002a2e:	69bb      	ldr	r3, [r7, #24]
 8002a30:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3301      	adds	r3, #1
 8002a36:	61fb      	str	r3, [r7, #28]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	2b0f      	cmp	r3, #15
 8002a3c:	f67f aea2 	bls.w	8002784 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3724      	adds	r7, #36	; 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40013800 	.word	0x40013800
 8002a58:	40020000 	.word	0x40020000
 8002a5c:	40020400 	.word	0x40020400
 8002a60:	40020800 	.word	0x40020800
 8002a64:	40020c00 	.word	0x40020c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b086      	sub	sp, #24
 8002aa6:	af02      	add	r7, sp, #8
 8002aa8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d101      	bne.n	8002ab4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e101      	b.n	8002cb8 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d106      	bne.n	8002ad4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f7fe ff32 	bl	8001938 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ae2:	d102      	bne.n	8002aea <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4618      	mov	r0, r3
 8002af0:	f000 fd6e 	bl	80035d0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6818      	ldr	r0, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	7c1a      	ldrb	r2, [r3, #16]
 8002afc:	f88d 2000 	strb.w	r2, [sp]
 8002b00:	3304      	adds	r3, #4
 8002b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b04:	f000 fd00 	bl	8003508 <USB_CoreInit>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2202      	movs	r2, #2
 8002b12:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e0ce      	b.n	8002cb8 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2100      	movs	r1, #0
 8002b20:	4618      	mov	r0, r3
 8002b22:	f000 fd66 	bl	80035f2 <USB_SetCurrentMode>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002b34:	2301      	movs	r3, #1
 8002b36:	e0bf      	b.n	8002cb8 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b38:	2300      	movs	r3, #0
 8002b3a:	73fb      	strb	r3, [r7, #15]
 8002b3c:	e04a      	b.n	8002bd4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	4413      	add	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	3315      	adds	r3, #21
 8002b4e:	2201      	movs	r2, #1
 8002b50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b52:	7bfa      	ldrb	r2, [r7, #15]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	00db      	lsls	r3, r3, #3
 8002b5a:	4413      	add	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	3314      	adds	r3, #20
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b66:	7bfa      	ldrb	r2, [r7, #15]
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	b298      	uxth	r0, r3
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	332e      	adds	r3, #46	; 0x2e
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b7e:	7bfa      	ldrb	r2, [r7, #15]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	00db      	lsls	r3, r3, #3
 8002b86:	4413      	add	r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3318      	adds	r3, #24
 8002b8e:	2200      	movs	r2, #0
 8002b90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	00db      	lsls	r3, r3, #3
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	331c      	adds	r3, #28
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ba6:	7bfa      	ldrb	r2, [r7, #15]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3320      	adds	r3, #32
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002bba:	7bfa      	ldrb	r2, [r7, #15]
 8002bbc:	6879      	ldr	r1, [r7, #4]
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	3324      	adds	r3, #36	; 0x24
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	791b      	ldrb	r3, [r3, #4]
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d3af      	bcc.n	8002b3e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bde:	2300      	movs	r3, #0
 8002be0:	73fb      	strb	r3, [r7, #15]
 8002be2:	e044      	b.n	8002c6e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002be4:	7bfa      	ldrb	r2, [r7, #15]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bfa:	7bfa      	ldrb	r2, [r7, #15]
 8002bfc:	6879      	ldr	r1, [r7, #4]
 8002bfe:	4613      	mov	r3, r2
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4413      	add	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	440b      	add	r3, r1
 8002c08:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8002c0c:	7bfa      	ldrb	r2, [r7, #15]
 8002c0e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c10:	7bfa      	ldrb	r2, [r7, #15]
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	4613      	mov	r3, r2
 8002c16:	00db      	lsls	r3, r3, #3
 8002c18:	4413      	add	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	440b      	add	r3, r1
 8002c1e:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002c26:	7bfa      	ldrb	r2, [r7, #15]
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	440b      	add	r3, r1
 8002c34:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8002c38:	2200      	movs	r2, #0
 8002c3a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002c3c:	7bfa      	ldrb	r2, [r7, #15]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4413      	add	r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002c4e:	2200      	movs	r2, #0
 8002c50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	73fb      	strb	r3, [r7, #15]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	791b      	ldrb	r3, [r3, #4]
 8002c72:	7bfa      	ldrb	r2, [r7, #15]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d3b5      	bcc.n	8002be4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	7c1a      	ldrb	r2, [r3, #16]
 8002c80:	f88d 2000 	strb.w	r2, [sp]
 8002c84:	3304      	adds	r3, #4
 8002c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c88:	f000 fd00 	bl	800368c <USB_DevInit>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d005      	beq.n	8002c9e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2202      	movs	r2, #2
 8002c96:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e00c      	b.n	8002cb8 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fec8 	bl	8003a46 <USB_DevDisconnect>

  return HAL_OK;
 8002cb6:	2300      	movs	r3, #0
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3710      	adds	r7, #16
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e267      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d075      	beq.n	8002dca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cde:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d00c      	beq.n	8002d04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cea:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d112      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cf6:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d04:	4b7e      	ldr	r3, [pc, #504]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d05b      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x108>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d157      	bne.n	8002dc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e242      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d24:	d106      	bne.n	8002d34 <HAL_RCC_OscConfig+0x74>
 8002d26:	4b76      	ldr	r3, [pc, #472]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a75      	ldr	r2, [pc, #468]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	6013      	str	r3, [r2, #0]
 8002d32:	e01d      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x98>
 8002d3e:	4b70      	ldr	r3, [pc, #448]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a6f      	ldr	r2, [pc, #444]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	4b6d      	ldr	r3, [pc, #436]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a6c      	ldr	r2, [pc, #432]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6013      	str	r3, [r2, #0]
 8002d56:	e00b      	b.n	8002d70 <HAL_RCC_OscConfig+0xb0>
 8002d58:	4b69      	ldr	r3, [pc, #420]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a68      	ldr	r2, [pc, #416]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b66      	ldr	r3, [pc, #408]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a65      	ldr	r2, [pc, #404]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d013      	beq.n	8002da0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d78:	f7fe ffc2 	bl	8001d00 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe ffbe 	bl	8001d00 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e207      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	4b5b      	ldr	r3, [pc, #364]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0xc0>
 8002d9e:	e014      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da0:	f7fe ffae 	bl	8001d00 <HAL_GetTick>
 8002da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002da6:	e008      	b.n	8002dba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002da8:	f7fe ffaa 	bl	8001d00 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b64      	cmp	r3, #100	; 0x64
 8002db4:	d901      	bls.n	8002dba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e1f3      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d1f0      	bne.n	8002da8 <HAL_RCC_OscConfig+0xe8>
 8002dc6:	e000      	b.n	8002dca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f003 0302 	and.w	r3, r3, #2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d063      	beq.n	8002e9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dd6:	4b4a      	ldr	r3, [pc, #296]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002de2:	4b47      	ldr	r3, [pc, #284]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11c      	bne.n	8002e28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dee:	4b44      	ldr	r3, [pc, #272]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d116      	bne.n	8002e28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dfa:	4b41      	ldr	r3, [pc, #260]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d005      	beq.n	8002e12 <HAL_RCC_OscConfig+0x152>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e1c7      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e12:	4b3b      	ldr	r3, [pc, #236]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4937      	ldr	r1, [pc, #220]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e26:	e03a      	b.n	8002e9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d020      	beq.n	8002e72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e30:	4b34      	ldr	r3, [pc, #208]	; (8002f04 <HAL_RCC_OscConfig+0x244>)
 8002e32:	2201      	movs	r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e36:	f7fe ff63 	bl	8001d00 <HAL_GetTick>
 8002e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3c:	e008      	b.n	8002e50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e3e:	f7fe ff5f 	bl	8001d00 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d901      	bls.n	8002e50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e4c:	2303      	movs	r3, #3
 8002e4e:	e1a8      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	4b2b      	ldr	r3, [pc, #172]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0302 	and.w	r3, r3, #2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e5c:	4b28      	ldr	r3, [pc, #160]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	00db      	lsls	r3, r3, #3
 8002e6a:	4925      	ldr	r1, [pc, #148]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	600b      	str	r3, [r1, #0]
 8002e70:	e015      	b.n	8002e9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e72:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <HAL_RCC_OscConfig+0x244>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e78:	f7fe ff42 	bl	8001d00 <HAL_GetTick>
 8002e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e7e:	e008      	b.n	8002e92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e80:	f7fe ff3e 	bl	8001d00 <HAL_GetTick>
 8002e84:	4602      	mov	r2, r0
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d901      	bls.n	8002e92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e187      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f003 0302 	and.w	r3, r3, #2
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d1f0      	bne.n	8002e80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f003 0308 	and.w	r3, r3, #8
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d036      	beq.n	8002f18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	695b      	ldr	r3, [r3, #20]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d016      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002eb2:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <HAL_RCC_OscConfig+0x248>)
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb8:	f7fe ff22 	bl	8001d00 <HAL_GetTick>
 8002ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ebe:	e008      	b.n	8002ed2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ec0:	f7fe ff1e 	bl	8001d00 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d901      	bls.n	8002ed2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ece:	2303      	movs	r3, #3
 8002ed0:	e167      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <HAL_RCC_OscConfig+0x240>)
 8002ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d0f0      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x200>
 8002ede:	e01b      	b.n	8002f18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_OscConfig+0x248>)
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ee6:	f7fe ff0b 	bl	8001d00 <HAL_GetTick>
 8002eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eec:	e00e      	b.n	8002f0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eee:	f7fe ff07 	bl	8001d00 <HAL_GetTick>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	2b02      	cmp	r3, #2
 8002efa:	d907      	bls.n	8002f0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e150      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
 8002f00:	40023800 	.word	0x40023800
 8002f04:	42470000 	.word	0x42470000
 8002f08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f0c:	4b88      	ldr	r3, [pc, #544]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f10:	f003 0302 	and.w	r3, r3, #2
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d1ea      	bne.n	8002eee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0304 	and.w	r3, r3, #4
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8097 	beq.w	8003054 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b81      	ldr	r3, [pc, #516]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10f      	bne.n	8002f56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	4b7d      	ldr	r3, [pc, #500]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3e:	4a7c      	ldr	r2, [pc, #496]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f44:	6413      	str	r3, [r2, #64]	; 0x40
 8002f46:	4b7a      	ldr	r3, [pc, #488]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	60bb      	str	r3, [r7, #8]
 8002f50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f52:	2301      	movs	r3, #1
 8002f54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f56:	4b77      	ldr	r3, [pc, #476]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d118      	bne.n	8002f94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f62:	4b74      	ldr	r3, [pc, #464]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a73      	ldr	r2, [pc, #460]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f6e:	f7fe fec7 	bl	8001d00 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f76:	f7fe fec3 	bl	8001d00 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e10c      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f88:	4b6a      	ldr	r3, [pc, #424]	; (8003134 <HAL_RCC_OscConfig+0x474>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d106      	bne.n	8002faa <HAL_RCC_OscConfig+0x2ea>
 8002f9c:	4b64      	ldr	r3, [pc, #400]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa0:	4a63      	ldr	r2, [pc, #396]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	f043 0301 	orr.w	r3, r3, #1
 8002fa6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa8:	e01c      	b.n	8002fe4 <HAL_RCC_OscConfig+0x324>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	2b05      	cmp	r3, #5
 8002fb0:	d10c      	bne.n	8002fcc <HAL_RCC_OscConfig+0x30c>
 8002fb2:	4b5f      	ldr	r3, [pc, #380]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	4a5e      	ldr	r2, [pc, #376]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fb8:	f043 0304 	orr.w	r3, r3, #4
 8002fbc:	6713      	str	r3, [r2, #112]	; 0x70
 8002fbe:	4b5c      	ldr	r3, [pc, #368]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc2:	4a5b      	ldr	r2, [pc, #364]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fca:	e00b      	b.n	8002fe4 <HAL_RCC_OscConfig+0x324>
 8002fcc:	4b58      	ldr	r3, [pc, #352]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a57      	ldr	r2, [pc, #348]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f023 0301 	bic.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	4b55      	ldr	r3, [pc, #340]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fdc:	4a54      	ldr	r2, [pc, #336]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8002fde:	f023 0304 	bic.w	r3, r3, #4
 8002fe2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d015      	beq.n	8003018 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fec:	f7fe fe88 	bl	8001d00 <HAL_GetTick>
 8002ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fe84 	bl	8001d00 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e0cb      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b49      	ldr	r3, [pc, #292]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x334>
 8003016:	e014      	b.n	8003042 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003018:	f7fe fe72 	bl	8001d00 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800301e:	e00a      	b.n	8003036 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003020:	f7fe fe6e 	bl	8001d00 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	; 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e0b5      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003036:	4b3e      	ldr	r3, [pc, #248]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d1ee      	bne.n	8003020 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d105      	bne.n	8003054 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003048:	4b39      	ldr	r3, [pc, #228]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	4a38      	ldr	r2, [pc, #224]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 800304e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003052:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 80a1 	beq.w	80031a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800305e:	4b34      	ldr	r3, [pc, #208]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f003 030c 	and.w	r3, r3, #12
 8003066:	2b08      	cmp	r3, #8
 8003068:	d05c      	beq.n	8003124 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	2b02      	cmp	r3, #2
 8003070:	d141      	bne.n	80030f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003072:	4b31      	ldr	r3, [pc, #196]	; (8003138 <HAL_RCC_OscConfig+0x478>)
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fe fe42 	bl	8001d00 <HAL_GetTick>
 800307c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800307e:	e008      	b.n	8003092 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003080:	f7fe fe3e 	bl	8001d00 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	2b02      	cmp	r3, #2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e087      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	4b27      	ldr	r3, [pc, #156]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d1f0      	bne.n	8003080 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	69da      	ldr	r2, [r3, #28]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	019b      	lsls	r3, r3, #6
 80030ae:	431a      	orrs	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b4:	085b      	lsrs	r3, r3, #1
 80030b6:	3b01      	subs	r3, #1
 80030b8:	041b      	lsls	r3, r3, #16
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c0:	061b      	lsls	r3, r3, #24
 80030c2:	491b      	ldr	r1, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <HAL_RCC_OscConfig+0x478>)
 80030ca:	2201      	movs	r2, #1
 80030cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ce:	f7fe fe17 	bl	8001d00 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030d6:	f7fe fe13 	bl	8001d00 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e05c      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e8:	4b11      	ldr	r3, [pc, #68]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x416>
 80030f4:	e054      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030f6:	4b10      	ldr	r3, [pc, #64]	; (8003138 <HAL_RCC_OscConfig+0x478>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fe00 	bl	8001d00 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003104:	f7fe fdfc 	bl	8001d00 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e045      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003116:	4b06      	ldr	r3, [pc, #24]	; (8003130 <HAL_RCC_OscConfig+0x470>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x444>
 8003122:	e03d      	b.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d107      	bne.n	800313c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e038      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
 8003130:	40023800 	.word	0x40023800
 8003134:	40007000 	.word	0x40007000
 8003138:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800313c:	4b1b      	ldr	r3, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x4ec>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d028      	beq.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d121      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003162:	429a      	cmp	r2, r3
 8003164:	d11a      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800316c:	4013      	ands	r3, r2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003172:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003174:	4293      	cmp	r3, r2
 8003176:	d111      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	3b01      	subs	r3, #1
 8003186:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003188:	429a      	cmp	r2, r3
 800318a:	d107      	bne.n	800319c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003198:	429a      	cmp	r2, r3
 800319a:	d001      	beq.n	80031a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e000      	b.n	80031a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3718      	adds	r7, #24
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	40023800 	.word	0x40023800

080031b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b084      	sub	sp, #16
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	e0cc      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031c4:	4b68      	ldr	r3, [pc, #416]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	683a      	ldr	r2, [r7, #0]
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d90c      	bls.n	80031ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d2:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031d4:	683a      	ldr	r2, [r7, #0]
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031da:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	683a      	ldr	r2, [r7, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	d001      	beq.n	80031ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0b8      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d020      	beq.n	800323a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0304 	and.w	r3, r3, #4
 8003200:	2b00      	cmp	r3, #0
 8003202:	d005      	beq.n	8003210 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003204:	4b59      	ldr	r3, [pc, #356]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	4a58      	ldr	r2, [pc, #352]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800320a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800320e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f003 0308 	and.w	r3, r3, #8
 8003218:	2b00      	cmp	r3, #0
 800321a:	d005      	beq.n	8003228 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800321c:	4b53      	ldr	r3, [pc, #332]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	4a52      	ldr	r2, [pc, #328]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003222:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003226:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003228:	4b50      	ldr	r3, [pc, #320]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	494d      	ldr	r1, [pc, #308]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d044      	beq.n	80032d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d107      	bne.n	800325e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800324e:	4b47      	ldr	r3, [pc, #284]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d119      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e07f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d003      	beq.n	800326e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800326a:	2b03      	cmp	r3, #3
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800326e:	4b3f      	ldr	r3, [pc, #252]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e06f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	4b3b      	ldr	r3, [pc, #236]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e067      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800328e:	4b37      	ldr	r3, [pc, #220]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f023 0203 	bic.w	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	4934      	ldr	r1, [pc, #208]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800329c:	4313      	orrs	r3, r2
 800329e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a0:	f7fe fd2e 	bl	8001d00 <HAL_GetTick>
 80032a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032a6:	e00a      	b.n	80032be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032a8:	f7fe fd2a 	bl	8001d00 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d901      	bls.n	80032be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e04f      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	4b2b      	ldr	r3, [pc, #172]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f003 020c 	and.w	r2, r3, #12
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d1eb      	bne.n	80032a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d0:	4b25      	ldr	r3, [pc, #148]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	683a      	ldr	r2, [r7, #0]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d20c      	bcs.n	80032f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032e6:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_RCC_ClockConfig+0x1b8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f003 0307 	and.w	r3, r3, #7
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d001      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e032      	b.n	800335e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0304 	and.w	r3, r3, #4
 8003300:	2b00      	cmp	r3, #0
 8003302:	d008      	beq.n	8003316 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003304:	4b19      	ldr	r3, [pc, #100]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	4916      	ldr	r1, [pc, #88]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d009      	beq.n	8003336 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003322:	4b12      	ldr	r3, [pc, #72]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	691b      	ldr	r3, [r3, #16]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003336:	f000 f821 	bl	800337c <HAL_RCC_GetSysClockFreq>
 800333a:	4602      	mov	r2, r0
 800333c:	4b0b      	ldr	r3, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	091b      	lsrs	r3, r3, #4
 8003342:	f003 030f 	and.w	r3, r3, #15
 8003346:	490a      	ldr	r1, [pc, #40]	; (8003370 <HAL_RCC_ClockConfig+0x1c0>)
 8003348:	5ccb      	ldrb	r3, [r1, r3]
 800334a:	fa22 f303 	lsr.w	r3, r2, r3
 800334e:	4a09      	ldr	r2, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fe fc8e 	bl	8001c78 <HAL_InitTick>

  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023c00 	.word	0x40023c00
 800336c:	40023800 	.word	0x40023800
 8003370:	080088b0 	.word	0x080088b0
 8003374:	20000000 	.word	0x20000000
 8003378:	20000014 	.word	0x20000014

0800337c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800337c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003380:	b090      	sub	sp, #64	; 0x40
 8003382:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003384:	2300      	movs	r3, #0
 8003386:	637b      	str	r3, [r7, #52]	; 0x34
 8003388:	2300      	movs	r3, #0
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800338c:	2300      	movs	r3, #0
 800338e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003390:	2300      	movs	r3, #0
 8003392:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003394:	4b59      	ldr	r3, [pc, #356]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f003 030c 	and.w	r3, r3, #12
 800339c:	2b08      	cmp	r3, #8
 800339e:	d00d      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x40>
 80033a0:	2b08      	cmp	r3, #8
 80033a2:	f200 80a1 	bhi.w	80034e8 <HAL_RCC_GetSysClockFreq+0x16c>
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d002      	beq.n	80033b0 <HAL_RCC_GetSysClockFreq+0x34>
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d003      	beq.n	80033b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ae:	e09b      	b.n	80034e8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b53      	ldr	r3, [pc, #332]	; (8003500 <HAL_RCC_GetSysClockFreq+0x184>)
 80033b2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033b4:	e09b      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033b6:	4b53      	ldr	r3, [pc, #332]	; (8003504 <HAL_RCC_GetSysClockFreq+0x188>)
 80033b8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ba:	e098      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033bc:	4b4f      	ldr	r3, [pc, #316]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033c4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033c6:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d028      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033d2:	4b4a      	ldr	r3, [pc, #296]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	099b      	lsrs	r3, r3, #6
 80033d8:	2200      	movs	r2, #0
 80033da:	623b      	str	r3, [r7, #32]
 80033dc:	627a      	str	r2, [r7, #36]	; 0x24
 80033de:	6a3b      	ldr	r3, [r7, #32]
 80033e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033e4:	2100      	movs	r1, #0
 80033e6:	4b47      	ldr	r3, [pc, #284]	; (8003504 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e8:	fb03 f201 	mul.w	r2, r3, r1
 80033ec:	2300      	movs	r3, #0
 80033ee:	fb00 f303 	mul.w	r3, r0, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	4a43      	ldr	r2, [pc, #268]	; (8003504 <HAL_RCC_GetSysClockFreq+0x188>)
 80033f6:	fba0 1202 	umull	r1, r2, r0, r2
 80033fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033fc:	460a      	mov	r2, r1
 80033fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8003400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003402:	4413      	add	r3, r2
 8003404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003408:	2200      	movs	r2, #0
 800340a:	61bb      	str	r3, [r7, #24]
 800340c:	61fa      	str	r2, [r7, #28]
 800340e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003412:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003416:	f7fd f9ed 	bl	80007f4 <__aeabi_uldivmod>
 800341a:	4602      	mov	r2, r0
 800341c:	460b      	mov	r3, r1
 800341e:	4613      	mov	r3, r2
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003422:	e053      	b.n	80034cc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003424:	4b35      	ldr	r3, [pc, #212]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	099b      	lsrs	r3, r3, #6
 800342a:	2200      	movs	r2, #0
 800342c:	613b      	str	r3, [r7, #16]
 800342e:	617a      	str	r2, [r7, #20]
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003436:	f04f 0b00 	mov.w	fp, #0
 800343a:	4652      	mov	r2, sl
 800343c:	465b      	mov	r3, fp
 800343e:	f04f 0000 	mov.w	r0, #0
 8003442:	f04f 0100 	mov.w	r1, #0
 8003446:	0159      	lsls	r1, r3, #5
 8003448:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800344c:	0150      	lsls	r0, r2, #5
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	ebb2 080a 	subs.w	r8, r2, sl
 8003456:	eb63 090b 	sbc.w	r9, r3, fp
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003466:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800346a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800346e:	ebb2 0408 	subs.w	r4, r2, r8
 8003472:	eb63 0509 	sbc.w	r5, r3, r9
 8003476:	f04f 0200 	mov.w	r2, #0
 800347a:	f04f 0300 	mov.w	r3, #0
 800347e:	00eb      	lsls	r3, r5, #3
 8003480:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003484:	00e2      	lsls	r2, r4, #3
 8003486:	4614      	mov	r4, r2
 8003488:	461d      	mov	r5, r3
 800348a:	eb14 030a 	adds.w	r3, r4, sl
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	eb45 030b 	adc.w	r3, r5, fp
 8003494:	607b      	str	r3, [r7, #4]
 8003496:	f04f 0200 	mov.w	r2, #0
 800349a:	f04f 0300 	mov.w	r3, #0
 800349e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034a2:	4629      	mov	r1, r5
 80034a4:	028b      	lsls	r3, r1, #10
 80034a6:	4621      	mov	r1, r4
 80034a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034ac:	4621      	mov	r1, r4
 80034ae:	028a      	lsls	r2, r1, #10
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	2200      	movs	r2, #0
 80034b8:	60bb      	str	r3, [r7, #8]
 80034ba:	60fa      	str	r2, [r7, #12]
 80034bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034c0:	f7fd f998 	bl	80007f4 <__aeabi_uldivmod>
 80034c4:	4602      	mov	r2, r0
 80034c6:	460b      	mov	r3, r1
 80034c8:	4613      	mov	r3, r2
 80034ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_RCC_GetSysClockFreq+0x180>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	0c1b      	lsrs	r3, r3, #16
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	3301      	adds	r3, #1
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034e6:	e002      	b.n	80034ee <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b05      	ldr	r3, [pc, #20]	; (8003500 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ea:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3740      	adds	r7, #64	; 0x40
 80034f4:	46bd      	mov	sp, r7
 80034f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034fa:	bf00      	nop
 80034fc:	40023800 	.word	0x40023800
 8003500:	00f42400 	.word	0x00f42400
 8003504:	018cba80 	.word	0x018cba80

08003508 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003508:	b084      	sub	sp, #16
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
 8003512:	f107 001c 	add.w	r0, r7, #28
 8003516:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800351a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800351e:	2b01      	cmp	r3, #1
 8003520:	d123      	bne.n	800356a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003526:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003536:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800354a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 faa0 	bl	8003aa4 <USB_CoreReset>
 8003564:	4603      	mov	r3, r0
 8003566:	73fb      	strb	r3, [r7, #15]
 8003568:	e01b      	b.n	80035a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f000 fa94 	bl	8003aa4 <USB_CoreReset>
 800357c:	4603      	mov	r3, r0
 800357e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003580:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003584:	2b00      	cmp	r3, #0
 8003586:	d106      	bne.n	8003596 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
 8003594:	e005      	b.n	80035a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800359a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80035a2:	7fbb      	ldrb	r3, [r7, #30]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d10b      	bne.n	80035c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f043 0206 	orr.w	r2, r3, #6
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f043 0220 	orr.w	r2, r3, #32
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035cc:	b004      	add	sp, #16
 80035ce:	4770      	bx	lr

080035d0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f023 0201 	bic.w	r2, r3, #1
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	370c      	adds	r7, #12
 80035ea:	46bd      	mov	sp, r7
 80035ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f0:	4770      	bx	lr

080035f2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80035f2:	b580      	push	{r7, lr}
 80035f4:	b084      	sub	sp, #16
 80035f6:	af00      	add	r7, sp, #0
 80035f8:	6078      	str	r0, [r7, #4]
 80035fa:	460b      	mov	r3, r1
 80035fc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800360e:	78fb      	ldrb	r3, [r7, #3]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d115      	bne.n	8003640 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003620:	200a      	movs	r0, #10
 8003622:	f7fe fb79 	bl	8001d18 <HAL_Delay>
      ms += 10U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	330a      	adds	r3, #10
 800362a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fa2b 	bl	8003a88 <USB_GetMode>
 8003632:	4603      	mov	r3, r0
 8003634:	2b01      	cmp	r3, #1
 8003636:	d01e      	beq.n	8003676 <USB_SetCurrentMode+0x84>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2bc7      	cmp	r3, #199	; 0xc7
 800363c:	d9f0      	bls.n	8003620 <USB_SetCurrentMode+0x2e>
 800363e:	e01a      	b.n	8003676 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003640:	78fb      	ldrb	r3, [r7, #3]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d115      	bne.n	8003672 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68db      	ldr	r3, [r3, #12]
 800364a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003652:	200a      	movs	r0, #10
 8003654:	f7fe fb60 	bl	8001d18 <HAL_Delay>
      ms += 10U;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	330a      	adds	r3, #10
 800365c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 fa12 	bl	8003a88 <USB_GetMode>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d005      	beq.n	8003676 <USB_SetCurrentMode+0x84>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2bc7      	cmp	r3, #199	; 0xc7
 800366e:	d9f0      	bls.n	8003652 <USB_SetCurrentMode+0x60>
 8003670:	e001      	b.n	8003676 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e005      	b.n	8003682 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2bc8      	cmp	r3, #200	; 0xc8
 800367a:	d101      	bne.n	8003680 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e000      	b.n	8003682 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	4618      	mov	r0, r3
 8003684:	3710      	adds	r7, #16
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
	...

0800368c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800368c:	b084      	sub	sp, #16
 800368e:	b580      	push	{r7, lr}
 8003690:	b086      	sub	sp, #24
 8003692:	af00      	add	r7, sp, #0
 8003694:	6078      	str	r0, [r7, #4]
 8003696:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800369a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800369e:	2300      	movs	r3, #0
 80036a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	613b      	str	r3, [r7, #16]
 80036aa:	e009      	b.n	80036c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	3340      	adds	r3, #64	; 0x40
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	2200      	movs	r2, #0
 80036b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	3301      	adds	r3, #1
 80036be:	613b      	str	r3, [r7, #16]
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	2b0e      	cmp	r3, #14
 80036c4:	d9f2      	bls.n	80036ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80036c6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11c      	bne.n	8003708 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80036dc:	f043 0302 	orr.w	r3, r3, #2
 80036e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f2:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
 8003706:	e00b      	b.n	8003720 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003718:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003726:	461a      	mov	r2, r3
 8003728:	2300      	movs	r3, #0
 800372a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800372c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8003730:	2b01      	cmp	r3, #1
 8003732:	d10d      	bne.n	8003750 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003734:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003738:	2b00      	cmp	r3, #0
 800373a:	d104      	bne.n	8003746 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800373c:	2100      	movs	r1, #0
 800373e:	6878      	ldr	r0, [r7, #4]
 8003740:	f000 f968 	bl	8003a14 <USB_SetDevSpeed>
 8003744:	e008      	b.n	8003758 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003746:	2101      	movs	r1, #1
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f963 	bl	8003a14 <USB_SetDevSpeed>
 800374e:	e003      	b.n	8003758 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003750:	2103      	movs	r1, #3
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f95e 	bl	8003a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003758:	2110      	movs	r1, #16
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 f8fa 	bl	8003954 <USB_FlushTxFifo>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f924 	bl	80039b8 <USB_FlushRxFifo>
 8003770:	4603      	mov	r3, r0
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003780:	461a      	mov	r2, r3
 8003782:	2300      	movs	r3, #0
 8003784:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378c:	461a      	mov	r2, r3
 800378e:	2300      	movs	r3, #0
 8003790:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003798:	461a      	mov	r2, r3
 800379a:	2300      	movs	r3, #0
 800379c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800379e:	2300      	movs	r3, #0
 80037a0:	613b      	str	r3, [r7, #16]
 80037a2:	e043      	b.n	800382c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80037a4:	693b      	ldr	r3, [r7, #16]
 80037a6:	015a      	lsls	r2, r3, #5
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4413      	add	r3, r2
 80037ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ba:	d118      	bne.n	80037ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	015a      	lsls	r2, r3, #5
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4413      	add	r3, r2
 80037ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ce:	461a      	mov	r2, r3
 80037d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	e013      	b.n	8003800 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037e4:	461a      	mov	r2, r3
 80037e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80037ea:	6013      	str	r3, [r2, #0]
 80037ec:	e008      	b.n	8003800 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	015a      	lsls	r2, r3, #5
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4413      	add	r3, r2
 80037f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fa:	461a      	mov	r2, r3
 80037fc:	2300      	movs	r3, #0
 80037fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	015a      	lsls	r2, r3, #5
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4413      	add	r3, r2
 8003808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800380c:	461a      	mov	r2, r3
 800380e:	2300      	movs	r3, #0
 8003810:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	461a      	mov	r2, r3
 8003820:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003824:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	3301      	adds	r3, #1
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003830:	461a      	mov	r2, r3
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4293      	cmp	r3, r2
 8003836:	d3b5      	bcc.n	80037a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003838:	2300      	movs	r3, #0
 800383a:	613b      	str	r3, [r7, #16]
 800383c:	e043      	b.n	80038c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	015a      	lsls	r2, r3, #5
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4413      	add	r3, r2
 8003846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003850:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003854:	d118      	bne.n	8003888 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d10a      	bne.n	8003872 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	015a      	lsls	r2, r3, #5
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4413      	add	r3, r2
 8003864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003868:	461a      	mov	r2, r3
 800386a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800386e:	6013      	str	r3, [r2, #0]
 8003870:	e013      	b.n	800389a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	015a      	lsls	r2, r3, #5
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	4413      	add	r3, r2
 800387a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800387e:	461a      	mov	r2, r3
 8003880:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003884:	6013      	str	r3, [r2, #0]
 8003886:	e008      	b.n	800389a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	015a      	lsls	r2, r3, #5
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4413      	add	r3, r2
 8003890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003894:	461a      	mov	r2, r3
 8003896:	2300      	movs	r3, #0
 8003898:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038a6:	461a      	mov	r2, r3
 80038a8:	2300      	movs	r3, #0
 80038aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	015a      	lsls	r2, r3, #5
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4413      	add	r3, r2
 80038b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b8:	461a      	mov	r2, r3
 80038ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3301      	adds	r3, #1
 80038c4:	613b      	str	r3, [r7, #16]
 80038c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80038ca:	461a      	mov	r2, r3
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d3b5      	bcc.n	800383e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	68fa      	ldr	r2, [r7, #12]
 80038dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80038e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80038f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80038f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d105      	bne.n	8003908 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	699b      	ldr	r3, [r3, #24]
 8003900:	f043 0210 	orr.w	r2, r3, #16
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	699a      	ldr	r2, [r3, #24]
 800390c:	4b10      	ldr	r3, [pc, #64]	; (8003950 <USB_DevInit+0x2c4>)
 800390e:	4313      	orrs	r3, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003914:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8003918:	2b00      	cmp	r3, #0
 800391a:	d005      	beq.n	8003928 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f043 0208 	orr.w	r2, r3, #8
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003928:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800392c:	2b01      	cmp	r3, #1
 800392e:	d107      	bne.n	8003940 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003938:	f043 0304 	orr.w	r3, r3, #4
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003940:	7dfb      	ldrb	r3, [r7, #23]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800394c:	b004      	add	sp, #16
 800394e:	4770      	bx	lr
 8003950:	803c3800 	.word	0x803c3800

08003954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800396e:	d901      	bls.n	8003974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003970:	2303      	movs	r3, #3
 8003972:	e01b      	b.n	80039ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	2b00      	cmp	r3, #0
 800397a:	daf2      	bge.n	8003962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	019b      	lsls	r3, r3, #6
 8003984:	f043 0220 	orr.w	r2, r3, #32
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	3301      	adds	r3, #1
 8003990:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003998:	d901      	bls.n	800399e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800399a:	2303      	movs	r3, #3
 800399c:	e006      	b.n	80039ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	2b20      	cmp	r3, #32
 80039a8:	d0f0      	beq.n	800398c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80039c0:	2300      	movs	r3, #0
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	3301      	adds	r3, #1
 80039c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80039d0:	d901      	bls.n	80039d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e018      	b.n	8003a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	691b      	ldr	r3, [r3, #16]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	daf2      	bge.n	80039c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2210      	movs	r2, #16
 80039e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	3301      	adds	r3, #1
 80039ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80039f4:	d901      	bls.n	80039fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e006      	b.n	8003a08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	2b10      	cmp	r3, #16
 8003a04:	d0f0      	beq.n	80039e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a34:	4313      	orrs	r3, r2
 8003a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3714      	adds	r7, #20
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a44:	4770      	bx	lr

08003a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003a60:	f023 0303 	bic.w	r3, r3, #3
 8003a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a74:	f043 0302 	orr.w	r3, r3, #2
 8003a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3714      	adds	r7, #20
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	f003 0301 	and.w	r3, r3, #1
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003aac:	2300      	movs	r3, #0
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003abc:	d901      	bls.n	8003ac2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e01b      	b.n	8003afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	daf2      	bge.n	8003ab0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	691b      	ldr	r3, [r3, #16]
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	3301      	adds	r3, #1
 8003ade:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8003ae6:	d901      	bls.n	8003aec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e006      	b.n	8003afa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0301 	and.w	r3, r3, #1
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d0f0      	beq.n	8003ada <USB_CoreReset+0x36>

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
	...

08003b08 <get_index_by_itfnum>:

CFG_TUD_MEM_SECTION tu_static hidd_interface_t _hidd_itf[CFG_TUD_HID];

/*------------- Helpers -------------*/
static inline uint8_t get_index_by_itfnum(uint8_t itf_num)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	4603      	mov	r3, r0
 8003b10:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8003b12:	2300      	movs	r3, #0
 8003b14:	73fb      	strb	r3, [r7, #15]
 8003b16:	e00f      	b.n	8003b38 <get_index_by_itfnum+0x30>
	{
		if ( itf_num == _hidd_itf[i].itf_num ) return i;
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	490c      	ldr	r1, [pc, #48]	; (8003b4c <get_index_by_itfnum+0x44>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	1a9b      	subs	r3, r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	440b      	add	r3, r1
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	79fa      	ldrb	r2, [r7, #7]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d101      	bne.n	8003b32 <get_index_by_itfnum+0x2a>
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	e006      	b.n	8003b40 <get_index_by_itfnum+0x38>
	for (uint8_t i=0; i < CFG_TUD_HID; i++ )
 8003b32:	7bfb      	ldrb	r3, [r7, #15]
 8003b34:	3301      	adds	r3, #1
 8003b36:	73fb      	strb	r3, [r7, #15]
 8003b38:	7bfb      	ldrb	r3, [r7, #15]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d0ec      	beq.n	8003b18 <get_index_by_itfnum+0x10>
	}

	return 0xFF;
 8003b3e:	23ff      	movs	r3, #255	; 0xff
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	2000138c 	.word	0x2000138c

08003b50 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	4603      	mov	r3, r0
 8003b58:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8003b5e:	79fa      	ldrb	r2, [r7, #7]
 8003b60:	491b      	ldr	r1, [pc, #108]	; (8003bd0 <tud_hid_n_ready+0x80>)
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	73bb      	strb	r3, [r7, #14]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8003b72:	f001 f947 	bl	8004e04 <tud_mounted>
 8003b76:	4603      	mov	r3, r0
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d009      	beq.n	8003b90 <tud_hid_n_ready+0x40>
 8003b7c:	f001 f954 	bl	8004e28 <tud_suspended>
 8003b80:	4603      	mov	r3, r0
 8003b82:	f083 0301 	eor.w	r3, r3, #1
 8003b86:	b2db      	uxtb	r3, r3
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d001      	beq.n	8003b90 <tud_hid_n_ready+0x40>
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e000      	b.n	8003b92 <tud_hid_n_ready+0x42>
 8003b90:	2300      	movs	r3, #0
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d010      	beq.n	8003bbe <tud_hid_n_ready+0x6e>
 8003b9c:	7bbb      	ldrb	r3, [r7, #14]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <tud_hid_n_ready+0x6e>
 8003ba2:	7bba      	ldrb	r2, [r7, #14]
 8003ba4:	7bfb      	ldrb	r3, [r7, #15]
 8003ba6:	4611      	mov	r1, r2
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fc19 	bl	80063e0 <usbd_edpt_busy>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f083 0301 	eor.w	r3, r3, #1
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <tud_hid_n_ready+0x6e>
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <tud_hid_n_ready+0x70>
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3710      	adds	r7, #16
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	2000138c 	.word	0x2000138c

08003bd4 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const* report, uint16_t len)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08c      	sub	sp, #48	; 0x30
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	603a      	str	r2, [r7, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4603      	mov	r3, r0
 8003be0:	71fb      	strb	r3, [r7, #7]
 8003be2:	460b      	mov	r3, r1
 8003be4:	71bb      	strb	r3, [r7, #6]
 8003be6:	4613      	mov	r3, r2
 8003be8:	80bb      	strh	r3, [r7, #4]
  uint8_t const rhport = 0;
 8003bea:	2300      	movs	r3, #0
 8003bec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  hidd_interface_t * p_hid = &_hidd_itf[instance];
 8003bf0:	79fa      	ldrb	r2, [r7, #7]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	00db      	lsls	r3, r3, #3
 8003bf6:	1a9b      	subs	r3, r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4a31      	ldr	r2, [pc, #196]	; (8003cc0 <tud_hid_n_report+0xec>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  // claim endpoint
  TU_VERIFY( usbd_edpt_claim(rhport, p_hid->ep_in) );
 8003c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c02:	785a      	ldrb	r2, [r3, #1]
 8003c04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003c08:	4611      	mov	r1, r2
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f002 fb48 	bl	80062a0 <usbd_edpt_claim>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f083 0301 	eor.w	r3, r3, #1
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <tud_hid_n_report+0x4c>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e04a      	b.n	8003cb6 <tud_hid_n_report+0xe2>

  // prepare data
  if (report_id)
 8003c20:	79bb      	ldrb	r3, [r7, #6]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <tud_hid_n_report+0x96>
  {
    p_hid->epin_buf[0] = report_id;
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	79ba      	ldrb	r2, [r7, #6]
 8003c2a:	721a      	strb	r2, [r3, #8]
    TU_VERIFY(0 == tu_memcpy_s(p_hid->epin_buf+1, CFG_TUD_HID_EP_BUFSIZE-1, report, len));
 8003c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c2e:	3308      	adds	r3, #8
 8003c30:	1c5a      	adds	r2, r3, #1
 8003c32:	88bb      	ldrh	r3, [r7, #4]
 8003c34:	627a      	str	r2, [r7, #36]	; 0x24
 8003c36:	2207      	movs	r2, #7
 8003c38:	623a      	str	r2, [r7, #32]
 8003c3a:	683a      	ldr	r2, [r7, #0]
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	61bb      	str	r3, [r7, #24]
}

// This is a backport of memcpy_s from c11
TU_ATTR_ALWAYS_INLINE static inline int tu_memcpy_s(void *dest, size_t destsz, const void *src, size_t count) {
  // TODO may check if desst and src is not NULL
  if ( count > destsz ) {
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d202      	bcs.n	8003c4e <tud_hid_n_report+0x7a>
    return -1;
 8003c48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c4c:	e005      	b.n	8003c5a <tud_hid_n_report+0x86>
  }
  memcpy(dest, src, count);
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	69f9      	ldr	r1, [r7, #28]
 8003c52:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c54:	f004 fd16 	bl	8008684 <memcpy>
  return 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <tud_hid_n_report+0x8e>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	e029      	b.n	8003cb6 <tud_hid_n_report+0xe2>
    len++;
 8003c62:	88bb      	ldrh	r3, [r7, #4]
 8003c64:	3301      	adds	r3, #1
 8003c66:	80bb      	strh	r3, [r7, #4]
 8003c68:	e01a      	b.n	8003ca0 <tud_hid_n_report+0xcc>
  }else
  {
    TU_VERIFY(0 == tu_memcpy_s(p_hid->epin_buf, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8003c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6c:	f103 0208 	add.w	r2, r3, #8
 8003c70:	88bb      	ldrh	r3, [r7, #4]
 8003c72:	617a      	str	r2, [r7, #20]
 8003c74:	2208      	movs	r2, #8
 8003c76:	613a      	str	r2, [r7, #16]
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	60fa      	str	r2, [r7, #12]
 8003c7c:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	429a      	cmp	r2, r3
 8003c84:	d202      	bcs.n	8003c8c <tud_hid_n_report+0xb8>
    return -1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c8a:	e005      	b.n	8003c98 <tud_hid_n_report+0xc4>
  memcpy(dest, src, count);
 8003c8c:	68ba      	ldr	r2, [r7, #8]
 8003c8e:	68f9      	ldr	r1, [r7, #12]
 8003c90:	6978      	ldr	r0, [r7, #20]
 8003c92:	f004 fcf7 	bl	8008684 <memcpy>
  return 0;
 8003c96:	2300      	movs	r3, #0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d001      	beq.n	8003ca0 <tud_hid_n_report+0xcc>
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	e00a      	b.n	8003cb6 <tud_hid_n_report+0xe2>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_hid->epin_buf, len);
 8003ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca2:	7859      	ldrb	r1, [r3, #1]
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	f103 0208 	add.w	r2, r3, #8
 8003caa:	88bb      	ldrh	r3, [r7, #4]
 8003cac:	f897 002f 	ldrb.w	r0, [r7, #47]	; 0x2f
 8003cb0:	f002 fb20 	bl	80062f4 <usbd_edpt_xfer>
 8003cb4:	4603      	mov	r3, r0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3730      	adds	r7, #48	; 0x30
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	2000138c 	.word	0x2000138c

08003cc4 <tud_hid_n_keyboard_report>:
{
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, uint8_t keycode[6])
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	603b      	str	r3, [r7, #0]
 8003ccc:	4603      	mov	r3, r0
 8003cce:	71fb      	strb	r3, [r7, #7]
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	71bb      	strb	r3, [r7, #6]
 8003cd4:	4613      	mov	r3, r2
 8003cd6:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;

  report.modifier = modifier;
 8003cd8:	797b      	ldrb	r3, [r7, #5]
 8003cda:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	727b      	strb	r3, [r7, #9]

  if ( keycode )
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d007      	beq.n	8003cf6 <tud_hid_n_keyboard_report+0x32>
  {
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	f107 030a 	add.w	r3, r7, #10
 8003cec:	6811      	ldr	r1, [r2, #0]
 8003cee:	6019      	str	r1, [r3, #0]
 8003cf0:	8892      	ldrh	r2, [r2, #4]
 8003cf2:	809a      	strh	r2, [r3, #4]
 8003cf4:	e007      	b.n	8003d06 <tud_hid_n_keyboard_report+0x42>
  }else
  {
    tu_memclr(report.keycode, 6);
 8003cf6:	f107 0308 	add.w	r3, r7, #8
 8003cfa:	3302      	adds	r3, #2
 8003cfc:	2206      	movs	r2, #6
 8003cfe:	2100      	movs	r1, #0
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 fc92 	bl	800862a <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8003d06:	f107 0208 	add.w	r2, r7, #8
 8003d0a:	79b9      	ldrb	r1, [r7, #6]
 8003d0c:	79f8      	ldrb	r0, [r7, #7]
 8003d0e:	2308      	movs	r3, #8
 8003d10:	f7ff ff60 	bl	8003bd4 <tud_hid_n_report>
 8003d14:	4603      	mov	r3, r0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <hidd_init>:

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8003d22:	2000      	movs	r0, #0
 8003d24:	f000 f802 	bl	8003d2c <hidd_reset>
}
 8003d28:	bf00      	nop
 8003d2a:	bd80      	pop	{r7, pc}

08003d2c <hidd_reset>:

void hidd_reset(uint8_t rhport)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8003d36:	221c      	movs	r2, #28
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4803      	ldr	r0, [pc, #12]	; (8003d48 <hidd_reset+0x1c>)
 8003d3c:	f004 fc75 	bl	800862a <memset>
}
 8003d40:	bf00      	nop
 8003d42:	3708      	adds	r7, #8
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	2000138c 	.word	0x2000138c

08003d4c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const * desc_itf, uint16_t max_len)
 {
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b092      	sub	sp, #72	; 0x48
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	4603      	mov	r3, r0
 8003d54:	6039      	str	r1, [r7, #0]
 8003d56:	71fb      	strb	r3, [r7, #7]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	795b      	ldrb	r3, [r3, #5]
 8003d60:	2b03      	cmp	r3, #3
 8003d62:	d001      	beq.n	8003d68 <hidd_open+0x1c>
 8003d64:	2300      	movs	r3, #0
 8003d66:	e0c8      	b.n	8003efa <hidd_open+0x1ae>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len =
      (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	461a      	mov	r2, r3
 8003d70:	00d2      	lsls	r2, r2, #3
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	b29b      	uxth	r3, r3
  uint16_t const drv_len =
 8003d76:	3312      	adds	r3, #18
 8003d78:	873b      	strh	r3, [r7, #56]	; 0x38
  TU_ASSERT(max_len >= drv_len, 0);
 8003d7a:	88ba      	ldrh	r2, [r7, #4]
 8003d7c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d20a      	bcs.n	8003d98 <hidd_open+0x4c>
 8003d82:	4b60      	ldr	r3, [pc, #384]	; (8003f04 <hidd_open+0x1b8>)
 8003d84:	623b      	str	r3, [r7, #32]
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0301 	and.w	r3, r3, #1
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d000      	beq.n	8003d94 <hidd_open+0x48>
 8003d92:	be00      	bkpt	0x0000
 8003d94:	2300      	movs	r3, #0
 8003d96:	e0b0      	b.n	8003efa <hidd_open+0x1ae>

  // Find available interface
  hidd_interface_t * p_hid = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t hid_id;
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003da2:	e01a      	b.n	8003dda <hidd_open+0x8e>
  {
    if ( _hidd_itf[hid_id].ep_in == 0 )
 8003da4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003da8:	4957      	ldr	r1, [pc, #348]	; (8003f08 <hidd_open+0x1bc>)
 8003daa:	4613      	mov	r3, r2
 8003dac:	00db      	lsls	r3, r3, #3
 8003dae:	1a9b      	subs	r3, r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	440b      	add	r3, r1
 8003db4:	3301      	adds	r3, #1
 8003db6:	781b      	ldrb	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <hidd_open+0x84>
    {
      p_hid = &_hidd_itf[hid_id];
 8003dbc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003dc0:	4613      	mov	r3, r2
 8003dc2:	00db      	lsls	r3, r3, #3
 8003dc4:	1a9b      	subs	r3, r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4a4f      	ldr	r2, [pc, #316]	; (8003f08 <hidd_open+0x1bc>)
 8003dca:	4413      	add	r3, r2
 8003dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
      break;
 8003dce:	e008      	b.n	8003de2 <hidd_open+0x96>
  for(hid_id=0; hid_id<CFG_TUD_HID; hid_id++)
 8003dd0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003dda:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0e0      	beq.n	8003da4 <hidd_open+0x58>
    }
  }
  TU_ASSERT(p_hid, 0);
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d10a      	bne.n	8003dfe <hidd_open+0xb2>
 8003de8:	4b46      	ldr	r3, [pc, #280]	; (8003f04 <hidd_open+0x1b8>)
 8003dea:	627b      	str	r3, [r7, #36]	; 0x24
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d000      	beq.n	8003dfa <hidd_open+0xae>
 8003df8:	be00      	bkpt	0x0000
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e07d      	b.n	8003efa <hidd_open+0x1ae>

  uint8_t const *p_desc = (uint8_t const *) desc_itf;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	637b      	str	r3, [r7, #52]	; 0x34
 8003e02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e04:	61bb      	str	r3, [r7, #24]
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc)
{
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8003e14:	637b      	str	r3, [r7, #52]	; 0x34
 8003e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e18:	61fb      	str	r3, [r7, #28]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8003e20:	2b21      	cmp	r3, #33	; 0x21
 8003e22:	d00a      	beq.n	8003e3a <hidd_open+0xee>
 8003e24:	4b37      	ldr	r3, [pc, #220]	; (8003f04 <hidd_open+0x1b8>)
 8003e26:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d000      	beq.n	8003e36 <hidd_open+0xea>
 8003e34:	be00      	bkpt	0x0000
 8003e36:	2300      	movs	r3, #0
 8003e38:	e05f      	b.n	8003efa <hidd_open+0x1ae>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *) p_desc;
 8003e3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e3e:	619a      	str	r2, [r3, #24]
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8003e52:	637b      	str	r3, [r7, #52]	; 0x34
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	7919      	ldrb	r1, [r3, #4]
 8003e58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5a:	3302      	adds	r3, #2
 8003e5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e5e:	3201      	adds	r2, #1
 8003e60:	79f8      	ldrb	r0, [r7, #7]
 8003e62:	9201      	str	r2, [sp, #4]
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2303      	movs	r3, #3
 8003e68:	460a      	mov	r2, r1
 8003e6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003e6c:	f002 f96c 	bl	8006148 <usbd_open_edpt_pair>
 8003e70:	4603      	mov	r3, r0
 8003e72:	f083 0301 	eor.w	r3, r3, #1
 8003e76:	b2db      	uxtb	r3, r3
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d00a      	beq.n	8003e92 <hidd_open+0x146>
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <hidd_open+0x1b8>)
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f003 0301 	and.w	r3, r3, #1
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d000      	beq.n	8003e8e <hidd_open+0x142>
 8003e8c:	be00      	bkpt	0x0000
 8003e8e:	2300      	movs	r3, #0
 8003e90:	e033      	b.n	8003efa <hidd_open+0x1ae>

  if ( desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT ) p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	799b      	ldrb	r3, [r3, #6]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d103      	bne.n	8003ea2 <hidd_open+0x156>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	79da      	ldrb	r2, [r3, #7]
 8003e9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea0:	70da      	strb	r2, [r3, #3]

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	711a      	strb	r2, [r3, #4]
  p_hid->itf_num       = desc_itf->bInterfaceNumber;
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	789a      	ldrb	r2, [r3, #2]
 8003eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eae:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const*) p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8003eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb2:	699b      	ldr	r3, [r3, #24]
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	881a      	ldrh	r2, [r3, #0]
 8003ebc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ebe:	80da      	strh	r2, [r3, #6]

  // Prepare for output endpoint
  if (p_hid->ep_out)
 8003ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec2:	789b      	ldrb	r3, [r3, #2]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d017      	beq.n	8003ef8 <hidd_open+0x1ac>
  {
    if ( !usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)) )
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	7899      	ldrb	r1, [r3, #2]
 8003ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ece:	f103 0210 	add.w	r2, r3, #16
 8003ed2:	79f8      	ldrb	r0, [r7, #7]
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f002 fa0d 	bl	80062f4 <usbd_edpt_xfer>
 8003eda:	4603      	mov	r3, r0
 8003edc:	f083 0301 	eor.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d008      	beq.n	8003ef8 <hidd_open+0x1ac>
    {
      TU_LOG_FAILED();
      TU_BREAKPOINT();
 8003ee6:	4b07      	ldr	r3, [pc, #28]	; (8003f04 <hidd_open+0x1b8>)
 8003ee8:	633b      	str	r3, [r7, #48]	; 0x30
 8003eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d000      	beq.n	8003ef8 <hidd_open+0x1ac>
 8003ef6:	be00      	bkpt	0x0000
    }
  }

  return drv_len;
 8003ef8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3740      	adds	r7, #64	; 0x40
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000edf0 	.word	0xe000edf0
 8003f08:	2000138c 	.word	0x2000138c

08003f0c <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb (uint8_t rhport, uint8_t stage, tusb_control_request_t const * request)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b092      	sub	sp, #72	; 0x48
 8003f10:	af02      	add	r7, sp, #8
 8003f12:	4603      	mov	r3, r0
 8003f14:	603a      	str	r2, [r7, #0]
 8003f16:	71fb      	strb	r3, [r7, #7]
 8003f18:	460b      	mov	r3, r1
 8003f1a:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	f003 031f 	and.w	r3, r3, #31
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d001      	beq.n	8003f2e <hidd_control_xfer_cb+0x22>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e1b8      	b.n	80042a0 <hidd_control_xfer_cb+0x394>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t) request->wIndex);
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	889b      	ldrh	r3, [r3, #4]
 8003f32:	b29b      	uxth	r3, r3
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7ff fde6 	bl	8003b08 <get_index_by_itfnum>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8003f42:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <hidd_control_xfer_cb+0x42>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	e1a8      	b.n	80042a0 <hidd_control_xfer_cb+0x394>

  hidd_interface_t* p_hid = &_hidd_itf[hid_itf];
 8003f4e:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8003f52:	4613      	mov	r3, r2
 8003f54:	00db      	lsls	r3, r3, #3
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4a9a      	ldr	r2, [pc, #616]	; (80041c4 <hidd_control_xfer_cb+0x2b8>)
 8003f5c:	4413      	add	r3, r2
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD)
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d146      	bne.n	8003ffc <hidd_control_xfer_cb+0xf0>
  {
    //------------- STD Request -------------//
    if ( stage == CONTROL_STAGE_SETUP )
 8003f6e:	79bb      	ldrb	r3, [r7, #6]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 8194 	bne.w	800429e <hidd_control_xfer_cb+0x392>
    {
      uint8_t const desc_type  = tu_u16_high(request->wValue);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	885b      	ldrh	r3, [r3, #2]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8003f7e:	8b7b      	ldrh	r3, [r7, #26]
 8003f80:	0a1b      	lsrs	r3, r3, #8
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      //uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	785b      	ldrb	r3, [r3, #1]
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d11c      	bne.n	8003fcc <hidd_control_xfer_cb+0xc0>
 8003f92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f96:	2b21      	cmp	r3, #33	; 0x21
 8003f98:	d118      	bne.n	8003fcc <hidd_control_xfer_cb+0xc0>
      {
        TU_VERIFY(p_hid->hid_descriptor);
 8003f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <hidd_control_xfer_cb+0x9a>
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	e17c      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
        TU_VERIFY(tud_control_xfer(rhport, request, (void*)(uintptr_t) p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	b29b      	uxth	r3, r3
 8003fb2:	79f8      	ldrb	r0, [r7, #7]
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	f002 fb95 	bl	80066e4 <tud_control_xfer>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f083 0301 	eor.w	r3, r3, #1
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 816b 	beq.w	800429e <hidd_control_xfer_cb+0x392>
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e169      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
      }
      else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT)
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	785b      	ldrb	r3, [r3, #1]
 8003fd0:	2b06      	cmp	r3, #6
 8003fd2:	d111      	bne.n	8003ff8 <hidd_control_xfer_cb+0xec>
 8003fd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fd8:	2b22      	cmp	r3, #34	; 0x22
 8003fda:	d10d      	bne.n	8003ff8 <hidd_control_xfer_cb+0xec>
      {
        uint8_t const * desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8003fdc:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f7fd fd55 	bl	8001a90 <tud_hid_descriptor_report_cb>
 8003fe6:	61f8      	str	r0, [r7, #28]
        tud_control_xfer(rhport, request, (void*)(uintptr_t) desc_report, p_hid->report_desc_len);
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	88db      	ldrh	r3, [r3, #6]
 8003fec:	79f8      	ldrb	r0, [r7, #7]
 8003fee:	69fa      	ldr	r2, [r7, #28]
 8003ff0:	6839      	ldr	r1, [r7, #0]
 8003ff2:	f002 fb77 	bl	80066e4 <tud_control_xfer>
      {
 8003ff6:	e152      	b.n	800429e <hidd_control_xfer_cb+0x392>
      }
      else
      {
        return false; // stall unsupported request
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	e151      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
      }
    }
  }
  else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b20      	cmp	r3, #32
 8004008:	f040 813c 	bne.w	8004284 <hidd_control_xfer_cb+0x378>
  {
    //------------- Class Specific Request -------------//
    switch( request->bRequest )
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	3b01      	subs	r3, #1
 8004012:	2b0a      	cmp	r3, #10
 8004014:	f200 8134 	bhi.w	8004280 <hidd_control_xfer_cb+0x374>
 8004018:	a201      	add	r2, pc, #4	; (adr r2, 8004020 <hidd_control_xfer_cb+0x114>)
 800401a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401e:	bf00      	nop
 8004020:	0800404d 	.word	0x0800404d
 8004024:	08004219 	.word	0x08004219
 8004028:	0800422f 	.word	0x0800422f
 800402c:	08004281 	.word	0x08004281
 8004030:	08004281 	.word	0x08004281
 8004034:	08004281 	.word	0x08004281
 8004038:	08004281 	.word	0x08004281
 800403c:	08004281 	.word	0x08004281
 8004040:	08004111 	.word	0x08004111
 8004044:	080041cd 	.word	0x080041cd
 8004048:	08004245 	.word	0x08004245
    {
      case HID_REQ_CONTROL_GET_REPORT:
        if ( stage == CONTROL_STAGE_SETUP )
 800404c:	79bb      	ldrb	r3, [r7, #6]
 800404e:	2b01      	cmp	r3, #1
 8004050:	f040 811a 	bne.w	8004288 <hidd_control_xfer_cb+0x37c>
        {
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	885b      	ldrh	r3, [r3, #2]
 8004058:	b29b      	uxth	r3, r3
 800405a:	827b      	strh	r3, [r7, #18]
 800405c:	8a7b      	ldrh	r3, [r7, #18]
 800405e:	0a1b      	lsrs	r3, r3, #8
 8004060:	b29b      	uxth	r3, r3
 8004062:	b2db      	uxtb	r3, r3
 8004064:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
          uint8_t const report_id   = tu_u16_low(request->wValue);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	885b      	ldrh	r3, [r3, #2]
 800406c:	b29b      	uxth	r3, r3
 800406e:	82bb      	strh	r3, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004070:	8abb      	ldrh	r3, [r7, #20]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

          uint8_t* report_buf = p_hid->epin_buf;
 8004078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800407a:	3308      	adds	r3, #8
 800407c:	63fb      	str	r3, [r7, #60]	; 0x3c
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	88db      	ldrh	r3, [r3, #6]
 8004082:	b29b      	uxth	r3, r3
 8004084:	833b      	strh	r3, [r7, #24]
 8004086:	2308      	movs	r3, #8
 8004088:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800408a:	8b3a      	ldrh	r2, [r7, #24]
 800408c:	8afb      	ldrh	r3, [r7, #22]
 800408e:	4293      	cmp	r3, r2
 8004090:	bf28      	it	cs
 8004092:	4613      	movcs	r3, r2
 8004094:	b29b      	uxth	r3, r3
 8004096:	877b      	strh	r3, [r7, #58]	; 0x3a

          uint16_t xferlen = 0;
 8004098:	2300      	movs	r3, #0
 800409a:	873b      	strh	r3, [r7, #56]	; 0x38

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1) )
 800409c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00e      	beq.n	80040c2 <hidd_control_xfer_cb+0x1b6>
 80040a4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d90b      	bls.n	80040c2 <hidd_control_xfer_cb+0x1b6>
          {
            *report_buf++ = report_id;
 80040aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80040b4:	701a      	strb	r2, [r3, #0]
            req_len--;
 80040b6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040b8:	3b01      	subs	r3, #1
 80040ba:	877b      	strh	r3, [r7, #58]	; 0x3a

            xferlen++;
 80040bc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040be:	3301      	adds	r3, #1
 80040c0:	873b      	strh	r3, [r7, #56]	; 0x38
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 80040c2:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80040c6:	f897 1028 	ldrb.w	r1, [r7, #40]	; 0x28
 80040ca:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 80040ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80040d0:	9300      	str	r3, [sp, #0]
 80040d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d4:	f7fd fb9e 	bl	8001814 <tud_hid_get_report_cb>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040de:	4413      	add	r3, r2
 80040e0:	873b      	strh	r3, [r7, #56]	; 0x38
          TU_ASSERT( xferlen > 0 );
 80040e2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <hidd_control_xfer_cb+0x1f2>
 80040e8:	4b37      	ldr	r3, [pc, #220]	; (80041c8 <hidd_control_xfer_cb+0x2bc>)
 80040ea:	627b      	str	r3, [r7, #36]	; 0x24
 80040ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0301 	and.w	r3, r3, #1
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d000      	beq.n	80040fa <hidd_control_xfer_cb+0x1ee>
 80040f8:	be00      	bkpt	0x0000
 80040fa:	2300      	movs	r3, #0
 80040fc:	e0d0      	b.n	80042a0 <hidd_control_xfer_cb+0x394>

          tud_control_xfer(rhport, request, p_hid->epin_buf, xferlen);
 80040fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004100:	f103 0208 	add.w	r2, r3, #8
 8004104:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004106:	79f8      	ldrb	r0, [r7, #7]
 8004108:	6839      	ldr	r1, [r7, #0]
 800410a:	f002 faeb 	bl	80066e4 <tud_control_xfer>
        }
      break;
 800410e:	e0bb      	b.n	8004288 <hidd_control_xfer_cb+0x37c>

      case  HID_REQ_CONTROL_SET_REPORT:
        if ( stage == CONTROL_STAGE_SETUP )
 8004110:	79bb      	ldrb	r3, [r7, #6]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d111      	bne.n	800413a <hidd_control_xfer_cb+0x22e>
        {
          TU_VERIFY(request->wLength <= sizeof(p_hid->epout_buf));
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	88db      	ldrh	r3, [r3, #6]
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b08      	cmp	r3, #8
 800411e:	d901      	bls.n	8004124 <hidd_control_xfer_cb+0x218>
 8004120:	2300      	movs	r3, #0
 8004122:	e0bd      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
          tud_control_xfer(rhport, request, p_hid->epout_buf, request->wLength);
 8004124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004126:	f103 0210 	add.w	r2, r3, #16
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	88db      	ldrh	r3, [r3, #6]
 800412e:	b29b      	uxth	r3, r3
 8004130:	79f8      	ldrb	r0, [r7, #7]
 8004132:	6839      	ldr	r1, [r7, #0]
 8004134:	f002 fad6 	bl	80066e4 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
      break;
 8004138:	e0a8      	b.n	800428c <hidd_control_xfer_cb+0x380>
        else if ( stage == CONTROL_STAGE_ACK )
 800413a:	79bb      	ldrb	r3, [r7, #6]
 800413c:	2b03      	cmp	r3, #3
 800413e:	f040 80a5 	bne.w	800428c <hidd_control_xfer_cb+0x380>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	885b      	ldrh	r3, [r3, #2]
 8004146:	b29b      	uxth	r3, r3
 8004148:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	0a1b      	lsrs	r3, r3, #8
 800414e:	b29b      	uxth	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          uint8_t const report_id   = tu_u16_low(request->wValue);
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	885b      	ldrh	r3, [r3, #2]
 800415a:	b29b      	uxth	r3, r3
 800415c:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 800415e:	89bb      	ldrh	r3, [r7, #12]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
          uint8_t const* report_buf = p_hid->epout_buf;
 8004166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004168:	3310      	adds	r3, #16
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	88db      	ldrh	r3, [r3, #6]
 8004170:	b29b      	uxth	r3, r3
 8004172:	823b      	strh	r3, [r7, #16]
 8004174:	2308      	movs	r3, #8
 8004176:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004178:	8a3a      	ldrh	r2, [r7, #16]
 800417a:	89fb      	ldrh	r3, [r7, #14]
 800417c:	4293      	cmp	r3, r2
 800417e:	bf28      	it	cs
 8004180:	4613      	movcs	r3, r2
 8004182:	b29b      	uxth	r3, r3
 8004184:	867b      	strh	r3, [r7, #50]	; 0x32
          if ( (report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0]) )
 8004186:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00e      	beq.n	80041ac <hidd_control_xfer_cb+0x2a0>
 800418e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004190:	2b01      	cmp	r3, #1
 8004192:	d90b      	bls.n	80041ac <hidd_control_xfer_cb+0x2a0>
 8004194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800419c:	429a      	cmp	r2, r3
 800419e:	d105      	bne.n	80041ac <hidd_control_xfer_cb+0x2a0>
            report_buf++;
 80041a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041a2:	3301      	adds	r3, #1
 80041a4:	637b      	str	r3, [r7, #52]	; 0x34
            report_len--;
 80041a6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041a8:	3b01      	subs	r3, #1
 80041aa:	867b      	strh	r3, [r7, #50]	; 0x32
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80041ac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80041b0:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 80041b4:	f897 0031 	ldrb.w	r0, [r7, #49]	; 0x31
 80041b8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80041ba:	9300      	str	r3, [sp, #0]
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	f7fd fb3a 	bl	8001836 <tud_hid_set_report_cb>
      break;
 80041c2:	e063      	b.n	800428c <hidd_control_xfer_cb+0x380>
 80041c4:	2000138c 	.word	0x2000138c
 80041c8:	e000edf0 	.word	0xe000edf0

      case HID_REQ_CONTROL_SET_IDLE:
        if ( stage == CONTROL_STAGE_SETUP )
 80041cc:	79bb      	ldrb	r3, [r7, #6]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d15e      	bne.n	8004290 <hidd_control_xfer_cb+0x384>
        {
          p_hid->idle_rate = tu_u16_high(request->wValue);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	885b      	ldrh	r3, [r3, #2]
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	813b      	strh	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 80041da:	893b      	ldrh	r3, [r7, #8]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	b29b      	uxth	r3, r3
 80041e0:	b2da      	uxtb	r2, r3
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	715a      	strb	r2, [r3, #5]
          if ( tud_hid_set_idle_cb )
 80041e6:	4b30      	ldr	r3, [pc, #192]	; (80042a8 <hidd_control_xfer_cb+0x39c>)
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00f      	beq.n	800420c <hidd_control_xfer_cb+0x300>
          {
            // stall request if callback return false
            TU_VERIFY( tud_hid_set_idle_cb( hid_itf, p_hid->idle_rate) );
 80041ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ee:	795a      	ldrb	r2, [r3, #5]
 80041f0:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f3af 8000 	nop.w
 80041fc:	4603      	mov	r3, r0
 80041fe:	f083 0301 	eor.w	r3, r3, #1
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d001      	beq.n	800420c <hidd_control_xfer_cb+0x300>
 8004208:	2300      	movs	r3, #0
 800420a:	e049      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
          }

          tud_control_status(rhport, request);
 800420c:	79fb      	ldrb	r3, [r7, #7]
 800420e:	6839      	ldr	r1, [r7, #0]
 8004210:	4618      	mov	r0, r3
 8004212:	f002 f9f5 	bl	8006600 <tud_control_status>
        }
      break;
 8004216:	e03b      	b.n	8004290 <hidd_control_xfer_cb+0x384>

      case HID_REQ_CONTROL_GET_IDLE:
        if ( stage == CONTROL_STAGE_SETUP )
 8004218:	79bb      	ldrb	r3, [r7, #6]
 800421a:	2b01      	cmp	r3, #1
 800421c:	d13a      	bne.n	8004294 <hidd_control_xfer_cb+0x388>
        {
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	1d5a      	adds	r2, r3, #5
 8004222:	79f8      	ldrb	r0, [r7, #7]
 8004224:	2301      	movs	r3, #1
 8004226:	6839      	ldr	r1, [r7, #0]
 8004228:	f002 fa5c 	bl	80066e4 <tud_control_xfer>
        }
      break;
 800422c:	e032      	b.n	8004294 <hidd_control_xfer_cb+0x388>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if ( stage == CONTROL_STAGE_SETUP )
 800422e:	79bb      	ldrb	r3, [r7, #6]
 8004230:	2b01      	cmp	r3, #1
 8004232:	d131      	bne.n	8004298 <hidd_control_xfer_cb+0x38c>
        {
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	1d1a      	adds	r2, r3, #4
 8004238:	79f8      	ldrb	r0, [r7, #7]
 800423a:	2301      	movs	r3, #1
 800423c:	6839      	ldr	r1, [r7, #0]
 800423e:	f002 fa51 	bl	80066e4 <tud_control_xfer>
        }
      break;
 8004242:	e029      	b.n	8004298 <hidd_control_xfer_cb+0x38c>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if ( stage == CONTROL_STAGE_SETUP )
 8004244:	79bb      	ldrb	r3, [r7, #6]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d105      	bne.n	8004256 <hidd_control_xfer_cb+0x34a>
        {
          tud_control_status(rhport, request);
 800424a:	79fb      	ldrb	r3, [r7, #7]
 800424c:	6839      	ldr	r1, [r7, #0]
 800424e:	4618      	mov	r0, r3
 8004250:	f002 f9d6 	bl	8006600 <tud_control_status>
          if (tud_hid_set_protocol_cb)
          {
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
          }
        }
      break;
 8004254:	e022      	b.n	800429c <hidd_control_xfer_cb+0x390>
        else if ( stage == CONTROL_STAGE_ACK )
 8004256:	79bb      	ldrb	r3, [r7, #6]
 8004258:	2b03      	cmp	r3, #3
 800425a:	d11f      	bne.n	800429c <hidd_control_xfer_cb+0x390>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	885b      	ldrh	r3, [r3, #2]
 8004260:	b29b      	uxth	r3, r3
 8004262:	b2da      	uxtb	r2, r3
 8004264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004266:	711a      	strb	r2, [r3, #4]
          if (tud_hid_set_protocol_cb)
 8004268:	4b10      	ldr	r3, [pc, #64]	; (80042ac <hidd_control_xfer_cb+0x3a0>)
 800426a:	2b00      	cmp	r3, #0
 800426c:	d016      	beq.n	800429c <hidd_control_xfer_cb+0x390>
            tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 800426e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004270:	791a      	ldrb	r2, [r3, #4]
 8004272:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8004276:	4611      	mov	r1, r2
 8004278:	4618      	mov	r0, r3
 800427a:	f7fd faa9 	bl	80017d0 <tud_hid_set_protocol_cb>
      break;
 800427e:	e00d      	b.n	800429c <hidd_control_xfer_cb+0x390>

      default: return false; // stall unsupported request
 8004280:	2300      	movs	r3, #0
 8004282:	e00d      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
    }
  }else
  {
    return false; // stall unsupported request
 8004284:	2300      	movs	r3, #0
 8004286:	e00b      	b.n	80042a0 <hidd_control_xfer_cb+0x394>
      break;
 8004288:	bf00      	nop
 800428a:	e008      	b.n	800429e <hidd_control_xfer_cb+0x392>
      break;
 800428c:	bf00      	nop
 800428e:	e006      	b.n	800429e <hidd_control_xfer_cb+0x392>
      break;
 8004290:	bf00      	nop
 8004292:	e004      	b.n	800429e <hidd_control_xfer_cb+0x392>
      break;
 8004294:	bf00      	nop
 8004296:	e002      	b.n	800429e <hidd_control_xfer_cb+0x392>
      break;
 8004298:	bf00      	nop
 800429a:	e000      	b.n	800429e <hidd_control_xfer_cb+0x392>
      break;
 800429c:	bf00      	nop
  }

  return true;
 800429e:	2301      	movs	r3, #1
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3740      	adds	r7, #64	; 0x40
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	00000000 	.word	0x00000000
 80042ac:	080017d1 	.word	0x080017d1

080042b0 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b088      	sub	sp, #32
 80042b4:	af02      	add	r7, sp, #8
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4603      	mov	r3, r0
 80042ba:	71fb      	strb	r3, [r7, #7]
 80042bc:	460b      	mov	r3, r1
 80042be:	71bb      	strb	r3, [r7, #6]
 80042c0:	4613      	mov	r3, r2
 80042c2:	717b      	strb	r3, [r7, #5]
  (void) result;

  uint8_t instance = 0;
 80042c4:	2300      	movs	r3, #0
 80042c6:	75fb      	strb	r3, [r7, #23]
  hidd_interface_t * p_hid = _hidd_itf;
 80042c8:	4b36      	ldr	r3, [pc, #216]	; (80043a4 <hidd_xfer_cb+0xf4>)
 80042ca:	613b      	str	r3, [r7, #16]

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++)
 80042cc:	2300      	movs	r3, #0
 80042ce:	75fb      	strb	r3, [r7, #23]
 80042d0:	e014      	b.n	80042fc <hidd_xfer_cb+0x4c>
  {
    p_hid = &_hidd_itf[instance];
 80042d2:	7dfa      	ldrb	r2, [r7, #23]
 80042d4:	4613      	mov	r3, r2
 80042d6:	00db      	lsls	r3, r3, #3
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	4a31      	ldr	r2, [pc, #196]	; (80043a4 <hidd_xfer_cb+0xf4>)
 80042de:	4413      	add	r3, r2
 80042e0:	613b      	str	r3, [r7, #16]
    if ( (ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in) ) break;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	789b      	ldrb	r3, [r3, #2]
 80042e6:	79ba      	ldrb	r2, [r7, #6]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d00a      	beq.n	8004302 <hidd_xfer_cb+0x52>
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	79ba      	ldrb	r2, [r7, #6]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d005      	beq.n	8004302 <hidd_xfer_cb+0x52>
  for (instance = 0; instance < CFG_TUD_HID; instance++)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	3301      	adds	r3, #1
 80042fa:	75fb      	strb	r3, [r7, #23]
 80042fc:	7dfb      	ldrb	r3, [r7, #23]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d0e7      	beq.n	80042d2 <hidd_xfer_cb+0x22>
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00a      	beq.n	800431e <hidd_xfer_cb+0x6e>
 8004308:	4b27      	ldr	r3, [pc, #156]	; (80043a8 <hidd_xfer_cb+0xf8>)
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 0301 	and.w	r3, r3, #1
 8004314:	2b00      	cmp	r3, #0
 8004316:	d000      	beq.n	800431a <hidd_xfer_cb+0x6a>
 8004318:	be00      	bkpt	0x0000
 800431a:	2300      	movs	r3, #0
 800431c:	e03d      	b.n	800439a <hidd_xfer_cb+0xea>

  // Sent report successfully
  if (ep_addr == p_hid->ep_in)
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	785b      	ldrb	r3, [r3, #1]
 8004322:	79ba      	ldrb	r2, [r7, #6]
 8004324:	429a      	cmp	r2, r3
 8004326:	d10c      	bne.n	8004342 <hidd_xfer_cb+0x92>
  {
    if (tud_hid_report_complete_cb)
 8004328:	4b20      	ldr	r3, [pc, #128]	; (80043ac <hidd_xfer_cb+0xfc>)
 800432a:	2b00      	cmp	r3, #0
 800432c:	d034      	beq.n	8004398 <hidd_xfer_cb+0xe8>
    {
      tud_hid_report_complete_cb(instance, p_hid->epin_buf, (uint16_t) xferred_bytes);
 800432e:	693b      	ldr	r3, [r7, #16]
 8004330:	f103 0108 	add.w	r1, r3, #8
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	b29a      	uxth	r2, r3
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	4618      	mov	r0, r3
 800433c:	f7fd fa56 	bl	80017ec <tud_hid_report_complete_cb>
 8004340:	e02a      	b.n	8004398 <hidd_xfer_cb+0xe8>
    }
  }
  // Received report
  else if (ep_addr == p_hid->ep_out)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	789b      	ldrb	r3, [r3, #2]
 8004346:	79ba      	ldrb	r2, [r7, #6]
 8004348:	429a      	cmp	r2, r3
 800434a:	d125      	bne.n	8004398 <hidd_xfer_cb+0xe8>
  {
    tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_INVALID, p_hid->epout_buf, (uint16_t) xferred_bytes);
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	f103 0210 	add.w	r2, r3, #16
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	b29b      	uxth	r3, r3
 8004356:	7df8      	ldrb	r0, [r7, #23]
 8004358:	9300      	str	r3, [sp, #0]
 800435a:	4613      	mov	r3, r2
 800435c:	2200      	movs	r2, #0
 800435e:	2100      	movs	r1, #0
 8004360:	f7fd fa69 	bl	8001836 <tud_hid_set_report_cb>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_hid->epout_buf, sizeof(p_hid->epout_buf)));
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	7899      	ldrb	r1, [r3, #2]
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f103 0210 	add.w	r2, r3, #16
 800436e:	79f8      	ldrb	r0, [r7, #7]
 8004370:	2308      	movs	r3, #8
 8004372:	f001 ffbf 	bl	80062f4 <usbd_edpt_xfer>
 8004376:	4603      	mov	r3, r0
 8004378:	f083 0301 	eor.w	r3, r3, #1
 800437c:	b2db      	uxtb	r3, r3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <hidd_xfer_cb+0xe8>
 8004382:	4b09      	ldr	r3, [pc, #36]	; (80043a8 <hidd_xfer_cb+0xf8>)
 8004384:	60fb      	str	r3, [r7, #12]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d000      	beq.n	8004394 <hidd_xfer_cb+0xe4>
 8004392:	be00      	bkpt	0x0000
 8004394:	2300      	movs	r3, #0
 8004396:	e000      	b.n	800439a <hidd_xfer_cb+0xea>
  }

  return true;
 8004398:	2301      	movs	r3, #1
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	2000138c 	.word	0x2000138c
 80043a8:	e000edf0 	.word	0xe000edf0
 80043ac:	080017ed 	.word	0x080017ed

080043b0 <_ff_push_const_addr>:

// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b08a      	sub	sp, #40	; 0x28
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	4613      	mov	r3, r2
 80043bc:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 80043c2:	88fb      	ldrh	r3, [r7, #6]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 80043c8:	e00b      	b.n	80043e2 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 80043ca:	6a3b      	ldr	r3, [r7, #32]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	61ba      	str	r2, [r7, #24]
 80043d2:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	697a      	ldr	r2, [r7, #20]
 80043d8:	601a      	str	r2, [r3, #0]
}
 80043da:	bf00      	nop
    ff_buf += 4;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	3304      	adds	r3, #4
 80043e0:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 80043e2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80043e4:	1e5a      	subs	r2, r3, #1
 80043e6:	84fa      	strh	r2, [r7, #38]	; 0x26
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1ee      	bne.n	80043ca <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80043ec:	88fb      	ldrh	r3, [r7, #6]
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	f003 0303 	and.w	r3, r3, #3
 80043f4:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80043f6:	7ffb      	ldrb	r3, [r7, #31]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d009      	beq.n	8004410 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80043fc:	6a3b      	ldr	r3, [r7, #32]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 8004402:	7ffa      	ldrb	r2, [r7, #31]
 8004404:	f107 0310 	add.w	r3, r7, #16
 8004408:	4619      	mov	r1, r3
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f004 f93a 	bl	8008684 <memcpy>
  }
}
 8004410:	bf00      	nop
 8004412:	3728      	adds	r7, #40	; 0x28
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}

08004418 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	4613      	mov	r3, r2
 8004424:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 800442a:	88fb      	ldrh	r3, [r7, #6]
 800442c:	089b      	lsrs	r3, r3, #2
 800442e:	84fb      	strh	r3, [r7, #38]	; 0x26
  while(full_words--)
 8004430:	e008      	b.n	8004444 <_ff_pull_const_addr+0x2c>
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3304      	adds	r3, #4
 8004442:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 8004444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004446:	1e5a      	subs	r2, r3, #1
 8004448:	84fa      	strh	r2, [r7, #38]	; 0x26
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f1      	bne.n	8004432 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 800444e:	88fb      	ldrh	r3, [r7, #6]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8004458:	7ffb      	ldrb	r3, [r7, #31]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d00b      	beq.n	8004476 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8004462:	7ffa      	ldrb	r2, [r7, #31]
 8004464:	f107 0314 	add.w	r3, r7, #20
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	4618      	mov	r0, r3
 800446c:	f004 f90a 	bl	8008684 <memcpy>

    *reg_tx = tmp32;
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	6a3b      	ldr	r3, [r7, #32]
 8004474:	601a      	str	r2, [r3, #0]
  }
}
 8004476:	bf00      	nop
 8004478:	3728      	adds	r7, #40	; 0x28
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <_ff_push>:

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	60f8      	str	r0, [r7, #12]
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	4613      	mov	r3, r2
 800448a:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	88fa      	ldrh	r2, [r7, #6]
 8004492:	68f9      	ldr	r1, [r7, #12]
 8004494:	88c9      	ldrh	r1, [r1, #6]
 8004496:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800449a:	b289      	uxth	r1, r1
 800449c:	fb01 f202 	mul.w	r2, r1, r2
 80044a0:	1898      	adds	r0, r3, r2
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	88db      	ldrh	r3, [r3, #6]
 80044a6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80044aa:	b29b      	uxth	r3, r3
 80044ac:	461a      	mov	r2, r3
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	f004 f8e8 	bl	8008684 <memcpy>
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b08e      	sub	sp, #56	; 0x38
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	4611      	mov	r1, r2
 80044c8:	461a      	mov	r2, r3
 80044ca:	460b      	mov	r3, r1
 80044cc:	80fb      	strh	r3, [r7, #6]
 80044ce:	4613      	mov	r3, r2
 80044d0:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	889a      	ldrh	r2, [r3, #4]
 80044d6:	88bb      	ldrh	r3, [r7, #4]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count;
 80044dc:	88fa      	ldrh	r2, [r7, #6]
 80044de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	88db      	ldrh	r3, [r3, #6]
 80044e8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	461a      	mov	r2, r3
 80044f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80044f2:	fb13 f302 	smulbb	r3, r3, r2
 80044f6:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	88db      	ldrh	r3, [r3, #6]
 80044fc:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004500:	b29b      	uxth	r3, r3
 8004502:	461a      	mov	r2, r3
 8004504:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004506:	fb13 f302 	smulbb	r3, r3, r2
 800450a:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	88ba      	ldrh	r2, [r7, #4]
 8004512:	68f9      	ldr	r1, [r7, #12]
 8004514:	88c9      	ldrh	r1, [r1, #6]
 8004516:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800451a:	b289      	uxth	r1, r1
 800451c:	fb01 f202 	mul.w	r2, r1, r2
 8004520:	4413      	add	r3, r2
 8004522:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 8004524:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <_ff_push_n+0x76>
 800452c:	2b01      	cmp	r3, #1
 800452e:	d022      	beq.n	8004576 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
  }
}
 8004530:	e09e      	b.n	8004670 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004536:	429a      	cmp	r2, r3
 8004538:	d80d      	bhi.n	8004556 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 800453a:	88fb      	ldrh	r3, [r7, #6]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	88d2      	ldrh	r2, [r2, #6]
 8004540:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004544:	b292      	uxth	r2, r2
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	461a      	mov	r2, r3
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004550:	f004 f898 	bl	8008684 <memcpy>
      break;
 8004554:	e08c      	b.n	8004670 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8004556:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004558:	461a      	mov	r2, r3
 800455a:	68b9      	ldr	r1, [r7, #8]
 800455c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800455e:	f004 f891 	bl	8008684 <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004568:	68ba      	ldr	r2, [r7, #8]
 800456a:	4413      	add	r3, r2
 800456c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800456e:	4619      	mov	r1, r3
 8004570:	f004 f888 	bl	8008684 <memcpy>
      break;
 8004574:	e07c      	b.n	8004670 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8004576:	88fa      	ldrh	r2, [r7, #6]
 8004578:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800457a:	429a      	cmp	r2, r3
 800457c:	d80f      	bhi.n	800459e <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	88db      	ldrh	r3, [r3, #6]
 8004582:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	88fb      	ldrh	r3, [r7, #6]
 800458c:	fb13 f302 	smulbb	r3, r3, r2
 8004590:	b29b      	uxth	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	68b9      	ldr	r1, [r7, #8]
 8004596:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004598:	f7ff ff0a 	bl	80043b0 <_ff_push_const_addr>
      break;
 800459c:	e067      	b.n	800466e <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 800459e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045a0:	f023 0303 	bic.w	r3, r3, #3
 80045a4:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 80045a6:	8c3b      	ldrh	r3, [r7, #32]
 80045a8:	461a      	mov	r2, r3
 80045aa:	68b9      	ldr	r1, [r7, #8]
 80045ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045ae:	f7ff feff 	bl	80043b0 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 80045b2:	8c3b      	ldrh	r3, [r7, #32]
 80045b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045b6:	4413      	add	r3, r2
 80045b8:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 80045ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80045c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d043      	beq.n	8004656 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80045d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f1c3 0304 	rsb	r3, r3, #4
 80045dc:	b29a      	uxth	r2, r3
 80045de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80045e0:	837b      	strh	r3, [r7, #26]
 80045e2:	4613      	mov	r3, r2
 80045e4:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80045e6:	8b7a      	ldrh	r2, [r7, #26]
 80045e8:	8b3b      	ldrh	r3, [r7, #24]
 80045ea:	4293      	cmp	r3, r2
 80045ec:	bf28      	it	cs
 80045ee:	4613      	movcs	r3, r2
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80045f6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32 = *rx_fifo;
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 8004608:	f107 0314 	add.w	r3, r7, #20
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 800460e:	e007      	b.n	8004620 <_ff_push_n+0x164>
 8004610:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004612:	1c53      	adds	r3, r2, #1
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004618:	1c59      	adds	r1, r3, #1
 800461a:	6339      	str	r1, [r7, #48]	; 0x30
 800461c:	7812      	ldrb	r2, [r2, #0]
 800461e:	701a      	strb	r2, [r3, #0]
 8004620:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004624:	1e5a      	subs	r2, r3, #1
 8004626:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 8004634:	e007      	b.n	8004646 <_ff_push_n+0x18a>
 8004636:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004638:	1c53      	adds	r3, r2, #1
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
 800463c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463e:	1c59      	adds	r1, r3, #1
 8004640:	6339      	str	r1, [r7, #48]	; 0x30
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800464a:	1e5a      	subs	r2, r3, #1
 800464c:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004650:	2b00      	cmp	r3, #0
 8004652:	d1f0      	bne.n	8004636 <_ff_push_n+0x17a>
 8004654:	e002      	b.n	800465c <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 800465c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <_ff_push_n+0x1b2>
 8004662:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004664:	461a      	mov	r2, r3
 8004666:	68b9      	ldr	r1, [r7, #8]
 8004668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800466a:	f7ff fea1 	bl	80043b0 <_ff_push_const_addr>
      break;
 800466e:	bf00      	nop
}
 8004670:	bf00      	nop
 8004672:	3738      	adds	r7, #56	; 0x38
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	4613      	mov	r3, r2
 8004684:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	88fa      	ldrh	r2, [r7, #6]
 800468c:	68f9      	ldr	r1, [r7, #12]
 800468e:	88c9      	ldrh	r1, [r1, #6]
 8004690:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004694:	b289      	uxth	r1, r1
 8004696:	fb01 f202 	mul.w	r2, r1, r2
 800469a:	1899      	adds	r1, r3, r2
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	88db      	ldrh	r3, [r3, #6]
 80046a0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	461a      	mov	r2, r3
 80046a8:	68b8      	ldr	r0, [r7, #8]
 80046aa:	f003 ffeb 	bl	8008684 <memcpy>
}
 80046ae:	bf00      	nop
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b08e      	sub	sp, #56	; 0x38
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	60f8      	str	r0, [r7, #12]
 80046be:	60b9      	str	r1, [r7, #8]
 80046c0:	4611      	mov	r1, r2
 80046c2:	461a      	mov	r2, r3
 80046c4:	460b      	mov	r3, r1
 80046c6:	80fb      	strh	r3, [r7, #6]
 80046c8:	4613      	mov	r3, r2
 80046ca:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	889a      	ldrh	r2, [r3, #4]
 80046d0:	88bb      	ldrh	r3, [r7, #4]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 80046d6:	88fa      	ldrh	r2, [r7, #6]
 80046d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	84bb      	strh	r3, [r7, #36]	; 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	88db      	ldrh	r3, [r3, #6]
 80046e2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	461a      	mov	r2, r3
 80046ea:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046ec:	fb13 f302 	smulbb	r3, r3, r2
 80046f0:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88db      	ldrh	r3, [r3, #6]
 80046f6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80046fa:	b29b      	uxth	r3, r3
 80046fc:	461a      	mov	r2, r3
 80046fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004700:	fb13 f302 	smulbb	r3, r3, r2
 8004704:	86fb      	strh	r3, [r7, #54]	; 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	88ba      	ldrh	r2, [r7, #4]
 800470c:	68f9      	ldr	r1, [r7, #12]
 800470e:	88c9      	ldrh	r1, [r1, #6]
 8004710:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8004714:	b289      	uxth	r1, r1
 8004716:	fb01 f202 	mul.w	r2, r1, r2
 800471a:	4413      	add	r3, r2
 800471c:	633b      	str	r3, [r7, #48]	; 0x30

  switch (copy_mode)
 800471e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <_ff_pull_n+0x76>
 8004726:	2b01      	cmp	r3, #1
 8004728:	d022      	beq.n	8004770 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;

    default: break;
 800472a:	e0a0      	b.n	800486e <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800472c:	88fa      	ldrh	r2, [r7, #6]
 800472e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004730:	429a      	cmp	r2, r3
 8004732:	d80d      	bhi.n	8004750 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8004734:	88fb      	ldrh	r3, [r7, #6]
 8004736:	68fa      	ldr	r2, [r7, #12]
 8004738:	88d2      	ldrh	r2, [r2, #6]
 800473a:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800473e:	b292      	uxth	r2, r2
 8004740:	fb02 f303 	mul.w	r3, r2, r3
 8004744:	461a      	mov	r2, r3
 8004746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004748:	68b8      	ldr	r0, [r7, #8]
 800474a:	f003 ff9b 	bl	8008684 <memcpy>
    break;
 800474e:	e08e      	b.n	800486e <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8004750:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004752:	461a      	mov	r2, r3
 8004754:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004756:	68b8      	ldr	r0, [r7, #8]
 8004758:	f003 ff94 	bl	8008684 <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 800475c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	18d0      	adds	r0, r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004768:	4619      	mov	r1, r3
 800476a:	f003 ff8b 	bl	8008684 <memcpy>
    break;
 800476e:	e07e      	b.n	800486e <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8004770:	88fa      	ldrh	r2, [r7, #6]
 8004772:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004774:	429a      	cmp	r2, r3
 8004776:	d80f      	bhi.n	8004798 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88db      	ldrh	r3, [r3, #6]
 800477c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004780:	b29b      	uxth	r3, r3
 8004782:	461a      	mov	r2, r3
 8004784:	88fb      	ldrh	r3, [r7, #6]
 8004786:	fb13 f302 	smulbb	r3, r3, r2
 800478a:	b29b      	uxth	r3, r3
 800478c:	461a      	mov	r2, r3
 800478e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004790:	68b8      	ldr	r0, [r7, #8]
 8004792:	f7ff fe41 	bl	8004418 <_ff_pull_const_addr>
    break;
 8004796:	e069      	b.n	800486c <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8004798:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800479a:	f023 0303 	bic.w	r3, r3, #3
 800479e:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 80047a0:	8c3b      	ldrh	r3, [r7, #32]
 80047a2:	461a      	mov	r2, r3
 80047a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047a6:	68b8      	ldr	r0, [r7, #8]
 80047a8:	f7ff fe36 	bl	8004418 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 80047ac:	8c3b      	ldrh	r3, [r7, #32]
 80047ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047b0:	4413      	add	r3, r2
 80047b2:	633b      	str	r3, [r7, #48]	; 0x30
        uint8_t rem = lin_bytes & 0x03;
 80047b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0303 	and.w	r3, r3, #3
 80047bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        if (rem > 0)
 80047c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d045      	beq.n	8004854 <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 80047cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80047d0:	b29b      	uxth	r3, r3
 80047d2:	f1c3 0304 	rsb	r3, r3, #4
 80047d6:	b29a      	uxth	r2, r3
 80047d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80047da:	837b      	strh	r3, [r7, #26]
 80047dc:	4613      	mov	r3, r2
 80047de:	833b      	strh	r3, [r7, #24]
 80047e0:	8b7a      	ldrh	r2, [r7, #26]
 80047e2:	8b3b      	ldrh	r3, [r7, #24]
 80047e4:	4293      	cmp	r3, r2
 80047e6:	bf28      	it	cs
 80047e8:	4613      	movcs	r3, r2
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          wrap_bytes -= remrem;
 80047f0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80047f4:	b29b      	uxth	r3, r3
 80047f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	86fb      	strh	r3, [r7, #54]	; 0x36
          uint32_t tmp32=0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	62bb      	str	r3, [r7, #40]	; 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8004806:	e007      	b.n	8004818 <_ff_pull_n+0x162>
 8004808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800480a:	1c53      	adds	r3, r2, #1
 800480c:	633b      	str	r3, [r7, #48]	; 0x30
 800480e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004810:	1c59      	adds	r1, r3, #1
 8004812:	62b9      	str	r1, [r7, #40]	; 0x28
 8004814:	7812      	ldrb	r2, [r2, #0]
 8004816:	701a      	strb	r2, [r3, #0]
 8004818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800481c:	1e5a      	subs	r2, r3, #1
 800481e:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1f0      	bne.n	8004808 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	633b      	str	r3, [r7, #48]	; 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 800482c:	e007      	b.n	800483e <_ff_pull_n+0x188>
 800482e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004830:	1c53      	adds	r3, r2, #1
 8004832:	633b      	str	r3, [r7, #48]	; 0x30
 8004834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004836:	1c59      	adds	r1, r3, #1
 8004838:	62b9      	str	r1, [r7, #40]	; 0x28
 800483a:	7812      	ldrb	r2, [r2, #0]
 800483c:	701a      	strb	r2, [r3, #0]
 800483e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8004842:	1e5a      	subs	r2, r3, #1
 8004844:	f887 202e 	strb.w	r2, [r7, #46]	; 0x2e
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f0      	bne.n	800482e <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	e002      	b.n	800485a <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	633b      	str	r3, [r7, #48]	; 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 800485a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <_ff_pull_n+0x1b6>
 8004860:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004862:	461a      	mov	r2, r3
 8004864:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004866:	68b8      	ldr	r0, [r7, #8]
 8004868:	f7ff fdd6 	bl	8004418 <_ff_pull_const_addr>
    break;
 800486c:	bf00      	nop
  }
}
 800486e:	bf00      	nop
 8004870:	3738      	adds	r7, #56	; 0x38
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8004876:	b480      	push	{r7}
 8004878:	b085      	sub	sp, #20
 800487a:	af00      	add	r7, sp, #0
 800487c:	4603      	mov	r3, r0
 800487e:	80fb      	strh	r3, [r7, #6]
 8004880:	460b      	mov	r3, r1
 8004882:	80bb      	strh	r3, [r7, #4]
 8004884:	4613      	mov	r3, r2
 8004886:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8004888:	88ba      	ldrh	r2, [r7, #4]
 800488a:	887b      	ldrh	r3, [r7, #2]
 800488c:	4413      	add	r3, r2
 800488e:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8004890:	88ba      	ldrh	r2, [r7, #4]
 8004892:	89fb      	ldrh	r3, [r7, #14]
 8004894:	429a      	cmp	r2, r3
 8004896:	d804      	bhi.n	80048a2 <advance_index+0x2c>
 8004898:	89fa      	ldrh	r2, [r7, #14]
 800489a:	88fb      	ldrh	r3, [r7, #6]
 800489c:	005b      	lsls	r3, r3, #1
 800489e:	429a      	cmp	r2, r3
 80048a0:	db08      	blt.n	80048b4 <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 80048a2:	88fb      	ldrh	r3, [r7, #6]
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	425b      	negs	r3, r3
 80048aa:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 80048ac:	89fa      	ldrh	r2, [r7, #14]
 80048ae:	89bb      	ldrh	r3, [r7, #12]
 80048b0:	4413      	add	r3, r2
 80048b2:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 80048b4:	89fb      	ldrh	r3, [r7, #14]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr

080048c2 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b08a      	sub	sp, #40	; 0x28
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	60f8      	str	r0, [r7, #12]
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	4611      	mov	r1, r2
 80048ce:	461a      	mov	r2, r3
 80048d0:	460b      	mov	r3, r1
 80048d2:	80fb      	strh	r3, [r7, #6]
 80048d4:	4613      	mov	r3, r2
 80048d6:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	889b      	ldrh	r3, [r3, #4]
 80048dc:	847b      	strh	r3, [r7, #34]	; 0x22
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	843b      	strh	r3, [r7, #32]
 80048e2:	88bb      	ldrh	r3, [r7, #4]
 80048e4:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80048e6:	8c3a      	ldrh	r2, [r7, #32]
 80048e8:	8bfb      	ldrh	r3, [r7, #30]
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d304      	bcc.n	80048f8 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80048ee:	8c3a      	ldrh	r2, [r7, #32]
 80048f0:	8bfb      	ldrh	r3, [r7, #30]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	b29b      	uxth	r3, r3
 80048f6:	e008      	b.n	800490a <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80048f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	8c39      	ldrh	r1, [r7, #32]
 8004900:	8bfb      	ldrh	r3, [r7, #30]
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	b29b      	uxth	r3, r3
 8004906:	4413      	add	r3, r2
 8004908:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800490a:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 800490c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <_tu_fifo_peek+0x54>
 8004912:	2300      	movs	r3, #0
 8004914:	e037      	b.n	8004986 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	889b      	ldrh	r3, [r3, #4]
 800491a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800491c:	429a      	cmp	r2, r3
 800491e:	d91b      	bls.n	8004958 <_tu_fifo_peek+0x96>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	61bb      	str	r3, [r7, #24]
 8004924:	88fb      	ldrh	r3, [r7, #6]
 8004926:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8004928:	69bb      	ldr	r3, [r7, #24]
 800492a:	889b      	ldrh	r3, [r3, #4]
 800492c:	8afa      	ldrh	r2, [r7, #22]
 800492e:	429a      	cmp	r2, r3
 8004930:	d305      	bcc.n	800493e <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	889b      	ldrh	r3, [r3, #4]
 8004936:	8afa      	ldrh	r2, [r7, #22]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	82bb      	strh	r3, [r7, #20]
 800493c:	e004      	b.n	8004948 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 800493e:	69bb      	ldr	r3, [r7, #24]
 8004940:	889a      	ldrh	r2, [r3, #4]
 8004942:	8afb      	ldrh	r3, [r7, #22]
 8004944:	4413      	add	r3, r2
 8004946:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	8aba      	ldrh	r2, [r7, #20]
 800494c:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 800494e:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004950:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	889b      	ldrh	r3, [r3, #4]
 8004956:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	889b      	ldrh	r3, [r3, #4]
 800495c:	827b      	strh	r3, [r7, #18]
 800495e:	88bb      	ldrh	r3, [r7, #4]
 8004960:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004962:	e003      	b.n	800496c <_tu_fifo_peek+0xaa>
 8004964:	8a3a      	ldrh	r2, [r7, #16]
 8004966:	8a7b      	ldrh	r3, [r7, #18]
 8004968:	1ad3      	subs	r3, r2, r3
 800496a:	823b      	strh	r3, [r7, #16]
 800496c:	8a7a      	ldrh	r2, [r7, #18]
 800496e:	8a3b      	ldrh	r3, [r7, #16]
 8004970:	429a      	cmp	r2, r3
 8004972:	d9f7      	bls.n	8004964 <_tu_fifo_peek+0xa2>
  return idx;
 8004974:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004976:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8004978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800497a:	461a      	mov	r2, r3
 800497c:	68b9      	ldr	r1, [r7, #8]
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f7ff fe7a 	bl	8004678 <_ff_pull>

  return true;
 8004984:	2301      	movs	r3, #1
}
 8004986:	4618      	mov	r0, r3
 8004988:	3728      	adds	r7, #40	; 0x28
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b08c      	sub	sp, #48	; 0x30
 8004992:	af02      	add	r7, sp, #8
 8004994:	60f8      	str	r0, [r7, #12]
 8004996:	60b9      	str	r1, [r7, #8]
 8004998:	4611      	mov	r1, r2
 800499a:	461a      	mov	r2, r3
 800499c:	460b      	mov	r3, r1
 800499e:	80fb      	strh	r3, [r7, #6]
 80049a0:	4613      	mov	r3, r2
 80049a2:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	889b      	ldrh	r3, [r3, #4]
 80049a8:	847b      	strh	r3, [r7, #34]	; 0x22
 80049aa:	88bb      	ldrh	r3, [r7, #4]
 80049ac:	843b      	strh	r3, [r7, #32]
 80049ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80049b0:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80049b2:	8c3a      	ldrh	r2, [r7, #32]
 80049b4:	8bfb      	ldrh	r3, [r7, #30]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d304      	bcc.n	80049c4 <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80049ba:	8c3a      	ldrh	r2, [r7, #32]
 80049bc:	8bfb      	ldrh	r3, [r7, #30]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	e008      	b.n	80049d6 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80049c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049c6:	005b      	lsls	r3, r3, #1
 80049c8:	b29a      	uxth	r2, r3
 80049ca:	8c39      	ldrh	r1, [r7, #32]
 80049cc:	8bfb      	ldrh	r3, [r7, #30]
 80049ce:	1acb      	subs	r3, r1, r3
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80049d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 80049d8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <_tu_fifo_peek_n+0x54>
 80049de:	2300      	movs	r3, #0
 80049e0:	e041      	b.n	8004a66 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	889b      	ldrh	r3, [r3, #4]
 80049e6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049e8:	429a      	cmp	r2, r3
 80049ea:	d91b      	bls.n	8004a24 <_tu_fifo_peek_n+0x96>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	61bb      	str	r3, [r7, #24]
 80049f0:	88bb      	ldrh	r3, [r7, #4]
 80049f2:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	889b      	ldrh	r3, [r3, #4]
 80049f8:	8afa      	ldrh	r2, [r7, #22]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d305      	bcc.n	8004a0a <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	889b      	ldrh	r3, [r3, #4]
 8004a02:	8afa      	ldrh	r2, [r7, #22]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	82bb      	strh	r3, [r7, #20]
 8004a08:	e004      	b.n	8004a14 <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	889a      	ldrh	r2, [r3, #4]
 8004a0e:	8afb      	ldrh	r3, [r7, #22]
 8004a10:	4413      	add	r3, r2
 8004a12:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8004a14:	69bb      	ldr	r3, [r7, #24]
 8004a16:	8aba      	ldrh	r2, [r7, #20]
 8004a18:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8004a1a:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8004a1c:	863b      	strh	r3, [r7, #48]	; 0x30
    cnt = f->depth;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	889b      	ldrh	r3, [r3, #4]
 8004a22:	84fb      	strh	r3, [r7, #38]	; 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8004a24:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004a26:	88fb      	ldrh	r3, [r7, #6]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d201      	bcs.n	8004a30 <_tu_fifo_peek_n+0xa2>
 8004a2c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004a2e:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	889b      	ldrh	r3, [r3, #4]
 8004a34:	827b      	strh	r3, [r7, #18]
 8004a36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004a38:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8004a3a:	e003      	b.n	8004a44 <_tu_fifo_peek_n+0xb6>
 8004a3c:	8a3a      	ldrh	r2, [r7, #16]
 8004a3e:	8a7b      	ldrh	r3, [r7, #18]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	823b      	strh	r3, [r7, #16]
 8004a44:	8a7a      	ldrh	r2, [r7, #18]
 8004a46:	8a3b      	ldrh	r3, [r7, #16]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d9f7      	bls.n	8004a3c <_tu_fifo_peek_n+0xae>
  return idx;
 8004a4c:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8004a4e:	84bb      	strh	r3, [r7, #36]	; 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8004a50:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004a52:	88fa      	ldrh	r2, [r7, #6]
 8004a54:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f7ff fe29 	bl	80046b6 <_ff_pull_n>

  return n;
 8004a64:	88fb      	ldrh	r3, [r7, #6]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3728      	adds	r7, #40	; 0x28
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}

08004a6e <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b092      	sub	sp, #72	; 0x48
 8004a72:	af02      	add	r7, sp, #8
 8004a74:	60f8      	str	r0, [r7, #12]
 8004a76:	60b9      	str	r1, [r7, #8]
 8004a78:	4611      	mov	r1, r2
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	80fb      	strh	r3, [r7, #6]
 8004a80:	4613      	mov	r3, r2
 8004a82:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8004a84:	88fb      	ldrh	r3, [r7, #6]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d101      	bne.n	8004a8e <_tu_fifo_write_n+0x20>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	e0bc      	b.n	8004c08 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	891b      	ldrh	r3, [r3, #8]
 8004a92:	87fb      	strh	r3, [r7, #62]	; 0x3e
  uint16_t rd_idx = f->rd_idx;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	895b      	ldrh	r3, [r3, #10]
 8004a98:	86fb      	strh	r3, [r7, #54]	; 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	63bb      	str	r3, [r7, #56]	; 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	79db      	ldrb	r3, [r3, #7]
 8004aa2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	f083 0301 	eor.w	r3, r3, #1
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d036      	beq.n	8004b20 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	889b      	ldrh	r3, [r3, #4]
 8004ab6:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004ab8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004aba:	853b      	strh	r3, [r7, #40]	; 0x28
 8004abc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004abe:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004ac0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004ac2:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004ac4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ac6:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ac8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004aca:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8004acc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ace:	8c3b      	ldrh	r3, [r7, #32]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d304      	bcc.n	8004ade <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8004ad4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004ad6:	8c3b      	ldrh	r3, [r7, #32]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	e008      	b.n	8004af0 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004ae0:	005b      	lsls	r3, r3, #1
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 8004ae6:	8c3b      	ldrh	r3, [r7, #32]
 8004ae8:	1acb      	subs	r3, r1, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	4413      	add	r3, r2
 8004aee:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8004af0:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8004af2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004af4:	8bfb      	ldrh	r3, [r7, #30]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d904      	bls.n	8004b04 <_tu_fifo_write_n+0x96>
 8004afa:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8004afc:	8bfb      	ldrh	r3, [r7, #30]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	e000      	b.n	8004b06 <_tu_fifo_write_n+0x98>
 8004b04:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8004b06:	867b      	strh	r3, [r7, #50]	; 0x32
 8004b08:	88fb      	ldrh	r3, [r7, #6]
 8004b0a:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b0c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004b0e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b10:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b12:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b14:	4293      	cmp	r3, r2
 8004b16:	bf28      	it	cs
 8004b18:	4613      	movcs	r3, r2
 8004b1a:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8004b1c:	80fb      	strh	r3, [r7, #6]
 8004b1e:	e04b      	b.n	8004bb8 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	889b      	ldrh	r3, [r3, #4]
 8004b24:	88fa      	ldrh	r2, [r7, #6]
 8004b26:	429a      	cmp	r2, r3
 8004b28:	d317      	bcc.n	8004b5a <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8004b2a:	797b      	ldrb	r3, [r7, #5]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d10e      	bne.n	8004b4e <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	68fa      	ldr	r2, [r7, #12]
 8004b34:	8892      	ldrh	r2, [r2, #4]
 8004b36:	1a9b      	subs	r3, r3, r2
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	88d2      	ldrh	r2, [r2, #6]
 8004b3c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8004b40:	b292      	uxth	r2, r2
 8004b42:	fb02 f303 	mul.w	r3, r2, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4a:	4413      	add	r3, r2
 8004b4c:	63bb      	str	r3, [r7, #56]	; 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	889b      	ldrh	r3, [r3, #4]
 8004b52:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8004b54:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b56:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004b58:	e02e      	b.n	8004bb8 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	889b      	ldrh	r3, [r3, #4]
 8004b5e:	83bb      	strh	r3, [r7, #28]
 8004b60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004b62:	837b      	strh	r3, [r7, #26]
 8004b64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b66:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8004b68:	8b7a      	ldrh	r2, [r7, #26]
 8004b6a:	8b3b      	ldrh	r3, [r7, #24]
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d304      	bcc.n	8004b7a <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8004b70:	8b7a      	ldrh	r2, [r7, #26]
 8004b72:	8b3b      	ldrh	r3, [r7, #24]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	e008      	b.n	8004b8c <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004b7a:	8bbb      	ldrh	r3, [r7, #28]
 8004b7c:	005b      	lsls	r3, r3, #1
 8004b7e:	b29a      	uxth	r2, r3
 8004b80:	8b79      	ldrh	r1, [r7, #26]
 8004b82:	8b3b      	ldrh	r3, [r7, #24]
 8004b84:	1acb      	subs	r3, r1, r3
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	4413      	add	r3, r2
 8004b8a:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8004b8c:	86bb      	strh	r3, [r7, #52]	; 0x34
      if (overflowable_count + n >= 2*f->depth)
 8004b8e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004b90:	88fb      	ldrh	r3, [r7, #6]
 8004b92:	441a      	add	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	889b      	ldrh	r3, [r3, #4]
 8004b98:	005b      	lsls	r3, r3, #1
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	db0c      	blt.n	8004bb8 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8898      	ldrh	r0, [r3, #4]
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	889a      	ldrh	r2, [r3, #4]
 8004ba6:	88fb      	ldrh	r3, [r7, #6]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	b29a      	uxth	r2, r3
 8004bac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004bae:	4619      	mov	r1, r3
 8004bb0:	f7ff fe61 	bl	8004876 <advance_index>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d023      	beq.n	8004c06 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	889b      	ldrh	r3, [r3, #4]
 8004bc2:	82fb      	strh	r3, [r7, #22]
 8004bc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004bc6:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8004bc8:	e003      	b.n	8004bd2 <_tu_fifo_write_n+0x164>
 8004bca:	8aba      	ldrh	r2, [r7, #20]
 8004bcc:	8afb      	ldrh	r3, [r7, #22]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	82bb      	strh	r3, [r7, #20]
 8004bd2:	8afa      	ldrh	r2, [r7, #22]
 8004bd4:	8abb      	ldrh	r3, [r7, #20]
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d9f7      	bls.n	8004bca <_tu_fifo_write_n+0x15c>
  return idx;
 8004bda:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004bdc:	863b      	strh	r3, [r7, #48]	; 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8004bde:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8004be0:	88fa      	ldrh	r2, [r7, #6]
 8004be2:	797b      	ldrb	r3, [r7, #5]
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	460b      	mov	r3, r1
 8004be8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004bea:	68f8      	ldr	r0, [r7, #12]
 8004bec:	f7ff fc66 	bl	80044bc <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	889b      	ldrh	r3, [r3, #4]
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff fe3c 	bl	8004876 <advance_index>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	461a      	mov	r2, r3
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8004c06:	88fb      	ldrh	r3, [r7, #6]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3740      	adds	r7, #64	; 0x40
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b086      	sub	sp, #24
 8004c14:	af02      	add	r7, sp, #8
 8004c16:	60f8      	str	r0, [r7, #12]
 8004c18:	60b9      	str	r1, [r7, #8]
 8004c1a:	4611      	mov	r1, r2
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	460b      	mov	r3, r1
 8004c20:	80fb      	strh	r3, [r7, #6]
 8004c22:	4613      	mov	r3, r2
 8004c24:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	891b      	ldrh	r3, [r3, #8]
 8004c2a:	b298      	uxth	r0, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	895b      	ldrh	r3, [r3, #10]
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	88f9      	ldrh	r1, [r7, #6]
 8004c34:	797a      	ldrb	r2, [r7, #5]
 8004c36:	9201      	str	r2, [sp, #4]
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	460a      	mov	r2, r1
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fea4 	bl	800498e <_tu_fifo_peek_n>
 8004c46:	4603      	mov	r3, r0
 8004c48:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8898      	ldrh	r0, [r3, #4]
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	895b      	ldrh	r3, [r3, #10]
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	88fa      	ldrh	r2, [r7, #6]
 8004c56:	4619      	mov	r1, r3
 8004c58:	f7ff fe0d 	bl	8004876 <advance_index>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	461a      	mov	r2, r3
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 8004c64:	88fb      	ldrh	r3, [r7, #6]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}

08004c6e <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	8899      	ldrh	r1, [r3, #4]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	891b      	ldrh	r3, [r3, #8]
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	895b      	ldrh	r3, [r3, #10]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	81f9      	strh	r1, [r7, #14]
 8004c88:	81ba      	strh	r2, [r7, #12]
 8004c8a:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 8004c8c:	89ba      	ldrh	r2, [r7, #12]
 8004c8e:	897b      	ldrh	r3, [r7, #10]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d304      	bcc.n	8004c9e <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 8004c94:	89ba      	ldrh	r2, [r7, #12]
 8004c96:	897b      	ldrh	r3, [r7, #10]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	b29b      	uxth	r3, r3
 8004c9c:	e008      	b.n	8004cb0 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	005b      	lsls	r3, r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	89b9      	ldrh	r1, [r7, #12]
 8004ca6:	897b      	ldrh	r3, [r7, #10]
 8004ca8:	1acb      	subs	r3, r1, r3
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	4413      	add	r3, r2
 8004cae:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	8892      	ldrh	r2, [r2, #4]
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	bf2c      	ite	cs
 8004cb8:	2301      	movcs	r3, #1
 8004cba:	2300      	movcc	r3, #0
 8004cbc:	b2db      	uxtb	r3, r3
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3714      	adds	r7, #20
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	6078      	str	r0, [r7, #4]
 8004cd2:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	891b      	ldrh	r3, [r3, #8]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	895b      	ldrh	r3, [r3, #10]
 8004cde:	b29b      	uxth	r3, r3
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7ff fded 	bl	80048c2 <_tu_fifo_peek>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8898      	ldrh	r0, [r3, #4]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	895b      	ldrh	r3, [r3, #10]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	7bfa      	ldrb	r2, [r7, #15]
 8004cf8:	b292      	uxth	r2, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	f7ff fdbb 	bl	8004876 <advance_index>
 8004d00:	4603      	mov	r3, r0
 8004d02:	461a      	mov	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8004d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <tu_fifo_read_n_const_addr_full_words>:
{
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
}

uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8004d12:	b580      	push	{r7, lr}
 8004d14:	b084      	sub	sp, #16
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004d20:	88fa      	ldrh	r2, [r7, #6]
 8004d22:	2301      	movs	r3, #1
 8004d24:	68b9      	ldr	r1, [r7, #8]
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ff72 	bl	8004c10 <_tu_fifo_read_n>
 8004d2c:	4603      	mov	r3, r0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3710      	adds	r7, #16
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}

08004d36 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8004d36:	b580      	push	{r7, lr}
 8004d38:	b086      	sub	sp, #24
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
 8004d3e:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	891b      	ldrh	r3, [r3, #8]
 8004d44:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff ff91 	bl	8004c6e <tu_fifo_full>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00c      	beq.n	8004d6c <tu_fifo_write+0x36>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	79db      	ldrb	r3, [r3, #7]
 8004d56:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	f083 0301 	eor.w	r3, r3, #1
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <tu_fifo_write+0x36>
  {
    ret = false;
 8004d66:	2300      	movs	r3, #0
 8004d68:	75fb      	strb	r3, [r7, #23]
 8004d6a:	e022      	b.n	8004db2 <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	889b      	ldrh	r3, [r3, #4]
 8004d70:	823b      	strh	r3, [r7, #16]
 8004d72:	8abb      	ldrh	r3, [r7, #20]
 8004d74:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8004d76:	e003      	b.n	8004d80 <tu_fifo_write+0x4a>
 8004d78:	89fa      	ldrh	r2, [r7, #14]
 8004d7a:	8a3b      	ldrh	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	81fb      	strh	r3, [r7, #14]
 8004d80:	8a3a      	ldrh	r2, [r7, #16]
 8004d82:	89fb      	ldrh	r3, [r7, #14]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d9f7      	bls.n	8004d78 <tu_fifo_write+0x42>
  return idx;
 8004d88:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8004d8a:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8004d8c:	8a7b      	ldrh	r3, [r7, #18]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6839      	ldr	r1, [r7, #0]
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f7ff fb73 	bl	800447e <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	889b      	ldrh	r3, [r3, #4]
 8004d9c:	8ab9      	ldrh	r1, [r7, #20]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	4618      	mov	r0, r3
 8004da2:	f7ff fd68 	bl	8004876 <advance_index>
 8004da6:	4603      	mov	r3, r0
 8004da8:	461a      	mov	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	811a      	strh	r2, [r3, #8]

    ret = true;
 8004dae:	2301      	movs	r3, #1
 8004db0:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3718      	adds	r7, #24
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	4613      	mov	r3, r2
 8004dc8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8004dca:	88fa      	ldrh	r2, [r7, #6]
 8004dcc:	2301      	movs	r3, #1
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f7ff fe4c 	bl	8004a6e <_tu_fifo_write_n>
 8004dd6:	4603      	mov	r3, r0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8004df4:	2301      	movs	r3, #1
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
	...

08004e04 <tud_mounted>:
{
  return _usbd_dev.connected;
}

bool tud_mounted(void)
{
 8004e04:	b480      	push	{r7}
 8004e06:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <tud_mounted+0x20>)
 8004e0a:	785b      	ldrb	r3, [r3, #1]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	bf14      	ite	ne
 8004e12:	2301      	movne	r3, #1
 8004e14:	2300      	moveq	r3, #0
 8004e16:	b2db      	uxtb	r3, r3
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
 8004e22:	bf00      	nop
 8004e24:	200013a8 	.word	0x200013a8

08004e28 <tud_suspended>:

bool tud_suspended(void)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8004e2c:	4b07      	ldr	r3, [pc, #28]	; (8004e4c <tud_suspended+0x24>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf14      	ite	ne
 8004e3a:	2301      	movne	r3, #1
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	46bd      	mov	sp, r7
 8004e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	200013a8 	.word	0x200013a8

08004e50 <tud_remote_wakeup>:

bool tud_remote_wakeup(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en );
 8004e54:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <tud_remote_wakeup+0x44>)
 8004e56:	781b      	ldrb	r3, [r3, #0]
 8004e58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00d      	beq.n	8004e7e <tud_remote_wakeup+0x2e>
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <tud_remote_wakeup+0x44>)
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	f003 0310 	and.w	r3, r3, #16
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <tud_remote_wakeup+0x2e>
 8004e70:	4b08      	ldr	r3, [pc, #32]	; (8004e94 <tud_remote_wakeup+0x44>)
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	f003 0308 	and.w	r3, r3, #8
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d101      	bne.n	8004e82 <tud_remote_wakeup+0x32>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e005      	b.n	8004e8e <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <tud_remote_wakeup+0x48>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f002 fa2c 	bl	80072e4 <dcd_remote_wakeup>
  return true;
 8004e8c:	2301      	movs	r3, #1
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	bd80      	pop	{r7, pc}
 8004e92:	bf00      	nop
 8004e94:	200013a8 	.word	0x200013a8
 8004e98:	20000019 	.word	0x20000019

08004e9c <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8004e9c:	b480      	push	{r7}
 8004e9e:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8004ea0:	4b05      	ldr	r3, [pc, #20]	; (8004eb8 <tud_inited+0x1c>)
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2bff      	cmp	r3, #255	; 0xff
 8004ea6:	bf14      	ite	ne
 8004ea8:	2301      	movne	r3, #1
 8004eaa:	2300      	moveq	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr
 8004eb8:	20000019 	.word	0x20000019

08004ebc <tud_init>:

bool tud_init (uint8_t rhport)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08a      	sub	sp, #40	; 0x28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  // skip if already initialized
  if ( tud_inited() ) return true;
 8004ec6:	f7ff ffe9 	bl	8004e9c <tud_inited>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <tud_init+0x18>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e078      	b.n	8004fc6 <tud_init+0x10a>
  TU_LOG_USBD("USBD init on controller %u\r\n", rhport);
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8004ed4:	222b      	movs	r2, #43	; 0x2b
 8004ed6:	2100      	movs	r1, #0
 8004ed8:	483d      	ldr	r0, [pc, #244]	; (8004fd0 <tud_init+0x114>)
 8004eda:	f003 fba6 	bl	800862a <memset>
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <tud_init+0x118>)
 8004ee0:	617b      	str	r3, [r7, #20]
  // enable dcd/hcd interrupt
  qhdl->interrupt_set(true);
}

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	3304      	adds	r3, #4
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f7ff ff7a 	bl	8004de0 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8004eec:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8004eee:	4a3a      	ldr	r2, [pc, #232]	; (8004fd8 <tud_init+0x11c>)
 8004ef0:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8004ef2:	4b39      	ldr	r3, [pc, #228]	; (8004fd8 <tud_init+0x11c>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10a      	bne.n	8004f10 <tud_init+0x54>
 8004efa:	4b38      	ldr	r3, [pc, #224]	; (8004fdc <tud_init+0x120>)
 8004efc:	61bb      	str	r3, [r7, #24]
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f003 0301 	and.w	r3, r3, #1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d000      	beq.n	8004f0c <tud_init+0x50>
 8004f0a:	be00      	bkpt	0x0000
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e05a      	b.n	8004fc6 <tud_init+0x10a>

  // Get application driver if available
  if ( usbd_app_driver_get_cb )
 8004f10:	4b33      	ldr	r3, [pc, #204]	; (8004fe0 <tud_init+0x124>)
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d005      	beq.n	8004f22 <tud_init+0x66>
  {
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8004f16:	4833      	ldr	r0, [pc, #204]	; (8004fe4 <tud_init+0x128>)
 8004f18:	f3af 8000 	nop.w
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4a32      	ldr	r2, [pc, #200]	; (8004fe8 <tud_init+0x12c>)
 8004f20:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004f22:	2300      	movs	r3, #0
 8004f24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004f28:	e03b      	b.n	8004fa2 <tud_init+0xe6>
 8004f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f2e:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8004f34:	4b2b      	ldr	r3, [pc, #172]	; (8004fe4 <tud_init+0x128>)
 8004f36:	781b      	ldrb	r3, [r3, #0]
 8004f38:	7cfa      	ldrb	r2, [r7, #19]
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d209      	bcs.n	8004f52 <tud_init+0x96>
    driver = &_app_driver[drvid];
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <tud_init+0x12c>)
 8004f40:	6819      	ldr	r1, [r3, #0]
 8004f42:	7cfa      	ldrb	r2, [r7, #19]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	00db      	lsls	r3, r3, #3
 8004f4c:	440b      	add	r3, r1
 8004f4e:	60fb      	str	r3, [r7, #12]
 8004f50:	e00f      	b.n	8004f72 <tud_init+0xb6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8004f52:	4b24      	ldr	r3, [pc, #144]	; (8004fe4 <tud_init+0x128>)
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	7cfa      	ldrb	r2, [r7, #19]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d80a      	bhi.n	8004f72 <tud_init+0xb6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	4a21      	ldr	r2, [pc, #132]	; (8004fe4 <tud_init+0x128>)
 8004f60:	7812      	ldrb	r2, [r2, #0]
 8004f62:	1a9a      	subs	r2, r3, r2
 8004f64:	4613      	mov	r3, r2
 8004f66:	005b      	lsls	r3, r3, #1
 8004f68:	4413      	add	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4a1f      	ldr	r2, [pc, #124]	; (8004fec <tud_init+0x130>)
 8004f6e:	4413      	add	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]
  return driver;
 8004f72:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 8004f74:	623b      	str	r3, [r7, #32]
    TU_ASSERT(driver);
 8004f76:	6a3b      	ldr	r3, [r7, #32]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <tud_init+0xd6>
 8004f7c:	4b17      	ldr	r3, [pc, #92]	; (8004fdc <tud_init+0x120>)
 8004f7e:	61fb      	str	r3, [r7, #28]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d000      	beq.n	8004f8e <tud_init+0xd2>
 8004f8c:	be00      	bkpt	0x0000
 8004f8e:	2300      	movs	r3, #0
 8004f90:	e019      	b.n	8004fc6 <tud_init+0x10a>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++)
 8004f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <tud_init+0x128>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d9bd      	bls.n	8004f2a <tud_init+0x6e>
  }

  _usbd_rhport = rhport;
 8004fae:	4a10      	ldr	r2, [pc, #64]	; (8004ff0 <tud_init+0x134>)
 8004fb0:	79fb      	ldrb	r3, [r7, #7]
 8004fb2:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  dcd_init(rhport);
 8004fb4:	79fb      	ldrb	r3, [r7, #7]
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f002 f8a8 	bl	800710c <dcd_init>
  dcd_int_enable(rhport);
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f002 f92c 	bl	800721c <dcd_int_enable>

  return true;
 8004fc4:	2301      	movs	r3, #1
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3728      	adds	r7, #40	; 0x28
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	200013a8 	.word	0x200013a8
 8004fd4:	2000001c 	.word	0x2000001c
 8004fd8:	2000149c 	.word	0x2000149c
 8004fdc:	e000edf0 	.word	0xe000edf0
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	200013d8 	.word	0x200013d8
 8004fe8:	200013d4 	.word	0x200013d4
 8004fec:	08008940 	.word	0x08008940
 8004ff0:	20000019 	.word	0x20000019

08004ff4 <configuration_reset>:

static void configuration_reset(uint8_t rhport)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b088      	sub	sp, #32
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	71fb      	strb	r3, [r7, #7]
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8004ffe:	2300      	movs	r3, #0
 8005000:	77fb      	strb	r3, [r7, #31]
 8005002:	e039      	b.n	8005078 <configuration_reset+0x84>
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 800500c:	4b27      	ldr	r3, [pc, #156]	; (80050ac <configuration_reset+0xb8>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	7cfa      	ldrb	r2, [r7, #19]
 8005012:	429a      	cmp	r2, r3
 8005014:	d209      	bcs.n	800502a <configuration_reset+0x36>
    driver = &_app_driver[drvid];
 8005016:	4b26      	ldr	r3, [pc, #152]	; (80050b0 <configuration_reset+0xbc>)
 8005018:	6819      	ldr	r1, [r3, #0]
 800501a:	7cfa      	ldrb	r2, [r7, #19]
 800501c:	4613      	mov	r3, r2
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4413      	add	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	440b      	add	r3, r1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	e00f      	b.n	800504a <configuration_reset+0x56>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <configuration_reset+0xb8>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	7cfa      	ldrb	r2, [r7, #19]
 8005030:	429a      	cmp	r2, r3
 8005032:	d80a      	bhi.n	800504a <configuration_reset+0x56>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	4a1d      	ldr	r2, [pc, #116]	; (80050ac <configuration_reset+0xb8>)
 8005038:	7812      	ldrb	r2, [r2, #0]
 800503a:	1a9a      	subs	r2, r3, r2
 800503c:	4613      	mov	r3, r2
 800503e:	005b      	lsls	r3, r3, #1
 8005040:	4413      	add	r3, r2
 8005042:	00db      	lsls	r3, r3, #3
 8005044:	4a1b      	ldr	r2, [pc, #108]	; (80050b4 <configuration_reset+0xc0>)
 8005046:	4413      	add	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  return driver;
 800504a:	68fb      	ldr	r3, [r7, #12]
  {
    usbd_class_driver_t const * driver = get_driver(i);
 800504c:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver, );
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d109      	bne.n	8005068 <configuration_reset+0x74>
 8005054:	4b18      	ldr	r3, [pc, #96]	; (80050b8 <configuration_reset+0xc4>)
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f003 0301 	and.w	r3, r3, #1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d01e      	beq.n	80050a2 <configuration_reset+0xae>
 8005064:	be00      	bkpt	0x0000
 8005066:	e01c      	b.n	80050a2 <configuration_reset+0xae>
    driver->reset(rhport);
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	79fa      	ldrb	r2, [r7, #7]
 800506e:	4610      	mov	r0, r2
 8005070:	4798      	blx	r3
  for ( uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++ )
 8005072:	7ffb      	ldrb	r3, [r7, #31]
 8005074:	3301      	adds	r3, #1
 8005076:	77fb      	strb	r3, [r7, #31]
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <configuration_reset+0xb8>)
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	7ffa      	ldrb	r2, [r7, #31]
 800507e:	429a      	cmp	r2, r3
 8005080:	d9c0      	bls.n	8005004 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8005082:	222b      	movs	r2, #43	; 0x2b
 8005084:	2100      	movs	r1, #0
 8005086:	480d      	ldr	r0, [pc, #52]	; (80050bc <configuration_reset+0xc8>)
 8005088:	f003 facf 	bl	800862a <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 800508c:	2210      	movs	r2, #16
 800508e:	21ff      	movs	r1, #255	; 0xff
 8005090:	480b      	ldr	r0, [pc, #44]	; (80050c0 <configuration_reset+0xcc>)
 8005092:	f003 faca 	bl	800862a <memset>
  memset(_usbd_dev.ep2drv , DRVID_INVALID, sizeof(_usbd_dev.ep2drv )); // invalid mapping
 8005096:	220c      	movs	r2, #12
 8005098:	21ff      	movs	r1, #255	; 0xff
 800509a:	480a      	ldr	r0, [pc, #40]	; (80050c4 <configuration_reset+0xd0>)
 800509c:	f003 fac5 	bl	800862a <memset>
 80050a0:	e000      	b.n	80050a4 <configuration_reset+0xb0>
    TU_ASSERT(driver, );
 80050a2:	bf00      	nop
}
 80050a4:	3720      	adds	r7, #32
 80050a6:	46bd      	mov	sp, r7
 80050a8:	bd80      	pop	{r7, pc}
 80050aa:	bf00      	nop
 80050ac:	200013d8 	.word	0x200013d8
 80050b0:	200013d4 	.word	0x200013d4
 80050b4:	08008940 	.word	0x08008940
 80050b8:	e000edf0 	.word	0xe000edf0
 80050bc:	200013a8 	.word	0x200013a8
 80050c0:	200013ab 	.word	0x200013ab
 80050c4:	200013bb 	.word	0x200013bb

080050c8 <usbd_reset>:

static void usbd_reset(uint8_t rhport)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b082      	sub	sp, #8
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	4618      	mov	r0, r3
 80050d6:	f7ff ff8d 	bl	8004ff4 <configuration_reset>
  usbd_control_reset();
 80050da:	f001 fb73 	bl	80067c4 <usbd_control_reset>
}
 80050de:	bf00      	nop
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
	...

080050e8 <tud_task_ext>:
      }
    }
    @endcode
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr)
{
 80050e8:	b590      	push	{r4, r7, lr}
 80050ea:	b093      	sub	sp, #76	; 0x4c
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if ( !tud_inited() ) return;
 80050f4:	f7ff fed2 	bl	8004e9c <tud_inited>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f083 0301 	eor.w	r3, r3, #1
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2b00      	cmp	r3, #0
 8005102:	f040 814c 	bne.w	800539e <tud_task_ext+0x2b6>

  // Loop until there is no more events in the queue
  while (1)
  {
    dcd_event_t event;
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 8005106:	4baa      	ldr	r3, [pc, #680]	; (80053b0 <tud_task_ext+0x2c8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	637b      	str	r3, [r7, #52]	; 0x34
 800510c:	f107 030c 	add.w	r3, r7, #12
 8005110:	633b      	str	r3, [r7, #48]	; 0x30
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005118:	62bb      	str	r3, [r7, #40]	; 0x28
  qhdl->interrupt_set(false);
 800511a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2000      	movs	r0, #0
 8005120:	4798      	blx	r3
}
 8005122:	bf00      	nop

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  _osal_q_lock(qhdl);
  bool success = tu_fifo_read(&qhdl->ff, data);
 8005124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005126:	3304      	adds	r3, #4
 8005128:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800512a:	4618      	mov	r0, r3
 800512c:	f7ff fdcd 	bl	8004cca <tu_fifo_read>
 8005130:	4603      	mov	r3, r0
 8005132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	623b      	str	r3, [r7, #32]
  qhdl->interrupt_set(true);
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2001      	movs	r0, #1
 8005140:	4798      	blx	r3
}
 8005142:	bf00      	nop
  _osal_q_unlock(qhdl);

  return success;
 8005144:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005148:	f083 0301 	eor.w	r3, r3, #1
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	f040 8127 	bne.w	80053a2 <tud_task_ext+0x2ba>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch ( event.event_id )
 8005154:	7b7b      	ldrb	r3, [r7, #13]
 8005156:	3b01      	subs	r3, #1
 8005158:	2b07      	cmp	r3, #7
 800515a:	f200 810a 	bhi.w	8005372 <tud_task_ext+0x28a>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <tud_task_ext+0x7c>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	08005185 	.word	0x08005185
 8005168:	08005195 	.word	0x08005195
 800516c:	08005373 	.word	0x08005373
 8005170:	08005319 	.word	0x08005319
 8005174:	08005349 	.word	0x08005349
 8005178:	080051ab 	.word	0x080051ab
 800517c:	08005219 	.word	0x08005219
 8005180:	08005363 	.word	0x08005363
    {
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 8005184:	7b3b      	ldrb	r3, [r7, #12]
 8005186:	4618      	mov	r0, r3
 8005188:	f7ff ff9e 	bl	80050c8 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 800518c:	7c3a      	ldrb	r2, [r7, #16]
 800518e:	4b89      	ldr	r3, [pc, #548]	; (80053b4 <tud_task_ext+0x2cc>)
 8005190:	709a      	strb	r2, [r3, #2]
      break;
 8005192:	e103      	b.n	800539c <tud_task_ext+0x2b4>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 8005194:	7b3b      	ldrb	r3, [r7, #12]
 8005196:	4618      	mov	r0, r3
 8005198:	f7ff ff96 	bl	80050c8 <usbd_reset>

        // invoke callback
        if (tud_umount_cb) tud_umount_cb();
 800519c:	4b86      	ldr	r3, [pc, #536]	; (80053b8 <tud_task_ext+0x2d0>)
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f000 80f1 	beq.w	8005386 <tud_task_ext+0x29e>
 80051a4:	f3af 8000 	nop.w
      break;
 80051a8:	e0ed      	b.n	8005386 <tud_task_ext+0x29e>
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        TU_LOG_USBD("\r\n");

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 80051aa:	4a82      	ldr	r2, [pc, #520]	; (80053b4 <tud_task_ext+0x2cc>)
 80051ac:	7813      	ldrb	r3, [r2, #0]
 80051ae:	f043 0301 	orr.w	r3, r3, #1
 80051b2:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 80051b4:	4a7f      	ldr	r2, [pc, #508]	; (80053b4 <tud_task_ext+0x2cc>)
 80051b6:	7fd3      	ldrb	r3, [r2, #31]
 80051b8:	f36f 0300 	bfc	r3, #0, #1
 80051bc:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 80051be:	4a7d      	ldr	r2, [pc, #500]	; (80053b4 <tud_task_ext+0x2cc>)
 80051c0:	7fd3      	ldrb	r3, [r2, #31]
 80051c2:	f36f 0382 	bfc	r3, #2, #1
 80051c6:	77d3      	strb	r3, [r2, #31]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].busy = 0;
 80051c8:	4a7a      	ldr	r2, [pc, #488]	; (80053b4 <tud_task_ext+0x2cc>)
 80051ca:	f892 3020 	ldrb.w	r3, [r2, #32]
 80051ce:	f36f 0300 	bfc	r3, #0, #1
 80051d2:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN ].claimed = 0;
 80051d6:	4a77      	ldr	r2, [pc, #476]	; (80053b4 <tud_task_ext+0x2cc>)
 80051d8:	f892 3020 	ldrb.w	r3, [r2, #32]
 80051dc:	f36f 0382 	bfc	r3, #2, #1
 80051e0:	f882 3020 	strb.w	r3, [r2, #32]

        // Process control request
        if ( !process_control_request(event.rhport, &event.setup_received) )
 80051e4:	7b3a      	ldrb	r2, [r7, #12]
 80051e6:	f107 030c 	add.w	r3, r7, #12
 80051ea:	3304      	adds	r3, #4
 80051ec:	4619      	mov	r1, r3
 80051ee:	4610      	mov	r0, r2
 80051f0:	f000 f908 	bl	8005404 <process_control_request>
 80051f4:	4603      	mov	r3, r0
 80051f6:	f083 0301 	eor.w	r3, r3, #1
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80c4 	beq.w	800538a <tud_task_ext+0x2a2>
        {
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8005202:	7b3b      	ldrb	r3, [r7, #12]
 8005204:	2100      	movs	r1, #0
 8005206:	4618      	mov	r0, r3
 8005208:	f002 fbb6 	bl	8007978 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800520c:	7b3b      	ldrb	r3, [r7, #12]
 800520e:	2180      	movs	r1, #128	; 0x80
 8005210:	4618      	mov	r0, r3
 8005212:	f002 fbb1 	bl	8007978 <dcd_edpt_stall>
        }
      break;
 8005216:	e0b8      	b.n	800538a <tud_task_ext+0x2a2>

      case DCD_EVENT_XFER_COMPLETE:
      {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 8005218:	7c3b      	ldrb	r3, [r7, #16]
 800521a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800521e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005222:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8005224:	7fbb      	ldrb	r3, [r7, #30]
 8005226:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800522a:	b2db      	uxtb	r3, r3
        uint8_t const epnum   = tu_edpt_number(ep_addr);
 800522c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8005230:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005234:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005236:	7ffb      	ldrb	r3, [r7, #31]
 8005238:	09db      	lsrs	r3, r3, #7
 800523a:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 800523c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 8005240:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005244:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005248:	495a      	ldr	r1, [pc, #360]	; (80053b4 <tud_task_ext+0x2cc>)
 800524a:	0052      	lsls	r2, r2, #1
 800524c:	440a      	add	r2, r1
 800524e:	4413      	add	r3, r2
 8005250:	f103 0218 	add.w	r2, r3, #24
 8005254:	79d3      	ldrb	r3, [r2, #7]
 8005256:	f36f 0300 	bfc	r3, #0, #1
 800525a:	71d3      	strb	r3, [r2, #7]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 800525c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005260:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005264:	4953      	ldr	r1, [pc, #332]	; (80053b4 <tud_task_ext+0x2cc>)
 8005266:	0052      	lsls	r2, r2, #1
 8005268:	440a      	add	r2, r1
 800526a:	4413      	add	r3, r2
 800526c:	f103 0218 	add.w	r2, r3, #24
 8005270:	79d3      	ldrb	r3, [r2, #7]
 8005272:	f36f 0382 	bfc	r3, #2, #1
 8005276:	71d3      	strb	r3, [r2, #7]

        if ( 0 == epnum )
 8005278:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800527c:	2b00      	cmp	r3, #0
 800527e:	d107      	bne.n	8005290 <tud_task_ext+0x1a8>
        {
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete
 8005280:	7b38      	ldrb	r0, [r7, #12]
 8005282:	7c7a      	ldrb	r2, [r7, #17]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 800528a:	f001 fad1 	bl	8006830 <usbd_control_xfer_cb>

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
      }
      break;
 800528e:	e085      	b.n	800539c <tud_task_ext+0x2b4>
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 8005290:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8005294:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8005298:	4946      	ldr	r1, [pc, #280]	; (80053b4 <tud_task_ext+0x2cc>)
 800529a:	0052      	lsls	r2, r2, #1
 800529c:	440a      	add	r2, r1
 800529e:	4413      	add	r3, r2
 80052a0:	3313      	adds	r3, #19
 80052a2:	781b      	ldrb	r3, [r3, #0]
 80052a4:	777b      	strb	r3, [r7, #29]
  usbd_class_driver_t const * driver = NULL;
 80052a6:	2300      	movs	r3, #0
 80052a8:	61bb      	str	r3, [r7, #24]
  if ( drvid < _app_driver_count ) {
 80052aa:	4b44      	ldr	r3, [pc, #272]	; (80053bc <tud_task_ext+0x2d4>)
 80052ac:	781b      	ldrb	r3, [r3, #0]
 80052ae:	7f7a      	ldrb	r2, [r7, #29]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d209      	bcs.n	80052c8 <tud_task_ext+0x1e0>
    driver = &_app_driver[drvid];
 80052b4:	4b42      	ldr	r3, [pc, #264]	; (80053c0 <tud_task_ext+0x2d8>)
 80052b6:	6819      	ldr	r1, [r3, #0]
 80052b8:	7f7a      	ldrb	r2, [r7, #29]
 80052ba:	4613      	mov	r3, r2
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	00db      	lsls	r3, r3, #3
 80052c2:	440b      	add	r3, r1
 80052c4:	61bb      	str	r3, [r7, #24]
 80052c6:	e00f      	b.n	80052e8 <tud_task_ext+0x200>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80052c8:	4b3c      	ldr	r3, [pc, #240]	; (80053bc <tud_task_ext+0x2d4>)
 80052ca:	781b      	ldrb	r3, [r3, #0]
 80052cc:	7f7a      	ldrb	r2, [r7, #29]
 80052ce:	429a      	cmp	r2, r3
 80052d0:	d80a      	bhi.n	80052e8 <tud_task_ext+0x200>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80052d2:	7f7b      	ldrb	r3, [r7, #29]
 80052d4:	4a39      	ldr	r2, [pc, #228]	; (80053bc <tud_task_ext+0x2d4>)
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	1a9a      	subs	r2, r3, r2
 80052da:	4613      	mov	r3, r2
 80052dc:	005b      	lsls	r3, r3, #1
 80052de:	4413      	add	r3, r2
 80052e0:	00db      	lsls	r3, r3, #3
 80052e2:	4a38      	ldr	r2, [pc, #224]	; (80053c4 <tud_task_ext+0x2dc>)
 80052e4:	4413      	add	r3, r2
 80052e6:	61bb      	str	r3, [r7, #24]
  return driver;
 80052e8:	69bb      	ldr	r3, [r7, #24]
          usbd_class_driver_t const * driver = get_driver( _usbd_dev.ep2drv[epnum][ep_dir] );
 80052ea:	643b      	str	r3, [r7, #64]	; 0x40
          TU_ASSERT(driver, );
 80052ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d109      	bne.n	8005306 <tud_task_ext+0x21e>
 80052f2:	4b35      	ldr	r3, [pc, #212]	; (80053c8 <tud_task_ext+0x2e0>)
 80052f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0301 	and.w	r3, r3, #1
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d051      	beq.n	80053a6 <tud_task_ext+0x2be>
 8005302:	be00      	bkpt	0x0000
 8005304:	e04f      	b.n	80053a6 <tud_task_ext+0x2be>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 8005306:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005308:	691c      	ldr	r4, [r3, #16]
 800530a:	7b38      	ldrb	r0, [r7, #12]
 800530c:	7c7a      	ldrb	r2, [r7, #17]
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8005314:	47a0      	blx	r4
      break;
 8005316:	e041      	b.n	800539c <tud_task_ext+0x2b4>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if ( _usbd_dev.connected )
 8005318:	4b26      	ldr	r3, [pc, #152]	; (80053b4 <tud_task_ext+0x2cc>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005320:	b2db      	uxtb	r3, r3
 8005322:	2b00      	cmp	r3, #0
 8005324:	d033      	beq.n	800538e <tud_task_ext+0x2a6>
        {
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          if (tud_suspend_cb) tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <tud_task_ext+0x2e4>)
 8005328:	2b00      	cmp	r3, #0
 800532a:	d030      	beq.n	800538e <tud_task_ext+0x2a6>
 800532c:	4b21      	ldr	r3, [pc, #132]	; (80053b4 <tud_task_ext+0x2cc>)
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	4618      	mov	r0, r3
 8005342:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 8005346:	e022      	b.n	800538e <tud_task_ext+0x2a6>

      case DCD_EVENT_RESUME:
        if ( _usbd_dev.connected )
 8005348:	4b1a      	ldr	r3, [pc, #104]	; (80053b4 <tud_task_ext+0x2cc>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005350:	b2db      	uxtb	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01d      	beq.n	8005392 <tud_task_ext+0x2aa>
        {
          TU_LOG_USBD("\r\n");
          if (tud_resume_cb) tud_resume_cb();
 8005356:	4b1e      	ldr	r3, [pc, #120]	; (80053d0 <tud_task_ext+0x2e8>)
 8005358:	2b00      	cmp	r3, #0
 800535a:	d01a      	beq.n	8005392 <tud_task_ext+0x2aa>
 800535c:	f3af 8000 	nop.w
        }else
        {
          TU_LOG_USBD(" Skipped\r\n");
        }
      break;
 8005360:	e017      	b.n	8005392 <tud_task_ext+0x2aa>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if ( event.func_call.func ) event.func_call.func(event.func_call.param);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d016      	beq.n	8005396 <tud_task_ext+0x2ae>
 8005368:	693b      	ldr	r3, [r7, #16]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	4610      	mov	r0, r2
 800536e:	4798      	blx	r3
      break;
 8005370:	e011      	b.n	8005396 <tud_task_ext+0x2ae>

      case DCD_EVENT_SOF:
      default:
        TU_BREAKPOINT();
 8005372:	4b15      	ldr	r3, [pc, #84]	; (80053c8 <tud_task_ext+0x2e0>)
 8005374:	63bb      	str	r3, [r7, #56]	; 0x38
 8005376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00b      	beq.n	800539a <tud_task_ext+0x2b2>
 8005382:	be00      	bkpt	0x0000
      break;
 8005384:	e009      	b.n	800539a <tud_task_ext+0x2b2>
      break;
 8005386:	bf00      	nop
 8005388:	e6bd      	b.n	8005106 <tud_task_ext+0x1e>
      break;
 800538a:	bf00      	nop
 800538c:	e6bb      	b.n	8005106 <tud_task_ext+0x1e>
      break;
 800538e:	bf00      	nop
 8005390:	e6b9      	b.n	8005106 <tud_task_ext+0x1e>
      break;
 8005392:	bf00      	nop
 8005394:	e6b7      	b.n	8005106 <tud_task_ext+0x1e>
      break;
 8005396:	bf00      	nop
 8005398:	e6b5      	b.n	8005106 <tud_task_ext+0x1e>
      break;
 800539a:	bf00      	nop
  {
 800539c:	e6b3      	b.n	8005106 <tud_task_ext+0x1e>
  if ( !tud_inited() ) return;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <tud_task_ext+0x2c0>
    if ( !osal_queue_receive(_usbd_q, &event, timeout_ms) ) return;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <tud_task_ext+0x2c0>
          TU_ASSERT(driver, );
 80053a6:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) return;
#endif
  }
}
 80053a8:	374c      	adds	r7, #76	; 0x4c
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd90      	pop	{r4, r7, pc}
 80053ae:	bf00      	nop
 80053b0:	2000149c 	.word	0x2000149c
 80053b4:	200013a8 	.word	0x200013a8
 80053b8:	00000000 	.word	0x00000000
 80053bc:	200013d8 	.word	0x200013d8
 80053c0:	200013d4 	.word	0x200013d4
 80053c4:	08008940 	.word	0x08008940
 80053c8:	e000edf0 	.word	0xe000edf0
	...

080053d4 <invoke_class_control>:
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	4603      	mov	r3, r0
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
 80053e0:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	68db      	ldr	r3, [r3, #12]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f001 f9f8 	bl	80067dc <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	7bf8      	ldrb	r0, [r7, #15]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	2101      	movs	r1, #1
 80053f6:	4798      	blx	r3
 80053f8:	4603      	mov	r3, r0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <process_control_request>:

// This handles the actual request and its response.
// return false will cause its caller to stall control endpoint
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b09a      	sub	sp, #104	; 0x68
 8005408:	af00      	add	r7, sp, #0
 800540a:	4603      	mov	r3, r0
 800540c:	6039      	str	r1, [r7, #0]
 800540e:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8005410:	2000      	movs	r0, #0
 8005412:	f001 f9e3 	bl	80067dc <usbd_control_set_complete_callback>

  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800541e:	b2db      	uxtb	r3, r3
 8005420:	2b60      	cmp	r3, #96	; 0x60
 8005422:	d10a      	bne.n	800543a <process_control_request+0x36>
 8005424:	4ba9      	ldr	r3, [pc, #676]	; (80056cc <process_control_request+0x2c8>)
 8005426:	633b      	str	r3, [r7, #48]	; 0x30
 8005428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0301 	and.w	r3, r3, #1
 8005430:	2b00      	cmp	r3, #0
 8005432:	d000      	beq.n	8005436 <process_control_request+0x32>
 8005434:	be00      	bkpt	0x0000
 8005436:	2300      	movs	r3, #0
 8005438:	e2d3      	b.n	80059e2 <process_control_request+0x5de>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR )
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d10f      	bne.n	8005468 <process_control_request+0x64>
  {
    TU_VERIFY(tud_vendor_control_xfer_cb);
 8005448:	4ba1      	ldr	r3, [pc, #644]	; (80056d0 <process_control_request+0x2cc>)
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <process_control_request+0x4e>
 800544e:	2300      	movs	r3, #0
 8005450:	e2c7      	b.n	80059e2 <process_control_request+0x5de>

    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8005452:	489f      	ldr	r0, [pc, #636]	; (80056d0 <process_control_request+0x2cc>)
 8005454:	f001 f9c2 	bl	80067dc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	683a      	ldr	r2, [r7, #0]
 800545c:	2101      	movs	r1, #1
 800545e:	4618      	mov	r0, r3
 8005460:	f3af 8000 	nop.w
 8005464:	4603      	mov	r3, r0
 8005466:	e2bc      	b.n	80059e2 <process_control_request+0x5de>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient )
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8005470:	b2db      	uxtb	r3, r3
 8005472:	2b02      	cmp	r3, #2
 8005474:	f000 81d8 	beq.w	8005828 <process_control_request+0x424>
 8005478:	2b02      	cmp	r3, #2
 800547a:	f300 82a5 	bgt.w	80059c8 <process_control_request+0x5c4>
 800547e:	2b00      	cmp	r3, #0
 8005480:	d003      	beq.n	800548a <process_control_request+0x86>
 8005482:	2b01      	cmp	r3, #1
 8005484:	f000 815a 	beq.w	800573c <process_control_request+0x338>
 8005488:	e29e      	b.n	80059c8 <process_control_request+0x5c4>
  {
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type )
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	d148      	bne.n	800552a <process_control_request+0x126>
      {
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	889b      	ldrh	r3, [r3, #4]
 800549c:	b29b      	uxth	r3, r3
 800549e:	85fb      	strh	r3, [r7, #46]	; 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 80054a0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80054a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054ac:	2b0f      	cmp	r3, #15
 80054ae:	d901      	bls.n	80054b4 <process_control_request+0xb0>
 80054b0:	2300      	movs	r3, #0
 80054b2:	e296      	b.n	80059e2 <process_control_request+0x5de>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80054b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80054b8:	4a86      	ldr	r2, [pc, #536]	; (80056d4 <process_control_request+0x2d0>)
 80054ba:	4413      	add	r3, r2
 80054bc:	78db      	ldrb	r3, [r3, #3]
 80054be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  usbd_class_driver_t const * driver = NULL;
 80054c2:	2300      	movs	r3, #0
 80054c4:	62bb      	str	r3, [r7, #40]	; 0x28
  if ( drvid < _app_driver_count ) {
 80054c6:	4b84      	ldr	r3, [pc, #528]	; (80056d8 <process_control_request+0x2d4>)
 80054c8:	781b      	ldrb	r3, [r3, #0]
 80054ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d20a      	bcs.n	80054e8 <process_control_request+0xe4>
    driver = &_app_driver[drvid];
 80054d2:	4b82      	ldr	r3, [pc, #520]	; (80056dc <process_control_request+0x2d8>)
 80054d4:	6819      	ldr	r1, [r3, #0]
 80054d6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80054da:	4613      	mov	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	4413      	add	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	440b      	add	r3, r1
 80054e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054e6:	e011      	b.n	800550c <process_control_request+0x108>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80054e8:	4b7b      	ldr	r3, [pc, #492]	; (80056d8 <process_control_request+0x2d4>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d80b      	bhi.n	800550c <process_control_request+0x108>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80054f4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80054f8:	4a77      	ldr	r2, [pc, #476]	; (80056d8 <process_control_request+0x2d4>)
 80054fa:	7812      	ldrb	r2, [r2, #0]
 80054fc:	1a9a      	subs	r2, r3, r2
 80054fe:	4613      	mov	r3, r2
 8005500:	005b      	lsls	r3, r3, #1
 8005502:	4413      	add	r3, r2
 8005504:	00db      	lsls	r3, r3, #3
 8005506:	4a76      	ldr	r2, [pc, #472]	; (80056e0 <process_control_request+0x2dc>)
 8005508:	4413      	add	r3, r2
 800550a:	62bb      	str	r3, [r7, #40]	; 0x28
  return driver;
 800550c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800550e:	63bb      	str	r3, [r7, #56]	; 0x38
        TU_VERIFY(driver);
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <process_control_request+0x116>
 8005516:	2300      	movs	r3, #0
 8005518:	e263      	b.n	80059e2 <process_control_request+0x5de>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 800551a:	79fb      	ldrb	r3, [r7, #7]
 800551c:	683a      	ldr	r2, [r7, #0]
 800551e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff ff57 	bl	80053d4 <invoke_class_control>
 8005526:	4603      	mov	r3, r0
 8005528:	e25b      	b.n	80059e2 <process_control_request+0x5de>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b00      	cmp	r3, #0
 8005536:	d00a      	beq.n	800554e <process_control_request+0x14a>
      {
        // Non standard request is not supported
        TU_BREAKPOINT();
 8005538:	4b64      	ldr	r3, [pc, #400]	; (80056cc <process_control_request+0x2c8>)
 800553a:	643b      	str	r3, [r7, #64]	; 0x40
 800553c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f003 0301 	and.w	r3, r3, #1
 8005544:	2b00      	cmp	r3, #0
 8005546:	d000      	beq.n	800554a <process_control_request+0x146>
 8005548:	be00      	bkpt	0x0000
        return false;
 800554a:	2300      	movs	r3, #0
 800554c:	e249      	b.n	80059e2 <process_control_request+0x5de>
      }

      switch ( p_request->bRequest )
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	785b      	ldrb	r3, [r3, #1]
 8005552:	2b09      	cmp	r3, #9
 8005554:	f200 80e5 	bhi.w	8005722 <process_control_request+0x31e>
 8005558:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <process_control_request+0x15c>)
 800555a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555e:	bf00      	nop
 8005560:	080056ed 	.word	0x080056ed
 8005564:	080056a7 	.word	0x080056a7
 8005568:	08005723 	.word	0x08005723
 800556c:	08005683 	.word	0x08005683
 8005570:	08005723 	.word	0x08005723
 8005574:	08005589 	.word	0x08005589
 8005578:	08005669 	.word	0x08005669
 800557c:	08005723 	.word	0x08005723
 8005580:	080055ad 	.word	0x080055ad
 8005584:	080055c5 	.word	0x080055c5
      {
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8005588:	6838      	ldr	r0, [r7, #0]
 800558a:	f001 f937 	bl	80067fc <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	885b      	ldrh	r3, [r3, #2]
 8005592:	b29b      	uxth	r3, r3
 8005594:	b2da      	uxtb	r2, r3
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	4611      	mov	r1, r2
 800559a:	4618      	mov	r0, r3
 800559c:	f001 fe6e 	bl	800727c <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 80055a0:	4a4c      	ldr	r2, [pc, #304]	; (80056d4 <process_control_request+0x2d0>)
 80055a2:	7813      	ldrb	r3, [r2, #0]
 80055a4:	f043 0302 	orr.w	r3, r3, #2
 80055a8:	7013      	strb	r3, [r2, #0]
        break;
 80055aa:	e0c6      	b.n	800573a <process_control_request+0x336>

        case TUSB_REQ_GET_CONFIGURATION:
        {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 80055ac:	4b49      	ldr	r3, [pc, #292]	; (80056d4 <process_control_request+0x2d0>)
 80055ae:	785b      	ldrb	r3, [r3, #1]
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 80055b4:	f107 0213 	add.w	r2, r7, #19
 80055b8:	79f8      	ldrb	r0, [r7, #7]
 80055ba:	2301      	movs	r3, #1
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	f001 f891 	bl	80066e4 <tud_control_xfer>
        }
        break;
 80055c2:	e0ba      	b.n	800573a <process_control_request+0x336>

        case TUSB_REQ_SET_CONFIGURATION:
        {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	885b      	ldrh	r3, [r3, #2]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num)
 80055ce:	4b41      	ldr	r3, [pc, #260]	; (80056d4 <process_control_request+0x2d0>)
 80055d0:	785b      	ldrb	r3, [r3, #1]
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80055d8:	429a      	cmp	r2, r3
 80055da:	d03b      	beq.n	8005654 <process_control_request+0x250>
          {
            if ( _usbd_dev.cfg_num )
 80055dc:	4b3d      	ldr	r3, [pc, #244]	; (80056d4 <process_control_request+0x2d0>)
 80055de:	785b      	ldrb	r3, [r3, #1]
 80055e0:	b2db      	uxtb	r3, r3
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00f      	beq.n	8005606 <process_control_request+0x202>
            {
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 80055e6:	79fb      	ldrb	r3, [r7, #7]
 80055e8:	4618      	mov	r0, r3
 80055ea:	f002 f825 	bl	8007638 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80055ee:	4b39      	ldr	r3, [pc, #228]	; (80056d4 <process_control_request+0x2d0>)
 80055f0:	789b      	ldrb	r3, [r3, #2]
 80055f2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
              configuration_reset(rhport);
 80055f6:	79fb      	ldrb	r3, [r7, #7]
 80055f8:	4618      	mov	r0, r3
 80055fa:	f7ff fcfb 	bl	8004ff4 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80055fe:	4a35      	ldr	r2, [pc, #212]	; (80056d4 <process_control_request+0x2d0>)
 8005600:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005604:	7093      	strb	r3, [r2, #2]
            }

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num )
 8005606:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800560a:	2b00      	cmp	r3, #0
 800560c:	d01d      	beq.n	800564a <process_control_request+0x246>
            {
              // switch to new configuration if not zero
              TU_ASSERT( process_set_config(rhport, cfg_num) );
 800560e:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005612:	79fb      	ldrb	r3, [r7, #7]
 8005614:	4611      	mov	r1, r2
 8005616:	4618      	mov	r0, r3
 8005618:	f000 f9ec 	bl	80059f4 <process_set_config>
 800561c:	4603      	mov	r3, r0
 800561e:	f083 0301 	eor.w	r3, r3, #1
 8005622:	b2db      	uxtb	r3, r3
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00a      	beq.n	800563e <process_control_request+0x23a>
 8005628:	4b28      	ldr	r3, [pc, #160]	; (80056cc <process_control_request+0x2c8>)
 800562a:	64bb      	str	r3, [r7, #72]	; 0x48
 800562c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	2b00      	cmp	r3, #0
 8005636:	d000      	beq.n	800563a <process_control_request+0x236>
 8005638:	be00      	bkpt	0x0000
 800563a:	2300      	movs	r3, #0
 800563c:	e1d1      	b.n	80059e2 <process_control_request+0x5de>

              if ( tud_mount_cb ) tud_mount_cb();
 800563e:	4b29      	ldr	r3, [pc, #164]	; (80056e4 <process_control_request+0x2e0>)
 8005640:	2b00      	cmp	r3, #0
 8005642:	d007      	beq.n	8005654 <process_control_request+0x250>
 8005644:	f3af 8000 	nop.w
 8005648:	e004      	b.n	8005654 <process_control_request+0x250>
            }
            else
            {
              if ( tud_umount_cb ) tud_umount_cb();
 800564a:	4b27      	ldr	r3, [pc, #156]	; (80056e8 <process_control_request+0x2e4>)
 800564c:	2b00      	cmp	r3, #0
 800564e:	d001      	beq.n	8005654 <process_control_request+0x250>
 8005650:	f3af 8000 	nop.w
            }
          }

          _usbd_dev.cfg_num = cfg_num;
 8005654:	4a1f      	ldr	r2, [pc, #124]	; (80056d4 <process_control_request+0x2d0>)
 8005656:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800565a:	7053      	strb	r3, [r2, #1]
          tud_control_status(rhport, p_request);
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	6839      	ldr	r1, [r7, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 ffcd 	bl	8006600 <tud_control_status>
        }
        break;
 8005666:	e068      	b.n	800573a <process_control_request+0x336>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8005668:	79fb      	ldrb	r3, [r7, #7]
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	4618      	mov	r0, r3
 800566e:	f000 faeb 	bl	8005c48 <process_get_descriptor>
 8005672:	4603      	mov	r3, r0
 8005674:	f083 0301 	eor.w	r3, r3, #1
 8005678:	b2db      	uxtb	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d05c      	beq.n	8005738 <process_control_request+0x334>
 800567e:	2300      	movs	r3, #0
 8005680:	e1af      	b.n	80059e2 <process_control_request+0x5de>
        break;

        case TUSB_REQ_SET_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	885b      	ldrh	r3, [r3, #2]
 8005686:	b29b      	uxth	r3, r3
 8005688:	2b01      	cmp	r3, #1
 800568a:	d001      	beq.n	8005690 <process_control_request+0x28c>
 800568c:	2300      	movs	r3, #0
 800568e:	e1a8      	b.n	80059e2 <process_control_request+0x5de>

          TU_LOG_USBD("    Enable Remote Wakeup\r\n");

          // Host may enable remote wake up before suspending especially HID device
          _usbd_dev.remote_wakeup_en = true;
 8005690:	4a10      	ldr	r2, [pc, #64]	; (80056d4 <process_control_request+0x2d0>)
 8005692:	7813      	ldrb	r3, [r2, #0]
 8005694:	f043 0308 	orr.w	r3, r3, #8
 8005698:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 800569a:	79fb      	ldrb	r3, [r7, #7]
 800569c:	6839      	ldr	r1, [r7, #0]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 ffae 	bl	8006600 <tud_control_status>
        break;
 80056a4:	e049      	b.n	800573a <process_control_request+0x336>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	885b      	ldrh	r3, [r3, #2]
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d001      	beq.n	80056b4 <process_control_request+0x2b0>
 80056b0:	2300      	movs	r3, #0
 80056b2:	e196      	b.n	80059e2 <process_control_request+0x5de>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 80056b4:	4a07      	ldr	r2, [pc, #28]	; (80056d4 <process_control_request+0x2d0>)
 80056b6:	7813      	ldrb	r3, [r2, #0]
 80056b8:	f36f 03c3 	bfc	r3, #3, #1
 80056bc:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 80056be:	79fb      	ldrb	r3, [r7, #7]
 80056c0:	6839      	ldr	r1, [r7, #0]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f000 ff9c 	bl	8006600 <tud_control_status>
        break;
 80056c8:	e037      	b.n	800573a <process_control_request+0x336>
 80056ca:	bf00      	nop
 80056cc:	e000edf0 	.word	0xe000edf0
 80056d0:	00000000 	.word	0x00000000
 80056d4:	200013a8 	.word	0x200013a8
 80056d8:	200013d8 	.word	0x200013d8
 80056dc:	200013d4 	.word	0x200013d4
 80056e0:	08008940 	.word	0x08008940
	...
        case TUSB_REQ_GET_STATUS:
        {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 80056ec:	4b9a      	ldr	r3, [pc, #616]	; (8005958 <process_control_request+0x554>)
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	b29b      	uxth	r3, r3
 80056f6:	f003 0301 	and.w	r3, r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	4b96      	ldr	r3, [pc, #600]	; (8005958 <process_control_request+0x554>)
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	089b      	lsrs	r3, r3, #2
 8005702:	b2db      	uxtb	r3, r3
 8005704:	b29b      	uxth	r3, r3
 8005706:	f003 0302 	and.w	r3, r3, #2
 800570a:	b29b      	uxth	r3, r3
 800570c:	4313      	orrs	r3, r2
 800570e:	b29b      	uxth	r3, r3
 8005710:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8005712:	f107 0210 	add.w	r2, r7, #16
 8005716:	79f8      	ldrb	r0, [r7, #7]
 8005718:	2302      	movs	r3, #2
 800571a:	6839      	ldr	r1, [r7, #0]
 800571c:	f000 ffe2 	bl	80066e4 <tud_control_xfer>
        }
        break;
 8005720:	e00b      	b.n	800573a <process_control_request+0x336>

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8005722:	4b8e      	ldr	r3, [pc, #568]	; (800595c <process_control_request+0x558>)
 8005724:	647b      	str	r3, [r7, #68]	; 0x44
 8005726:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f003 0301 	and.w	r3, r3, #1
 800572e:	2b00      	cmp	r3, #0
 8005730:	d000      	beq.n	8005734 <process_control_request+0x330>
 8005732:	be00      	bkpt	0x0000
 8005734:	2300      	movs	r3, #0
 8005736:	e154      	b.n	80059e2 <process_control_request+0x5de>
        break;
 8005738:	bf00      	nop
      }
    break;
 800573a:	e151      	b.n	80059e0 <process_control_request+0x5dc>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE:
    {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	889b      	ldrh	r3, [r3, #4]
 8005740:	b29b      	uxth	r3, r3
 8005742:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005744:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800574c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005750:	2b0f      	cmp	r3, #15
 8005752:	d901      	bls.n	8005758 <process_control_request+0x354>
 8005754:	2300      	movs	r3, #0
 8005756:	e144      	b.n	80059e2 <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8005758:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800575c:	4a7e      	ldr	r2, [pc, #504]	; (8005958 <process_control_request+0x554>)
 800575e:	4413      	add	r3, r2
 8005760:	78db      	ldrb	r3, [r3, #3]
 8005762:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  usbd_class_driver_t const * driver = NULL;
 8005766:	2300      	movs	r3, #0
 8005768:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800576a:	4b7d      	ldr	r3, [pc, #500]	; (8005960 <process_control_request+0x55c>)
 800576c:	781b      	ldrb	r3, [r3, #0]
 800576e:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005772:	429a      	cmp	r2, r3
 8005774:	d20a      	bcs.n	800578c <process_control_request+0x388>
    driver = &_app_driver[drvid];
 8005776:	4b7b      	ldr	r3, [pc, #492]	; (8005964 <process_control_request+0x560>)
 8005778:	6819      	ldr	r1, [r3, #0]
 800577a:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 800577e:	4613      	mov	r3, r2
 8005780:	005b      	lsls	r3, r3, #1
 8005782:	4413      	add	r3, r2
 8005784:	00db      	lsls	r3, r3, #3
 8005786:	440b      	add	r3, r1
 8005788:	623b      	str	r3, [r7, #32]
 800578a:	e011      	b.n	80057b0 <process_control_request+0x3ac>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800578c:	4b74      	ldr	r3, [pc, #464]	; (8005960 <process_control_request+0x55c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8005794:	429a      	cmp	r2, r3
 8005796:	d80b      	bhi.n	80057b0 <process_control_request+0x3ac>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005798:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800579c:	4a70      	ldr	r2, [pc, #448]	; (8005960 <process_control_request+0x55c>)
 800579e:	7812      	ldrb	r2, [r2, #0]
 80057a0:	1a9a      	subs	r2, r3, r2
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4a6f      	ldr	r2, [pc, #444]	; (8005968 <process_control_request+0x564>)
 80057ac:	4413      	add	r3, r2
 80057ae:	623b      	str	r3, [r7, #32]
  return driver;
 80057b0:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80057b2:	653b      	str	r3, [r7, #80]	; 0x50
      TU_VERIFY(driver);
 80057b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <process_control_request+0x3ba>
 80057ba:	2300      	movs	r3, #0
 80057bc:	e111      	b.n	80059e2 <process_control_request+0x5de>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) )
 80057be:	79fb      	ldrb	r3, [r7, #7]
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7ff fe05 	bl	80053d4 <invoke_class_control>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f083 0301 	eor.w	r3, r3, #1
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 8103 	beq.w	80059de <process_control_request+0x5da>
      {
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057e0:	b2db      	uxtb	r3, r3
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d001      	beq.n	80057ea <process_control_request+0x3e6>
 80057e6:	2300      	movs	r3, #0
 80057e8:	e0fb      	b.n	80059e2 <process_control_request+0x5de>

        switch(p_request->bRequest)
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	785b      	ldrb	r3, [r3, #1]
 80057ee:	3b0a      	subs	r3, #10
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d816      	bhi.n	8005822 <process_control_request+0x41e>
        {
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 80057f4:	2000      	movs	r0, #0
 80057f6:	f000 fff1 	bl	80067dc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	2b0a      	cmp	r3, #10
 8005800:	d109      	bne.n	8005816 <process_control_request+0x412>
            {
              uint8_t alternate = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8005806:	f107 020f 	add.w	r2, r7, #15
 800580a:	79f8      	ldrb	r0, [r7, #7]
 800580c:	2301      	movs	r3, #1
 800580e:	6839      	ldr	r1, [r7, #0]
 8005810:	f000 ff68 	bl	80066e4 <tud_control_xfer>
            }else
            {
              tud_control_status(rhport, p_request);
            }
          break;
 8005814:	e007      	b.n	8005826 <process_control_request+0x422>
              tud_control_status(rhport, p_request);
 8005816:	79fb      	ldrb	r3, [r7, #7]
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 fef0 	bl	8006600 <tud_control_status>
          break;
 8005820:	e001      	b.n	8005826 <process_control_request+0x422>

          default: return false;
 8005822:	2300      	movs	r3, #0
 8005824:	e0dd      	b.n	80059e2 <process_control_request+0x5de>
        }
      }
    }
    break;
 8005826:	e0da      	b.n	80059de <process_control_request+0x5da>

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT:
    {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	889b      	ldrh	r3, [r3, #4]
 800582c:	b29b      	uxth	r3, r3
 800582e:	83bb      	strh	r3, [r7, #28]
 8005830:	8bbb      	ldrh	r3, [r7, #28]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005838:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800583c:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800583e:	7fbb      	ldrb	r3, [r7, #30]
 8005840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005844:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8005846:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 800584a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800584e:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8005850:	7ffb      	ldrb	r3, [r7, #31]
 8005852:	09db      	lsrs	r3, r3, #7
 8005854:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8005856:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 800585a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800585e:	2b05      	cmp	r3, #5
 8005860:	d90a      	bls.n	8005878 <process_control_request+0x474>
 8005862:	4b3e      	ldr	r3, [pc, #248]	; (800595c <process_control_request+0x558>)
 8005864:	65bb      	str	r3, [r7, #88]	; 0x58
 8005866:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d000      	beq.n	8005874 <process_control_request+0x470>
 8005872:	be00      	bkpt	0x0000
 8005874:	2300      	movs	r3, #0
 8005876:	e0b4      	b.n	80059e2 <process_control_request+0x5de>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8005878:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800587c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8005880:	4935      	ldr	r1, [pc, #212]	; (8005958 <process_control_request+0x554>)
 8005882:	0052      	lsls	r2, r2, #1
 8005884:	440a      	add	r2, r1
 8005886:	4413      	add	r3, r2
 8005888:	3313      	adds	r3, #19
 800588a:	781b      	ldrb	r3, [r3, #0]
 800588c:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8005892:	4b33      	ldr	r3, [pc, #204]	; (8005960 <process_control_request+0x55c>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	7efa      	ldrb	r2, [r7, #27]
 8005898:	429a      	cmp	r2, r3
 800589a:	d209      	bcs.n	80058b0 <process_control_request+0x4ac>
    driver = &_app_driver[drvid];
 800589c:	4b31      	ldr	r3, [pc, #196]	; (8005964 <process_control_request+0x560>)
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	7efa      	ldrb	r2, [r7, #27]
 80058a2:	4613      	mov	r3, r2
 80058a4:	005b      	lsls	r3, r3, #1
 80058a6:	4413      	add	r3, r2
 80058a8:	00db      	lsls	r3, r3, #3
 80058aa:	440b      	add	r3, r1
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	e00f      	b.n	80058d0 <process_control_request+0x4cc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 80058b0:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <process_control_request+0x55c>)
 80058b2:	781b      	ldrb	r3, [r3, #0]
 80058b4:	7efa      	ldrb	r2, [r7, #27]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d80a      	bhi.n	80058d0 <process_control_request+0x4cc>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80058ba:	7efb      	ldrb	r3, [r7, #27]
 80058bc:	4a28      	ldr	r2, [pc, #160]	; (8005960 <process_control_request+0x55c>)
 80058be:	7812      	ldrb	r2, [r2, #0]
 80058c0:	1a9a      	subs	r2, r3, r2
 80058c2:	4613      	mov	r3, r2
 80058c4:	005b      	lsls	r3, r3, #1
 80058c6:	4413      	add	r3, r2
 80058c8:	00db      	lsls	r3, r3, #3
 80058ca:	4a27      	ldr	r2, [pc, #156]	; (8005968 <process_control_request+0x564>)
 80058cc:	4413      	add	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]
  return driver;
 80058d0:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 80058d2:	663b      	str	r3, [r7, #96]	; 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type )
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00c      	beq.n	80058fc <process_control_request+0x4f8>
      {
        // Forward class request to its driver
        TU_VERIFY(driver);
 80058e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <process_control_request+0x4e8>
 80058e8:	2300      	movs	r3, #0
 80058ea:	e07a      	b.n	80059e2 <process_control_request+0x5de>
        return invoke_class_control(rhport, driver, p_request);
 80058ec:	79fb      	ldrb	r3, [r7, #7]
 80058ee:	683a      	ldr	r2, [r7, #0]
 80058f0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80058f2:	4618      	mov	r0, r3
 80058f4:	f7ff fd6e 	bl	80053d4 <invoke_class_control>
 80058f8:	4603      	mov	r3, r0
 80058fa:	e072      	b.n	80059e2 <process_control_request+0x5de>
      }
      else
      {
        // Handle STD request to endpoint
        switch ( p_request->bRequest )
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	785b      	ldrb	r3, [r3, #1]
 8005900:	2b03      	cmp	r3, #3
 8005902:	d018      	beq.n	8005936 <process_control_request+0x532>
 8005904:	2b03      	cmp	r3, #3
 8005906:	dc52      	bgt.n	80059ae <process_control_request+0x5aa>
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <process_control_request+0x50e>
 800590c:	2b01      	cmp	r3, #1
 800590e:	d012      	beq.n	8005936 <process_control_request+0x532>
 8005910:	e04d      	b.n	80059ae <process_control_request+0x5aa>
        {
          case TUSB_REQ_GET_STATUS:
          {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8005912:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fe26 	bl	800656c <usbd_edpt_stalled>
 8005920:	4603      	mov	r3, r0
 8005922:	b29b      	uxth	r3, r3
 8005924:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8005926:	f107 020c 	add.w	r2, r7, #12
 800592a:	79f8      	ldrb	r0, [r7, #7]
 800592c:	2302      	movs	r3, #2
 800592e:	6839      	ldr	r1, [r7, #0]
 8005930:	f000 fed8 	bl	80066e4 <tud_control_xfer>
          }
          break;
 8005934:	e047      	b.n	80059c6 <process_control_request+0x5c2>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE:
          {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue )
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	885b      	ldrh	r3, [r3, #2]
 800593a:	b29b      	uxth	r3, r3
 800593c:	2b00      	cmp	r3, #0
 800593e:	d11c      	bne.n	800597a <process_control_request+0x576>
            {
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest )
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	785b      	ldrb	r3, [r3, #1]
 8005944:	2b01      	cmp	r3, #1
 8005946:	d111      	bne.n	800596c <process_control_request+0x568>
              {
                usbd_edpt_clear_stall(rhport, ep_addr);
 8005948:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f000 fdbf 	bl	80064d4 <usbd_edpt_clear_stall>
 8005956:	e010      	b.n	800597a <process_control_request+0x576>
 8005958:	200013a8 	.word	0x200013a8
 800595c:	e000edf0 	.word	0xe000edf0
 8005960:	200013d8 	.word	0x200013d8
 8005964:	200013d4 	.word	0x200013d4
 8005968:	08008940 	.word	0x08008940
              }else
              {
                usbd_edpt_stall(rhport, ep_addr);
 800596c:	f897 2067 	ldrb.w	r2, [r7, #103]	; 0x67
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	4611      	mov	r1, r2
 8005974:	4618      	mov	r0, r3
 8005976:	f000 fd61 	bl	800643c <usbd_edpt_stall>
              }
            }

            if (driver)
 800597a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800597c:	2b00      	cmp	r3, #0
 800597e:	d021      	beq.n	80059c4 <process_control_request+0x5c0>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	683a      	ldr	r2, [r7, #0]
 8005984:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8005986:	4618      	mov	r0, r3
 8005988:	f7ff fd24 	bl	80053d4 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 800598c:	2000      	movs	r0, #0
 800598e:	f000 ff25 	bl	80067dc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8005992:	4b16      	ldr	r3, [pc, #88]	; (80059ec <process_control_request+0x5e8>)
 8005994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005998:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800599c:	b2db      	uxtb	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d110      	bne.n	80059c4 <process_control_request+0x5c0>
 80059a2:	79fb      	ldrb	r3, [r7, #7]
 80059a4:	6839      	ldr	r1, [r7, #0]
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fe2a 	bl	8006600 <tud_control_status>
            }
          }
          break;
 80059ac:	e00a      	b.n	80059c4 <process_control_request+0x5c0>

          // Unknown/Unsupported request
          default: TU_BREAKPOINT(); return false;
 80059ae:	4b10      	ldr	r3, [pc, #64]	; (80059f0 <process_control_request+0x5ec>)
 80059b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80059b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d000      	beq.n	80059c0 <process_control_request+0x5bc>
 80059be:	be00      	bkpt	0x0000
 80059c0:	2300      	movs	r3, #0
 80059c2:	e00e      	b.n	80059e2 <process_control_request+0x5de>
          break;
 80059c4:	bf00      	nop
        }
      }
    }
    break;
 80059c6:	e00b      	b.n	80059e0 <process_control_request+0x5dc>

    // Unknown recipient
    default: TU_BREAKPOINT(); return false;
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <process_control_request+0x5ec>)
 80059ca:	637b      	str	r3, [r7, #52]	; 0x34
 80059cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d000      	beq.n	80059da <process_control_request+0x5d6>
 80059d8:	be00      	bkpt	0x0000
 80059da:	2300      	movs	r3, #0
 80059dc:	e001      	b.n	80059e2 <process_control_request+0x5de>
    break;
 80059de:	bf00      	nop
  }

  return true;
 80059e0:	2301      	movs	r3, #1
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3768      	adds	r7, #104	; 0x68
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	200013a8 	.word	0x200013a8
 80059f0:	e000edf0 	.word	0xe000edf0

080059f4 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b096      	sub	sp, #88	; 0x58
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	4603      	mov	r3, r0
 80059fc:	460a      	mov	r2, r1
 80059fe:	71fb      	strb	r3, [r7, #7]
 8005a00:	4613      	mov	r3, r2
 8005a02:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8005a04:	79bb      	ldrb	r3, [r7, #6]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fc f84e 	bl	8001aac <tud_descriptor_configuration_cb>
 8005a10:	64f8      	str	r0, [r7, #76]	; 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 8005a12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <process_set_config+0x2c>
 8005a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1a:	785b      	ldrb	r3, [r3, #1]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d00a      	beq.n	8005a36 <process_set_config+0x42>
 8005a20:	4b83      	ldr	r3, [pc, #524]	; (8005c30 <process_set_config+0x23c>)
 8005a22:	623b      	str	r3, [r7, #32]
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d000      	beq.n	8005a32 <process_set_config+0x3e>
 8005a30:	be00      	bkpt	0x0000
 8005a32:	2300      	movs	r3, #0
 8005a34:	e0f7      	b.n	8005c26 <process_set_config+0x232>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 8005a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a38:	79db      	ldrb	r3, [r3, #7]
 8005a3a:	115b      	asrs	r3, r3, #5
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	b2d9      	uxtb	r1, r3
 8005a42:	4a7c      	ldr	r2, [pc, #496]	; (8005c34 <process_set_config+0x240>)
 8005a44:	7813      	ldrb	r3, [r2, #0]
 8005a46:	f361 1304 	bfi	r3, r1, #4, #1
 8005a4a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 8005a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a4e:	79db      	ldrb	r3, [r3, #7]
 8005a50:	119b      	asrs	r3, r3, #6
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	b2d9      	uxtb	r1, r3
 8005a58:	4a76      	ldr	r2, [pc, #472]	; (8005c34 <process_set_config+0x240>)
 8005a5a:	7813      	ldrb	r3, [r2, #0]
 8005a5c:	f361 1345 	bfi	r3, r1, #5, #1
 8005a60:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 8005a62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a64:	3309      	adds	r3, #9
 8005a66:	657b      	str	r3, [r7, #84]	; 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 8005a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a6a:	885b      	ldrh	r3, [r3, #2]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	461a      	mov	r2, r3
 8005a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a72:	4413      	add	r3, r2
 8005a74:	64bb      	str	r3, [r7, #72]	; 0x48

  while( p_desc < desc_end )
 8005a76:	e0d0      	b.n	8005c1a <process_set_config+0x226>
  {
    uint8_t assoc_itf_count = 1;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a80:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	3301      	adds	r3, #1
 8005a86:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8005a88:	2b0b      	cmp	r3, #11
 8005a8a:	d10f      	bne.n	8005aac <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8005a8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a8e:	647b      	str	r3, [r7, #68]	; 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8005a90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a92:	78db      	ldrb	r3, [r3, #3]
 8005a94:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8005a98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a9a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8005aaa:	657b      	str	r3, [r7, #84]	; 0x54
 8005aac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005aae:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8005ab6:	2b04      	cmp	r3, #4
 8005ab8:	d00a      	beq.n	8005ad0 <process_set_config+0xdc>
 8005aba:	4b5d      	ldr	r3, [pc, #372]	; (8005c30 <process_set_config+0x23c>)
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d000      	beq.n	8005acc <process_set_config+0xd8>
 8005aca:	be00      	bkpt	0x0000
 8005acc:	2300      	movs	r3, #0
 8005ace:	e0aa      	b.n	8005c26 <process_set_config+0x232>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8005ad0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad2:	643b      	str	r3, [r7, #64]	; 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8005ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	87fb      	strh	r3, [r7, #62]	; 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8005ae2:	e082      	b.n	8005bea <process_set_config+0x1f6>
 8005ae4:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005ae8:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8005aee:	4b52      	ldr	r3, [pc, #328]	; (8005c38 <process_set_config+0x244>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	7bfa      	ldrb	r2, [r7, #15]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d209      	bcs.n	8005b0c <process_set_config+0x118>
    driver = &_app_driver[drvid];
 8005af8:	4b50      	ldr	r3, [pc, #320]	; (8005c3c <process_set_config+0x248>)
 8005afa:	6819      	ldr	r1, [r3, #0]
 8005afc:	7bfa      	ldrb	r2, [r7, #15]
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	60bb      	str	r3, [r7, #8]
 8005b0a:	e00f      	b.n	8005b2c <process_set_config+0x138>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005b0c:	4b4a      	ldr	r3, [pc, #296]	; (8005c38 <process_set_config+0x244>)
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	7bfa      	ldrb	r2, [r7, #15]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d80a      	bhi.n	8005b2c <process_set_config+0x138>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4a47      	ldr	r2, [pc, #284]	; (8005c38 <process_set_config+0x244>)
 8005b1a:	7812      	ldrb	r2, [r2, #0]
 8005b1c:	1a9a      	subs	r2, r3, r2
 8005b1e:	4613      	mov	r3, r2
 8005b20:	005b      	lsls	r3, r3, #1
 8005b22:	4413      	add	r3, r2
 8005b24:	00db      	lsls	r3, r3, #3
 8005b26:	4a46      	ldr	r2, [pc, #280]	; (8005c40 <process_set_config+0x24c>)
 8005b28:	4413      	add	r3, r2
 8005b2a:	60bb      	str	r3, [r7, #8]
  return driver;
 8005b2c:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8005b2e:	63bb      	str	r3, [r7, #56]	; 0x38
      TU_ASSERT(driver);
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <process_set_config+0x158>
 8005b36:	4b3e      	ldr	r3, [pc, #248]	; (8005c30 <process_set_config+0x23c>)
 8005b38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f003 0301 	and.w	r3, r3, #1
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d000      	beq.n	8005b48 <process_set_config+0x154>
 8005b46:	be00      	bkpt	0x0000
 8005b48:	2300      	movs	r3, #0
 8005b4a:	e06c      	b.n	8005c26 <process_set_config+0x232>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8005b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8005b52:	79f8      	ldrb	r0, [r7, #7]
 8005b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b56:	4798      	blx	r3
 8005b58:	4603      	mov	r3, r0
 8005b5a:	86fb      	strh	r3, [r7, #54]	; 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8005b5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d93e      	bls.n	8005be0 <process_set_config+0x1ec>
 8005b62:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d83a      	bhi.n	8005be0 <process_set_config+0x1ec>
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8005b70:	e024      	b.n	8005bbc <process_set_config+0x1c8>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8005b72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b74:	789a      	ldrb	r2, [r3, #2]
 8005b76:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8005b80:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005b84:	4a2b      	ldr	r2, [pc, #172]	; (8005c34 <process_set_config+0x240>)
 8005b86:	4413      	add	r3, r2
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2bff      	cmp	r3, #255	; 0xff
 8005b8c:	d00a      	beq.n	8005ba4 <process_set_config+0x1b0>
 8005b8e:	4b28      	ldr	r3, [pc, #160]	; (8005c30 <process_set_config+0x23c>)
 8005b90:	633b      	str	r3, [r7, #48]	; 0x30
 8005b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0301 	and.w	r3, r3, #1
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d000      	beq.n	8005ba0 <process_set_config+0x1ac>
 8005b9e:	be00      	bkpt	0x0000
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	e040      	b.n	8005c26 <process_set_config+0x232>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8005ba4:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005ba8:	4a22      	ldr	r2, [pc, #136]	; (8005c34 <process_set_config+0x240>)
 8005baa:	4413      	add	r3, r2
 8005bac:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8005bb0:	70da      	strb	r2, [r3, #3]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8005bb2:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8005bbc:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8005bc0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8005bc4:	429a      	cmp	r2, r3
 8005bc6:	d3d4      	bcc.n	8005b72 <process_set_config+0x17e>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8005bc8:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005bcc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005bce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005bd0:	481c      	ldr	r0, [pc, #112]	; (8005c44 <process_set_config+0x250>)
 8005bd2:	f002 fce5 	bl	80085a0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8005bd6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005bd8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bda:	4413      	add	r3, r2
 8005bdc:	657b      	str	r3, [r7, #84]	; 0x54

        break; // exit driver find loop
 8005bde:	e00b      	b.n	8005bf8 <process_set_config+0x204>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8005be0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8005be4:	3301      	adds	r3, #1
 8005be6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <process_set_config+0x244>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	f67f af76 	bls.w	8005ae4 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8005bf8:	4b0f      	ldr	r3, [pc, #60]	; (8005c38 <process_set_config+0x244>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d90a      	bls.n	8005c1a <process_set_config+0x226>
 8005c04:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <process_set_config+0x23c>)
 8005c06:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d000      	beq.n	8005c16 <process_set_config+0x222>
 8005c14:	be00      	bkpt	0x0000
 8005c16:	2300      	movs	r3, #0
 8005c18:	e005      	b.n	8005c26 <process_set_config+0x232>
  while( p_desc < desc_end )
 8005c1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c1e:	429a      	cmp	r2, r3
 8005c20:	f4ff af2a 	bcc.w	8005a78 <process_set_config+0x84>
  }

  return true;
 8005c24:	2301      	movs	r3, #1
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3758      	adds	r7, #88	; 0x58
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	e000edf0 	.word	0xe000edf0
 8005c34:	200013a8 	.word	0x200013a8
 8005c38:	200013d8 	.word	0x200013d8
 8005c3c:	200013d4 	.word	0x200013d4
 8005c40:	08008940 	.word	0x08008940
 8005c44:	200013bb 	.word	0x200013bb

08005c48 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b094      	sub	sp, #80	; 0x50
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	4603      	mov	r3, r0
 8005c50:	6039      	str	r1, [r7, #0]
 8005c52:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	885b      	ldrh	r3, [r3, #2]
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8005c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005c5e:	0a1b      	lsrs	r3, r3, #8
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	885b      	ldrh	r3, [r3, #2]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	84fb      	strh	r3, [r7, #38]	; 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8005c70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a

  switch(desc_type)
 8005c78:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	2b0e      	cmp	r3, #14
 8005c80:	f200 80bc 	bhi.w	8005dfc <process_get_descriptor+0x1b4>
 8005c84:	a201      	add	r2, pc, #4	; (adr r2, 8005c8c <process_get_descriptor+0x44>)
 8005c86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c8a:	bf00      	nop
 8005c8c:	08005cc9 	.word	0x08005cc9
 8005c90:	08005d2d 	.word	0x08005d2d
 8005c94:	08005d95 	.word	0x08005d95
 8005c98:	08005dfd 	.word	0x08005dfd
 8005c9c:	08005dfd 	.word	0x08005dfd
 8005ca0:	08005dcb 	.word	0x08005dcb
 8005ca4:	08005d2d 	.word	0x08005d2d
 8005ca8:	08005dfd 	.word	0x08005dfd
 8005cac:	08005dfd 	.word	0x08005dfd
 8005cb0:	08005dfd 	.word	0x08005dfd
 8005cb4:	08005dfd 	.word	0x08005dfd
 8005cb8:	08005dfd 	.word	0x08005dfd
 8005cbc:	08005dfd 	.word	0x08005dfd
 8005cc0:	08005dfd 	.word	0x08005dfd
 8005cc4:	08005cdf 	.word	0x08005cdf
  {
    case TUSB_DESC_DEVICE:
    {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8005cc8:	f7fb fed8 	bl	8001a7c <tud_descriptor_device_cb>
 8005ccc:	62b8      	str	r0, [r7, #40]	; 0x28
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else
      {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8005cce:	79f8      	ldrb	r0, [r7, #7]
 8005cd0:	2312      	movs	r3, #18
 8005cd2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	f000 fd05 	bl	80066e4 <tud_control_xfer>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	e08f      	b.n	8005dfe <process_get_descriptor+0x1b6>
    case TUSB_DESC_BOS:
    {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      if (!tud_descriptor_bos_cb) return false;
 8005cde:	4b4a      	ldr	r3, [pc, #296]	; (8005e08 <process_get_descriptor+0x1c0>)
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <process_get_descriptor+0xa0>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	e08a      	b.n	8005dfe <process_get_descriptor+0x1b6>

      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8005ce8:	f3af 8000 	nop.w
 8005cec:	4603      	mov	r3, r0
 8005cee:	647b      	str	r3, [r7, #68]	; 0x44
      TU_ASSERT(desc_bos);
 8005cf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d10a      	bne.n	8005d0c <process_get_descriptor+0xc4>
 8005cf6:	4b45      	ldr	r3, [pc, #276]	; (8005e0c <process_get_descriptor+0x1c4>)
 8005cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d000      	beq.n	8005d08 <process_get_descriptor+0xc0>
 8005d06:	be00      	bkpt	0x0000
 8005d08:	2300      	movs	r3, #0
 8005d0a:	e078      	b.n	8005dfe <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0e:	3302      	adds	r3, #2
 8005d10:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8005d12:	6a3b      	ldr	r3, [r7, #32]
 8005d14:	881b      	ldrh	r3, [r3, #0]
 8005d16:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8005d1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8005d20:	79f8      	ldrb	r0, [r7, #7]
 8005d22:	6839      	ldr	r1, [r7, #0]
 8005d24:	f000 fcde 	bl	80066e4 <tud_control_xfer>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	e068      	b.n	8005dfe <process_get_descriptor+0x1b6>
    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG:
    {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION )
 8005d2c:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d107      	bne.n	8005d44 <process_get_descriptor+0xfc>
      {
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8005d34:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7fb feb7 	bl	8001aac <tud_descriptor_configuration_cb>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d42:	e00b      	b.n	8005d5c <process_get_descriptor+0x114>
      }else
      {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        TU_VERIFY( tud_descriptor_other_speed_configuration_cb );
 8005d44:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <process_get_descriptor+0x1c8>)
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d101      	bne.n	8005d4e <process_get_descriptor+0x106>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	e057      	b.n	8005dfe <process_get_descriptor+0x1b6>
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8005d4e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005d52:	4618      	mov	r0, r3
 8005d54:	f3af 8000 	nop.w
 8005d58:	4603      	mov	r3, r0
 8005d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }

      TU_ASSERT(desc_config);
 8005d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10a      	bne.n	8005d78 <process_get_descriptor+0x130>
 8005d62:	4b2a      	ldr	r3, [pc, #168]	; (8005e0c <process_get_descriptor+0x1c4>)
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d000      	beq.n	8005d74 <process_get_descriptor+0x12c>
 8005d72:	be00      	bkpt	0x0000
 8005d74:	2300      	movs	r3, #0
 8005d76:	e042      	b.n	8005dfe <process_get_descriptor+0x1b6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8005d78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d7a:	3302      	adds	r3, #2
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	867b      	strh	r3, [r7, #50]	; 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8005d84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d86:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8005d88:	79f8      	ldrb	r0, [r7, #7]
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	f000 fcaa 	bl	80066e4 <tud_control_xfer>
 8005d90:	4603      	mov	r3, r0
 8005d92:	e034      	b.n	8005dfe <process_get_descriptor+0x1b6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	889b      	ldrh	r3, [r3, #4]
 8005d98:	b29a      	uxth	r2, r3
 8005d9a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8005d9e:	4611      	mov	r1, r2
 8005da0:	4618      	mov	r0, r3
 8005da2:	f7fb fe91 	bl	8001ac8 <tud_descriptor_string_cb>
 8005da6:	6378      	str	r0, [r7, #52]	; 0x34
      TU_VERIFY(desc_str);
 8005da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d101      	bne.n	8005db2 <process_get_descriptor+0x16a>
 8005dae:	2300      	movs	r3, #0
 8005db0:	e025      	b.n	8005dfe <process_get_descriptor+0x1b6>
 8005db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005db4:	61bb      	str	r3, [r7, #24]
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	79f8      	ldrb	r0, [r7, #7]
 8005dbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005dc0:	6839      	ldr	r1, [r7, #0]
 8005dc2:	f000 fc8f 	bl	80066e4 <tud_control_xfer>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	e019      	b.n	8005dfe <process_get_descriptor+0x1b6>

    case TUSB_DESC_DEVICE_QUALIFIER:
    {
      TU_LOG_USBD(" Device Qualifier\r\n");

      TU_VERIFY( tud_descriptor_device_qualifier_cb );
 8005dca:	4b12      	ldr	r3, [pc, #72]	; (8005e14 <process_get_descriptor+0x1cc>)
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d101      	bne.n	8005dd4 <process_get_descriptor+0x18c>
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	e014      	b.n	8005dfe <process_get_descriptor+0x1b6>

      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8005dd4:	f3af 8000 	nop.w
 8005dd8:	63b8      	str	r0, [r7, #56]	; 0x38
      TU_VERIFY(desc_qualifier);
 8005dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <process_get_descriptor+0x19c>
 8005de0:	2300      	movs	r3, #0
 8005de2:	e00c      	b.n	8005dfe <process_get_descriptor+0x1b6>
 8005de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	79f8      	ldrb	r0, [r7, #7]
 8005df0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	f000 fc76 	bl	80066e4 <tud_control_xfer>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	e000      	b.n	8005dfe <process_get_descriptor+0x1b6>
    }
    // break; // unreachable

    default: return false;
 8005dfc:	2300      	movs	r3, #0
  }
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3750      	adds	r7, #80	; 0x50
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	00000000 	.word	0x00000000
 8005e0c:	e000edf0 	.word	0xe000edf0
	...

08005e18 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b09c      	sub	sp, #112	; 0x70
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8005e24:	2300      	movs	r3, #0
 8005e26:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  switch (event->event_id) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	785b      	ldrb	r3, [r3, #1]
 8005e2e:	3b02      	subs	r3, #2
 8005e30:	2b03      	cmp	r3, #3
 8005e32:	f200 80fc 	bhi.w	800602e <dcd_event_handler+0x216>
 8005e36:	a201      	add	r2, pc, #4	; (adr r2, 8005e3c <dcd_event_handler+0x24>)
 8005e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e3c:	08005e4d 	.word	0x08005e4d
 8005e40:	08005ebd 	.word	0x08005ebd
 8005e44:	08005e79 	.word	0x08005e79
 8005e48:	08005e9b 	.word	0x08005e9b
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8005e4c:	4aaa      	ldr	r2, [pc, #680]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e4e:	7813      	ldrb	r3, [r2, #0]
 8005e50:	f36f 0300 	bfc	r3, #0, #1
 8005e54:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8005e56:	4aa8      	ldr	r2, [pc, #672]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e58:	7813      	ldrb	r3, [r2, #0]
 8005e5a:	f36f 0341 	bfc	r3, #1, #1
 8005e5e:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8005e60:	4ba5      	ldr	r3, [pc, #660]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8005e66:	4aa4      	ldr	r2, [pc, #656]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e68:	7813      	ldrb	r3, [r2, #0]
 8005e6a:	f36f 0382 	bfc	r3, #2, #1
 8005e6e:	7013      	strb	r3, [r2, #0]
      send = true;
 8005e70:	2301      	movs	r3, #1
 8005e72:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005e76:	e0e1      	b.n	800603c <dcd_event_handler+0x224>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8005e78:	4b9f      	ldr	r3, [pc, #636]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f000 80d7 	beq.w	8006036 <dcd_event_handler+0x21e>
        _usbd_dev.suspended = 1;
 8005e88:	4a9b      	ldr	r2, [pc, #620]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e8a:	7813      	ldrb	r3, [r2, #0]
 8005e8c:	f043 0304 	orr.w	r3, r3, #4
 8005e90:	7013      	strb	r3, [r2, #0]
        send = true;
 8005e92:	2301      	movs	r3, #1
 8005e94:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8005e98:	e0cd      	b.n	8006036 <dcd_event_handler+0x21e>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8005e9a:	4b97      	ldr	r3, [pc, #604]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f000 80c8 	beq.w	800603a <dcd_event_handler+0x222>
        _usbd_dev.suspended = 0;
 8005eaa:	4a93      	ldr	r2, [pc, #588]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005eac:	7813      	ldrb	r3, [r2, #0]
 8005eae:	f36f 0382 	bfc	r3, #2, #1
 8005eb2:	7013      	strb	r3, [r2, #0]
        send = true;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      }
      break;
 8005eba:	e0be      	b.n	800603a <dcd_event_handler+0x222>

    case DCD_EVENT_SOF:
      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8005ebc:	4b8e      	ldr	r3, [pc, #568]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d067      	beq.n	8005f9a <dcd_event_handler+0x182>
        _usbd_dev.suspended = 0;
 8005eca:	4a8b      	ldr	r2, [pc, #556]	; (80060f8 <dcd_event_handler+0x2e0>)
 8005ecc:	7813      	ldrb	r3, [r2, #0]
 8005ece:	f36f 0382 	bfc	r3, #2, #1
 8005ed2:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8005ed4:	f107 0308 	add.w	r3, r7, #8
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
 8005edc:	605a      	str	r2, [r3, #4]
 8005ede:	609a      	str	r2, [r3, #8]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	723b      	strb	r3, [r7, #8]
 8005ee6:	2305      	movs	r3, #5
 8005ee8:	727b      	strb	r3, [r7, #9]
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	667b      	str	r3, [r7, #100]	; 0x64
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 8005ef6:	4b81      	ldr	r3, [pc, #516]	; (80060fc <dcd_event_handler+0x2e4>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005efe:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f00:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005f04:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8005f08:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f0c:	f083 0301 	eor.w	r3, r3, #1
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d006      	beq.n	8005f24 <dcd_event_handler+0x10c>
 8005f16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f18:	653b      	str	r3, [r7, #80]	; 0x50
  qhdl->interrupt_set(false);
 8005f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2000      	movs	r0, #0
 8005f20:	4798      	blx	r3
}
 8005f22:	bf00      	nop
    _osal_q_lock(qhdl);
  }

  bool success = tu_fifo_write(&qhdl->ff, data);
 8005f24:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f26:	3304      	adds	r3, #4
 8005f28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f7fe ff03 	bl	8004d36 <tu_fifo_write>
 8005f30:	4603      	mov	r3, r0
 8005f32:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (!in_isr) {
 8005f36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005f3a:	f083 0301 	eor.w	r3, r3, #1
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d006      	beq.n	8005f52 <dcd_event_handler+0x13a>
 8005f44:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f46:	64bb      	str	r3, [r7, #72]	; 0x48
  qhdl->interrupt_set(true);
 8005f48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2001      	movs	r0, #1
 8005f4e:	4798      	blx	r3
}
 8005f50:	bf00      	nop
    _osal_q_unlock(qhdl);
  }

  TU_ASSERT(success);
 8005f52:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f56:	f083 0301 	eor.w	r3, r3, #1
 8005f5a:	b2db      	uxtb	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00a      	beq.n	8005f76 <dcd_event_handler+0x15e>
 8005f60:	4b67      	ldr	r3, [pc, #412]	; (8006100 <dcd_event_handler+0x2e8>)
 8005f62:	647b      	str	r3, [r7, #68]	; 0x44
 8005f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0301 	and.w	r3, r3, #1
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d000      	beq.n	8005f72 <dcd_event_handler+0x15a>
 8005f70:	be00      	bkpt	0x0000
 8005f72:	2300      	movs	r3, #0
 8005f74:	e001      	b.n	8005f7a <dcd_event_handler+0x162>
  return success;
 8005f76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8005f7e:	4b61      	ldr	r3, [pc, #388]	; (8006104 <dcd_event_handler+0x2ec>)
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d009      	beq.n	8005f98 <dcd_event_handler+0x180>
 8005f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f86:	7818      	ldrb	r0, [r3, #0]
 8005f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f8a:	785b      	ldrb	r3, [r3, #1]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8005f92:	461a      	mov	r2, r3
 8005f94:	f3af 8000 	nop.w
  return ret;
 8005f98:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8005fa0:	e03e      	b.n	8006020 <dcd_event_handler+0x208>
 8005fa2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8005fa6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  usbd_class_driver_t const * driver = NULL;
 8005faa:	2300      	movs	r3, #0
 8005fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ( drvid < _app_driver_count ) {
 8005fae:	4b56      	ldr	r3, [pc, #344]	; (8006108 <dcd_event_handler+0x2f0>)
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d20a      	bcs.n	8005fd0 <dcd_event_handler+0x1b8>
    driver = &_app_driver[drvid];
 8005fba:	4b54      	ldr	r3, [pc, #336]	; (800610c <dcd_event_handler+0x2f4>)
 8005fbc:	6819      	ldr	r1, [r3, #0]
 8005fbe:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	005b      	lsls	r3, r3, #1
 8005fc6:	4413      	add	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	440b      	add	r3, r1
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fce:	e011      	b.n	8005ff4 <dcd_event_handler+0x1dc>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005fd0:	4b4d      	ldr	r3, [pc, #308]	; (8006108 <dcd_event_handler+0x2f0>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d80b      	bhi.n	8005ff4 <dcd_event_handler+0x1dc>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005fdc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8005fe0:	4a49      	ldr	r2, [pc, #292]	; (8006108 <dcd_event_handler+0x2f0>)
 8005fe2:	7812      	ldrb	r2, [r2, #0]
 8005fe4:	1a9a      	subs	r2, r3, r2
 8005fe6:	4613      	mov	r3, r2
 8005fe8:	005b      	lsls	r3, r3, #1
 8005fea:	4413      	add	r3, r2
 8005fec:	00db      	lsls	r3, r3, #3
 8005fee:	4a48      	ldr	r2, [pc, #288]	; (8006110 <dcd_event_handler+0x2f8>)
 8005ff0:	4413      	add	r3, r2
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return driver;
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        usbd_class_driver_t const* driver = get_driver(i);
 8005ff6:	66bb      	str	r3, [r7, #104]	; 0x68
        if (driver && driver->sof) {
 8005ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <dcd_event_handler+0x1fe>
 8005ffe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d007      	beq.n	8006016 <dcd_event_handler+0x1fe>
          driver->sof(event->rhport, event->sof.frame_count);
 8006006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	7810      	ldrb	r0, [r2, #0]
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	6852      	ldr	r2, [r2, #4]
 8006012:	4611      	mov	r1, r2
 8006014:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006016:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800601a:	3301      	adds	r3, #1
 800601c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8006020:	4b39      	ldr	r3, [pc, #228]	; (8006108 <dcd_event_handler+0x2f0>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8006028:	429a      	cmp	r2, r3
 800602a:	d9ba      	bls.n	8005fa2 <dcd_event_handler+0x18a>
        }
      }

      // skip osal queue for SOF in usbd task
      break;
 800602c:	e006      	b.n	800603c <dcd_event_handler+0x224>

    default:
      send = true;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8006034:	e002      	b.n	800603c <dcd_event_handler+0x224>
      break;
 8006036:	bf00      	nop
 8006038:	e000      	b.n	800603c <dcd_event_handler+0x224>
      break;
 800603a:	bf00      	nop
  }

  if (send) {
 800603c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8006040:	2b00      	cmp	r3, #0
 8006042:	d054      	beq.n	80060ee <dcd_event_handler+0x2d6>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	63bb      	str	r3, [r7, #56]	; 0x38
 8006048:	78fb      	ldrb	r3, [r7, #3]
 800604a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  bool ret = osal_queue_send(_usbd_q, event, in_isr);
 800604e:	4b2b      	ldr	r3, [pc, #172]	; (80060fc <dcd_event_handler+0x2e4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	633b      	str	r3, [r7, #48]	; 0x30
 8006054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006056:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006058:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800605c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  if (!in_isr) {
 8006060:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006064:	f083 0301 	eor.w	r3, r3, #1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	2b00      	cmp	r3, #0
 800606c:	d006      	beq.n	800607c <dcd_event_handler+0x264>
 800606e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006070:	627b      	str	r3, [r7, #36]	; 0x24
  qhdl->interrupt_set(false);
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2000      	movs	r0, #0
 8006078:	4798      	blx	r3
}
 800607a:	bf00      	nop
  bool success = tu_fifo_write(&qhdl->ff, data);
 800607c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800607e:	3304      	adds	r3, #4
 8006080:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006082:	4618      	mov	r0, r3
 8006084:	f7fe fe57 	bl	8004d36 <tu_fifo_write>
 8006088:	4603      	mov	r3, r0
 800608a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (!in_isr) {
 800608e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006092:	f083 0301 	eor.w	r3, r3, #1
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d006      	beq.n	80060aa <dcd_event_handler+0x292>
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	61fb      	str	r3, [r7, #28]
  qhdl->interrupt_set(true);
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2001      	movs	r0, #1
 80060a6:	4798      	blx	r3
}
 80060a8:	bf00      	nop
  TU_ASSERT(success);
 80060aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060ae:	f083 0301 	eor.w	r3, r3, #1
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <dcd_event_handler+0x2b6>
 80060b8:	4b11      	ldr	r3, [pc, #68]	; (8006100 <dcd_event_handler+0x2e8>)
 80060ba:	61bb      	str	r3, [r7, #24]
 80060bc:	69bb      	ldr	r3, [r7, #24]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d000      	beq.n	80060ca <dcd_event_handler+0x2b2>
 80060c8:	be00      	bkpt	0x0000
 80060ca:	2300      	movs	r3, #0
 80060cc:	e001      	b.n	80060d2 <dcd_event_handler+0x2ba>
  return success;
 80060ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060d2:	75fb      	strb	r3, [r7, #23]
  if (tud_event_hook_cb) tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 80060d4:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <dcd_event_handler+0x2ec>)
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d009      	beq.n	80060ee <dcd_event_handler+0x2d6>
 80060da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060dc:	7818      	ldrb	r0, [r3, #0]
 80060de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060e0:	785b      	ldrb	r3, [r3, #1]
 80060e2:	4619      	mov	r1, r3
 80060e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80060e8:	461a      	mov	r2, r3
 80060ea:	f3af 8000 	nop.w
    queue_event(event, in_isr);
  }
}
 80060ee:	bf00      	nop
 80060f0:	3770      	adds	r7, #112	; 0x70
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	200013a8 	.word	0x200013a8
 80060fc:	2000149c 	.word	0x2000149c
 8006100:	e000edf0 	.word	0xe000edf0
 8006104:	00000000 	.word	0x00000000
 8006108:	200013d8 	.word	0x200013d8
 800610c:	200013d4 	.word	0x200013d4
 8006110:	08008940 	.word	0x08008940

08006114 <usbd_int_set>:
//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	4603      	mov	r3, r0
 800611c:	71fb      	strb	r3, [r7, #7]
  if (enabled)
 800611e:	79fb      	ldrb	r3, [r7, #7]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d005      	beq.n	8006130 <usbd_int_set+0x1c>
  {
    dcd_int_enable(_usbd_rhport);
 8006124:	4b07      	ldr	r3, [pc, #28]	; (8006144 <usbd_int_set+0x30>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	4618      	mov	r0, r3
 800612a:	f001 f877 	bl	800721c <dcd_int_enable>
  }else
  {
    dcd_int_disable(_usbd_rhport);
  }
}
 800612e:	e004      	b.n	800613a <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8006130:	4b04      	ldr	r3, [pc, #16]	; (8006144 <usbd_int_set+0x30>)
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	4618      	mov	r0, r3
 8006136:	f001 f889 	bl	800724c <dcd_int_disable>
}
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000019 	.word	0x20000019

08006148 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08a      	sub	sp, #40	; 0x28
 800614c:	af00      	add	r7, sp, #0
 800614e:	6039      	str	r1, [r7, #0]
 8006150:	4611      	mov	r1, r2
 8006152:	461a      	mov	r2, r3
 8006154:	4603      	mov	r3, r0
 8006156:	71fb      	strb	r3, [r7, #7]
 8006158:	460b      	mov	r3, r1
 800615a:	71bb      	strb	r3, [r7, #6]
 800615c:	4613      	mov	r3, r2
 800615e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8006160:	2300      	movs	r3, #0
 8006162:	627b      	str	r3, [r7, #36]	; 0x24
 8006164:	e04d      	b.n	8006202 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800616a:	6a3b      	ldr	r3, [r7, #32]
 800616c:	785b      	ldrb	r3, [r3, #1]
 800616e:	2b05      	cmp	r3, #5
 8006170:	d108      	bne.n	8006184 <usbd_open_edpt_pair+0x3c>
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	78db      	ldrb	r3, [r3, #3]
 8006176:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	797b      	ldrb	r3, [r7, #5]
 8006180:	4293      	cmp	r3, r2
 8006182:	d00a      	beq.n	800619a <usbd_open_edpt_pair+0x52>
 8006184:	4b23      	ldr	r3, [pc, #140]	; (8006214 <usbd_open_edpt_pair+0xcc>)
 8006186:	61bb      	str	r3, [r7, #24]
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0301 	and.w	r3, r3, #1
 8006190:	2b00      	cmp	r3, #0
 8006192:	d000      	beq.n	8006196 <usbd_open_edpt_pair+0x4e>
 8006194:	be00      	bkpt	0x0000
 8006196:	2300      	movs	r3, #0
 8006198:	e038      	b.n	800620c <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	6a39      	ldr	r1, [r7, #32]
 800619e:	4618      	mov	r0, r3
 80061a0:	f000 f83a 	bl	8006218 <usbd_edpt_open>
 80061a4:	4603      	mov	r3, r0
 80061a6:	f083 0301 	eor.w	r3, r3, #1
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00a      	beq.n	80061c6 <usbd_open_edpt_pair+0x7e>
 80061b0:	4b18      	ldr	r3, [pc, #96]	; (8006214 <usbd_open_edpt_pair+0xcc>)
 80061b2:	61fb      	str	r3, [r7, #28]
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d000      	beq.n	80061c2 <usbd_open_edpt_pair+0x7a>
 80061c0:	be00      	bkpt	0x0000
 80061c2:	2300      	movs	r3, #0
 80061c4:	e022      	b.n	800620c <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 80061c6:	6a3b      	ldr	r3, [r7, #32]
 80061c8:	789b      	ldrb	r3, [r3, #2]
 80061ca:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
 80061ce:	09db      	lsrs	r3, r3, #7
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d104      	bne.n	80061e0 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	789a      	ldrb	r2, [r3, #2]
 80061da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	e003      	b.n	80061e8 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	789a      	ldrb	r2, [r3, #2]
 80061e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061e6:	701a      	strb	r2, [r3, #0]
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	461a      	mov	r2, r3
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80061fa:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80061fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061fe:	3301      	adds	r3, #1
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
 8006202:	79bb      	ldrb	r3, [r7, #6]
 8006204:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006206:	429a      	cmp	r2, r3
 8006208:	dbad      	blt.n	8006166 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 800620a:	2301      	movs	r3, #1
}
 800620c:	4618      	mov	r0, r3
 800620e:	3728      	adds	r7, #40	; 0x28
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	e000edf0 	.word	0xe000edf0

08006218 <usbd_edpt_open>:
//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const * desc_ep)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b086      	sub	sp, #24
 800621c:	af00      	add	r7, sp, #0
 800621e:	4603      	mov	r3, r0
 8006220:	6039      	str	r1, [r7, #0]
 8006222:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 8006224:	4b1b      	ldr	r3, [pc, #108]	; (8006294 <usbd_edpt_open+0x7c>)
 8006226:	781b      	ldrb	r3, [r3, #0]
 8006228:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	789b      	ldrb	r3, [r3, #2]
 800622e:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006230:	7bfb      	ldrb	r3, [r7, #15]
 8006232:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b05      	cmp	r3, #5
 800623a:	d90a      	bls.n	8006252 <usbd_edpt_open+0x3a>
 800623c:	4b16      	ldr	r3, [pc, #88]	; (8006298 <usbd_edpt_open+0x80>)
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0301 	and.w	r3, r3, #1
 8006248:	2b00      	cmp	r3, #0
 800624a:	d000      	beq.n	800624e <usbd_edpt_open+0x36>
 800624c:	be00      	bkpt	0x0000
 800624e:	2300      	movs	r3, #0
 8006250:	e01c      	b.n	800628c <usbd_edpt_open+0x74>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed));
 8006252:	4b12      	ldr	r3, [pc, #72]	; (800629c <usbd_edpt_open+0x84>)
 8006254:	789b      	ldrb	r3, [r3, #2]
 8006256:	4619      	mov	r1, r3
 8006258:	6838      	ldr	r0, [r7, #0]
 800625a:	f002 f925 	bl	80084a8 <tu_edpt_validate>
 800625e:	4603      	mov	r3, r0
 8006260:	f083 0301 	eor.w	r3, r3, #1
 8006264:	b2db      	uxtb	r3, r3
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <usbd_edpt_open+0x68>
 800626a:	4b0b      	ldr	r3, [pc, #44]	; (8006298 <usbd_edpt_open+0x80>)
 800626c:	617b      	str	r3, [r7, #20]
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d000      	beq.n	800627c <usbd_edpt_open+0x64>
 800627a:	be00      	bkpt	0x0000
 800627c:	2300      	movs	r3, #0
 800627e:	e005      	b.n	800628c <usbd_edpt_open+0x74>

  return dcd_edpt_open(rhport, desc_ep);
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	6839      	ldr	r1, [r7, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f001 f8a5 	bl	80073d4 <dcd_edpt_open>
 800628a:	4603      	mov	r3, r0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3718      	adds	r7, #24
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000019 	.word	0x20000019
 8006298:	e000edf0 	.word	0xe000edf0
 800629c:	200013a8 	.word	0x200013a8

080062a0 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b086      	sub	sp, #24
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	4603      	mov	r3, r0
 80062a8:	460a      	mov	r2, r1
 80062aa:	71fb      	strb	r3, [r7, #7]
 80062ac:	4613      	mov	r3, r2
 80062ae:	71bb      	strb	r3, [r7, #6]
 80062b0:	79bb      	ldrb	r3, [r7, #6]
 80062b2:	73bb      	strb	r3, [r7, #14]
 80062b4:	7bbb      	ldrb	r3, [r7, #14]
 80062b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ba:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum       = tu_edpt_number(ep_addr);
 80062bc:	75fb      	strb	r3, [r7, #23]
 80062be:	79bb      	ldrb	r3, [r7, #6]
 80062c0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80062c2:	7bfb      	ldrb	r3, [r7, #15]
 80062c4:	09db      	lsrs	r3, r3, #7
 80062c6:	b2db      	uxtb	r3, r3
  uint8_t const dir         = tu_edpt_dir(ep_addr);
 80062c8:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80062ca:	7dfa      	ldrb	r2, [r7, #23]
 80062cc:	7dbb      	ldrb	r3, [r7, #22]
 80062ce:	0052      	lsls	r2, r2, #1
 80062d0:	4413      	add	r3, r2
 80062d2:	3318      	adds	r3, #24
 80062d4:	4a06      	ldr	r2, [pc, #24]	; (80062f0 <usbd_edpt_claim+0x50>)
 80062d6:	4413      	add	r3, r2
 80062d8:	3307      	adds	r3, #7
 80062da:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 80062dc:	2100      	movs	r1, #0
 80062de:	6938      	ldr	r0, [r7, #16]
 80062e0:	f002 f8a8 	bl	8008434 <tu_edpt_claim>
 80062e4:	4603      	mov	r3, r0
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3718      	adds	r7, #24
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
 80062ee:	bf00      	nop
 80062f0:	200013a8 	.word	0x200013a8

080062f4 <usbd_edpt_xfer>:

  return tu_edpt_release(ep_state, _usbd_mutex);
}

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t * buffer, uint16_t total_bytes)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	603a      	str	r2, [r7, #0]
 80062fc:	461a      	mov	r2, r3
 80062fe:	4603      	mov	r3, r0
 8006300:	71fb      	strb	r3, [r7, #7]
 8006302:	460b      	mov	r3, r1
 8006304:	71bb      	strb	r3, [r7, #6]
 8006306:	4613      	mov	r3, r2
 8006308:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 800630a:	4b32      	ldr	r3, [pc, #200]	; (80063d4 <usbd_edpt_xfer+0xe0>)
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	71fb      	strb	r3, [r7, #7]
 8006310:	79bb      	ldrb	r3, [r7, #6]
 8006312:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006314:	7abb      	ldrb	r3, [r7, #10]
 8006316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800631a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800631c:	75fb      	strb	r3, [r7, #23]
 800631e:	79bb      	ldrb	r3, [r7, #6]
 8006320:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006322:	7afb      	ldrb	r3, [r7, #11]
 8006324:	09db      	lsrs	r3, r3, #7
 8006326:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006328:	75bb      	strb	r3, [r7, #22]
  // TU_VERIFY(tud_ready());

  TU_LOG_USBD("  Queue EP %02X with %u bytes ...\r\n", ep_addr, total_bytes);

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 800632a:	7dfa      	ldrb	r2, [r7, #23]
 800632c:	7dbb      	ldrb	r3, [r7, #22]
 800632e:	492a      	ldr	r1, [pc, #168]	; (80063d8 <usbd_edpt_xfer+0xe4>)
 8006330:	0052      	lsls	r2, r2, #1
 8006332:	440a      	add	r2, r1
 8006334:	4413      	add	r3, r2
 8006336:	3318      	adds	r3, #24
 8006338:	79db      	ldrb	r3, [r3, #7]
 800633a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d00a      	beq.n	800635a <usbd_edpt_xfer+0x66>
 8006344:	4b25      	ldr	r3, [pc, #148]	; (80063dc <usbd_edpt_xfer+0xe8>)
 8006346:	60fb      	str	r3, [r7, #12]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b00      	cmp	r3, #0
 8006352:	d000      	beq.n	8006356 <usbd_edpt_xfer+0x62>
 8006354:	be00      	bkpt	0x0000
 8006356:	2300      	movs	r3, #0
 8006358:	e038      	b.n	80063cc <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800635a:	7dfa      	ldrb	r2, [r7, #23]
 800635c:	7dbb      	ldrb	r3, [r7, #22]
 800635e:	491e      	ldr	r1, [pc, #120]	; (80063d8 <usbd_edpt_xfer+0xe4>)
 8006360:	0052      	lsls	r2, r2, #1
 8006362:	440a      	add	r2, r1
 8006364:	4413      	add	r3, r2
 8006366:	f103 0218 	add.w	r2, r3, #24
 800636a:	79d3      	ldrb	r3, [r2, #7]
 800636c:	f043 0301 	orr.w	r3, r3, #1
 8006370:	71d3      	strb	r3, [r2, #7]

  if ( dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes) )
 8006372:	88bb      	ldrh	r3, [r7, #4]
 8006374:	79b9      	ldrb	r1, [r7, #6]
 8006376:	79f8      	ldrb	r0, [r7, #7]
 8006378:	683a      	ldr	r2, [r7, #0]
 800637a:	f001 f9a9 	bl	80076d0 <dcd_edpt_xfer>
 800637e:	4603      	mov	r3, r0
 8006380:	2b00      	cmp	r3, #0
 8006382:	d001      	beq.n	8006388 <usbd_edpt_xfer+0x94>
  {
    return true;
 8006384:	2301      	movs	r3, #1
 8006386:	e021      	b.n	80063cc <usbd_edpt_xfer+0xd8>
  }else
  {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006388:	7dfa      	ldrb	r2, [r7, #23]
 800638a:	7dbb      	ldrb	r3, [r7, #22]
 800638c:	4912      	ldr	r1, [pc, #72]	; (80063d8 <usbd_edpt_xfer+0xe4>)
 800638e:	0052      	lsls	r2, r2, #1
 8006390:	440a      	add	r2, r1
 8006392:	4413      	add	r3, r2
 8006394:	f103 0218 	add.w	r2, r3, #24
 8006398:	79d3      	ldrb	r3, [r2, #7]
 800639a:	f36f 0300 	bfc	r3, #0, #1
 800639e:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80063a0:	7dfa      	ldrb	r2, [r7, #23]
 80063a2:	7dbb      	ldrb	r3, [r7, #22]
 80063a4:	490c      	ldr	r1, [pc, #48]	; (80063d8 <usbd_edpt_xfer+0xe4>)
 80063a6:	0052      	lsls	r2, r2, #1
 80063a8:	440a      	add	r2, r1
 80063aa:	4413      	add	r3, r2
 80063ac:	f103 0218 	add.w	r2, r3, #24
 80063b0:	79d3      	ldrb	r3, [r2, #7]
 80063b2:	f36f 0382 	bfc	r3, #2, #1
 80063b6:	71d3      	strb	r3, [r2, #7]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80063b8:	4b08      	ldr	r3, [pc, #32]	; (80063dc <usbd_edpt_xfer+0xe8>)
 80063ba:	613b      	str	r3, [r7, #16]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f003 0301 	and.w	r3, r3, #1
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d000      	beq.n	80063ca <usbd_edpt_xfer+0xd6>
 80063c8:	be00      	bkpt	0x0000
    return false;
 80063ca:	2300      	movs	r3, #0
  }
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	20000019 	.word	0x20000019
 80063d8:	200013a8 	.word	0x200013a8
 80063dc:	e000edf0 	.word	0xe000edf0

080063e0 <usbd_edpt_busy>:
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b085      	sub	sp, #20
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	4603      	mov	r3, r0
 80063e8:	460a      	mov	r2, r1
 80063ea:	71fb      	strb	r3, [r7, #7]
 80063ec:	4613      	mov	r3, r2
 80063ee:	71bb      	strb	r3, [r7, #6]
 80063f0:	79bb      	ldrb	r3, [r7, #6]
 80063f2:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80063f4:	7b3b      	ldrb	r3, [r7, #12]
 80063f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80063fa:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80063fc:	73fb      	strb	r3, [r7, #15]
 80063fe:	79bb      	ldrb	r3, [r7, #6]
 8006400:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006402:	7b7b      	ldrb	r3, [r7, #13]
 8006404:	09db      	lsrs	r3, r3, #7
 8006406:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006408:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 800640a:	7bfa      	ldrb	r2, [r7, #15]
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	490a      	ldr	r1, [pc, #40]	; (8006438 <usbd_edpt_busy+0x58>)
 8006410:	0052      	lsls	r2, r2, #1
 8006412:	440a      	add	r2, r1
 8006414:	4413      	add	r3, r2
 8006416:	3318      	adds	r3, #24
 8006418:	79db      	ldrb	r3, [r3, #7]
 800641a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b00      	cmp	r3, #0
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	200013a8 	.word	0x200013a8

0800643c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	460a      	mov	r2, r1
 8006446:	71fb      	strb	r3, [r7, #7]
 8006448:	4613      	mov	r3, r2
 800644a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 800644c:	4b1f      	ldr	r3, [pc, #124]	; (80064cc <usbd_edpt_stall+0x90>)
 800644e:	781b      	ldrb	r3, [r3, #0]
 8006450:	71fb      	strb	r3, [r7, #7]
 8006452:	79bb      	ldrb	r3, [r7, #6]
 8006454:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006456:	7b3b      	ldrb	r3, [r7, #12]
 8006458:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800645c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800645e:	73fb      	strb	r3, [r7, #15]
 8006460:	79bb      	ldrb	r3, [r7, #6]
 8006462:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8006464:	7b7b      	ldrb	r3, [r7, #13]
 8006466:	09db      	lsrs	r3, r3, #7
 8006468:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 800646a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  if ( !_usbd_dev.ep_status[epnum][dir].stalled )
 800646c:	7bfa      	ldrb	r2, [r7, #15]
 800646e:	7bbb      	ldrb	r3, [r7, #14]
 8006470:	4917      	ldr	r1, [pc, #92]	; (80064d0 <usbd_edpt_stall+0x94>)
 8006472:	0052      	lsls	r2, r2, #1
 8006474:	440a      	add	r2, r1
 8006476:	4413      	add	r3, r2
 8006478:	3318      	adds	r3, #24
 800647a:	79db      	ldrb	r3, [r3, #7]
 800647c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11d      	bne.n	80064c2 <usbd_edpt_stall+0x86>
  {
    TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
    dcd_edpt_stall(rhport, ep_addr);
 8006486:	79ba      	ldrb	r2, [r7, #6]
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	4611      	mov	r1, r2
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fa73 	bl	8007978 <dcd_edpt_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8006492:	7bfa      	ldrb	r2, [r7, #15]
 8006494:	7bbb      	ldrb	r3, [r7, #14]
 8006496:	490e      	ldr	r1, [pc, #56]	; (80064d0 <usbd_edpt_stall+0x94>)
 8006498:	0052      	lsls	r2, r2, #1
 800649a:	440a      	add	r2, r1
 800649c:	4413      	add	r3, r2
 800649e:	f103 0218 	add.w	r2, r3, #24
 80064a2:	79d3      	ldrb	r3, [r2, #7]
 80064a4:	f043 0302 	orr.w	r3, r3, #2
 80064a8:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 1;
 80064aa:	7bfa      	ldrb	r2, [r7, #15]
 80064ac:	7bbb      	ldrb	r3, [r7, #14]
 80064ae:	4908      	ldr	r1, [pc, #32]	; (80064d0 <usbd_edpt_stall+0x94>)
 80064b0:	0052      	lsls	r2, r2, #1
 80064b2:	440a      	add	r2, r1
 80064b4:	4413      	add	r3, r2
 80064b6:	f103 0218 	add.w	r2, r3, #24
 80064ba:	79d3      	ldrb	r3, [r2, #7]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	71d3      	strb	r3, [r2, #7]
  }
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	20000019 	.word	0x20000019
 80064d0:	200013a8 	.word	0x200013a8

080064d4 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b084      	sub	sp, #16
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	460a      	mov	r2, r1
 80064de:	71fb      	strb	r3, [r7, #7]
 80064e0:	4613      	mov	r3, r2
 80064e2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80064e4:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <usbd_edpt_clear_stall+0x90>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	71fb      	strb	r3, [r7, #7]
 80064ea:	79bb      	ldrb	r3, [r7, #6]
 80064ec:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80064ee:	7b3b      	ldrb	r3, [r7, #12]
 80064f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064f4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80064f6:	73fb      	strb	r3, [r7, #15]
 80064f8:	79bb      	ldrb	r3, [r7, #6]
 80064fa:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80064fc:	7b7b      	ldrb	r3, [r7, #13]
 80064fe:	09db      	lsrs	r3, r3, #7
 8006500:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006502:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  if ( _usbd_dev.ep_status[epnum][dir].stalled )
 8006504:	7bfa      	ldrb	r2, [r7, #15]
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	4917      	ldr	r1, [pc, #92]	; (8006568 <usbd_edpt_clear_stall+0x94>)
 800650a:	0052      	lsls	r2, r2, #1
 800650c:	440a      	add	r2, r1
 800650e:	4413      	add	r3, r2
 8006510:	3318      	adds	r3, #24
 8006512:	79db      	ldrb	r3, [r3, #7]
 8006514:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d01d      	beq.n	800655a <usbd_edpt_clear_stall+0x86>
  {
    TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
    dcd_edpt_clear_stall(rhport, ep_addr);
 800651e:	79ba      	ldrb	r2, [r7, #6]
 8006520:	79fb      	ldrb	r3, [r7, #7]
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f001 fa39 	bl	800799c <dcd_edpt_clear_stall>
    _usbd_dev.ep_status[epnum][dir].stalled = 0;
 800652a:	7bfa      	ldrb	r2, [r7, #15]
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	490e      	ldr	r1, [pc, #56]	; (8006568 <usbd_edpt_clear_stall+0x94>)
 8006530:	0052      	lsls	r2, r2, #1
 8006532:	440a      	add	r2, r1
 8006534:	4413      	add	r3, r2
 8006536:	f103 0218 	add.w	r2, r3, #24
 800653a:	79d3      	ldrb	r3, [r2, #7]
 800653c:	f36f 0341 	bfc	r3, #1, #1
 8006540:	71d3      	strb	r3, [r2, #7]
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8006542:	7bfa      	ldrb	r2, [r7, #15]
 8006544:	7bbb      	ldrb	r3, [r7, #14]
 8006546:	4908      	ldr	r1, [pc, #32]	; (8006568 <usbd_edpt_clear_stall+0x94>)
 8006548:	0052      	lsls	r2, r2, #1
 800654a:	440a      	add	r2, r1
 800654c:	4413      	add	r3, r2
 800654e:	f103 0218 	add.w	r2, r3, #24
 8006552:	79d3      	ldrb	r3, [r2, #7]
 8006554:	f36f 0300 	bfc	r3, #0, #1
 8006558:	71d3      	strb	r3, [r2, #7]
  }
}
 800655a:	bf00      	nop
 800655c:	3710      	adds	r7, #16
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000019 	.word	0x20000019
 8006568:	200013a8 	.word	0x200013a8

0800656c <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr)
{
 800656c:	b480      	push	{r7}
 800656e:	b085      	sub	sp, #20
 8006570:	af00      	add	r7, sp, #0
 8006572:	4603      	mov	r3, r0
 8006574:	460a      	mov	r2, r1
 8006576:	71fb      	strb	r3, [r7, #7]
 8006578:	4613      	mov	r3, r2
 800657a:	71bb      	strb	r3, [r7, #6]
 800657c:	79bb      	ldrb	r3, [r7, #6]
 800657e:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8006580:	7b3b      	ldrb	r3, [r7, #12]
 8006582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006586:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8006588:	73fb      	strb	r3, [r7, #15]
 800658a:	79bb      	ldrb	r3, [r7, #6]
 800658c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800658e:	7b7b      	ldrb	r3, [r7, #13]
 8006590:	09db      	lsrs	r3, r3, #7
 8006592:	b2db      	uxtb	r3, r3
  uint8_t const dir   = tu_edpt_dir(ep_addr);
 8006594:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8006596:	7bfa      	ldrb	r2, [r7, #15]
 8006598:	7bbb      	ldrb	r3, [r7, #14]
 800659a:	490a      	ldr	r1, [pc, #40]	; (80065c4 <usbd_edpt_stalled+0x58>)
 800659c:	0052      	lsls	r2, r2, #1
 800659e:	440a      	add	r2, r1
 80065a0:	4413      	add	r3, r2
 80065a2:	3318      	adds	r3, #24
 80065a4:	79db      	ldrb	r3, [r3, #7]
 80065a6:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80065aa:	b2db      	uxtb	r3, r3
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	bf14      	ite	ne
 80065b0:	2301      	movne	r3, #1
 80065b2:	2300      	moveq	r3, #0
 80065b4:	b2db      	uxtb	r3, r3
}
 80065b6:	4618      	mov	r0, r3
 80065b8:	3714      	adds	r7, #20
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	200013a8 	.word	0x200013a8

080065c8 <_status_stage_xact>:
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool _status_stage_xact(uint8_t rhport, tusb_control_request_t const * request)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b084      	sub	sp, #16
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	4603      	mov	r3, r0
 80065d0:	6039      	str	r1, [r7, #0]
 80065d2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  uint8_t const ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	781b      	ldrb	r3, [r3, #0]
 80065d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <_status_stage_xact+0x1e>
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <_status_stage_xact+0x20>
 80065e6:	2380      	movs	r3, #128	; 0x80
 80065e8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80065ea:	7bf9      	ldrb	r1, [r7, #15]
 80065ec:	79f8      	ldrb	r0, [r7, #7]
 80065ee:	2300      	movs	r3, #0
 80065f0:	2200      	movs	r2, #0
 80065f2:	f7ff fe7f 	bl	80062f4 <usbd_edpt_xfer>
 80065f6:	4603      	mov	r3, r0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	3710      	adds	r7, #16
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, tusb_control_request_t const * request)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	4603      	mov	r3, r0
 8006608:	6039      	str	r1, [r7, #0]
 800660a:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request       = (*request);
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <tud_control_status+0x3c>)
 800660e:	683a      	ldr	r2, [r7, #0]
 8006610:	6810      	ldr	r0, [r2, #0]
 8006612:	6851      	ldr	r1, [r2, #4]
 8006614:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 8006616:	4b09      	ldr	r3, [pc, #36]	; (800663c <tud_control_status+0x3c>)
 8006618:	2200      	movs	r2, #0
 800661a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 800661c:	4b07      	ldr	r3, [pc, #28]	; (800663c <tud_control_status+0x3c>)
 800661e:	2200      	movs	r2, #0
 8006620:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 8006622:	4b06      	ldr	r3, [pc, #24]	; (800663c <tud_control_status+0x3c>)
 8006624:	2200      	movs	r2, #0
 8006626:	819a      	strh	r2, [r3, #12]

  return _status_stage_xact(rhport, request);
 8006628:	79fb      	ldrb	r3, [r7, #7]
 800662a:	6839      	ldr	r1, [r7, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7ff ffcb 	bl	80065c8 <_status_stage_xact>
 8006632:	4603      	mov	r3, r0
}
 8006634:	4618      	mov	r0, r3
 8006636:	3708      	adds	r7, #8
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}
 800663c:	200014a0 	.word	0x200014a0

08006640 <_data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool _data_stage_xact(uint8_t rhport)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b088      	sub	sp, #32
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	71fb      	strb	r3, [r7, #7]
  uint16_t const xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 800664a:	4b24      	ldr	r3, [pc, #144]	; (80066dc <_data_stage_xact+0x9c>)
 800664c:	899a      	ldrh	r2, [r3, #12]
 800664e:	4b23      	ldr	r3, [pc, #140]	; (80066dc <_data_stage_xact+0x9c>)
 8006650:	89db      	ldrh	r3, [r3, #14]
 8006652:	1ad3      	subs	r3, r2, r3
 8006654:	b29b      	uxth	r3, r3
 8006656:	837b      	strh	r3, [r7, #26]
 8006658:	2340      	movs	r3, #64	; 0x40
 800665a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800665c:	8b7a      	ldrh	r2, [r7, #26]
 800665e:	8b3b      	ldrh	r3, [r7, #24]
 8006660:	4293      	cmp	r3, r2
 8006662:	bf28      	it	cs
 8006664:	4613      	movcs	r3, r2
 8006666:	b29b      	uxth	r3, r3
 8006668:	83bb      	strh	r3, [r7, #28]

  uint8_t ep_addr = EDPT_CTRL_OUT;
 800666a:	2300      	movs	r3, #0
 800666c:	77fb      	strb	r3, [r7, #31]

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN )
 800666e:	4b1b      	ldr	r3, [pc, #108]	; (80066dc <_data_stage_xact+0x9c>)
 8006670:	781b      	ldrb	r3, [r3, #0]
 8006672:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006676:	b2db      	uxtb	r3, r3
 8006678:	2b00      	cmp	r3, #0
 800667a:	d01e      	beq.n	80066ba <_data_stage_xact+0x7a>
  {
    ep_addr = EDPT_CTRL_IN;
 800667c:	2380      	movs	r3, #128	; 0x80
 800667e:	77fb      	strb	r3, [r7, #31]
    if ( xact_len ) {
 8006680:	8bbb      	ldrh	r3, [r7, #28]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d019      	beq.n	80066ba <_data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_usbd_ctrl_buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <_data_stage_xact+0x9c>)
 8006688:	689a      	ldr	r2, [r3, #8]
 800668a:	8bbb      	ldrh	r3, [r7, #28]
 800668c:	4914      	ldr	r1, [pc, #80]	; (80066e0 <_data_stage_xact+0xa0>)
 800668e:	6179      	str	r1, [r7, #20]
 8006690:	2140      	movs	r1, #64	; 0x40
 8006692:	6139      	str	r1, [r7, #16]
 8006694:	60fa      	str	r2, [r7, #12]
 8006696:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8006698:	693a      	ldr	r2, [r7, #16]
 800669a:	68bb      	ldr	r3, [r7, #8]
 800669c:	429a      	cmp	r2, r3
 800669e:	d202      	bcs.n	80066a6 <_data_stage_xact+0x66>
    return -1;
 80066a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80066a4:	e005      	b.n	80066b2 <_data_stage_xact+0x72>
  memcpy(dest, src, count);
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	68f9      	ldr	r1, [r7, #12]
 80066aa:	6978      	ldr	r0, [r7, #20]
 80066ac:	f001 ffea 	bl	8008684 <memcpy>
  return 0;
 80066b0:	2300      	movs	r3, #0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d001      	beq.n	80066ba <_data_stage_xact+0x7a>
 80066b6:	2300      	movs	r3, #0
 80066b8:	e00b      	b.n	80066d2 <_data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _usbd_ctrl_buf : NULL, xact_len);
 80066ba:	8bbb      	ldrh	r3, [r7, #28]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <_data_stage_xact+0x84>
 80066c0:	4a07      	ldr	r2, [pc, #28]	; (80066e0 <_data_stage_xact+0xa0>)
 80066c2:	e000      	b.n	80066c6 <_data_stage_xact+0x86>
 80066c4:	2200      	movs	r2, #0
 80066c6:	8bbb      	ldrh	r3, [r7, #28]
 80066c8:	7ff9      	ldrb	r1, [r7, #31]
 80066ca:	79f8      	ldrb	r0, [r7, #7]
 80066cc:	f7ff fe12 	bl	80062f4 <usbd_edpt_xfer>
 80066d0:	4603      	mov	r3, r0
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3720      	adds	r7, #32
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	200014a0 	.word	0x200014a0
 80066e0:	200014b4 	.word	0x200014b4

080066e4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, tusb_control_request_t const * request, void* buffer, uint16_t len)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60b9      	str	r1, [r7, #8]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	461a      	mov	r2, r3
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]
 80066f4:	4613      	mov	r3, r2
 80066f6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request       = (*request);
 80066f8:	4b30      	ldr	r3, [pc, #192]	; (80067bc <tud_control_xfer+0xd8>)
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	6810      	ldr	r0, [r2, #0]
 80066fe:	6851      	ldr	r1, [r2, #4]
 8006700:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = (uint8_t*) buffer;
 8006702:	4a2e      	ldr	r2, [pc, #184]	; (80067bc <tud_control_xfer+0xd8>)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8006708:	4b2c      	ldr	r3, [pc, #176]	; (80067bc <tud_control_xfer+0xd8>)
 800670a:	2200      	movs	r2, #0
 800670c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = tu_min16(len, request->wLength);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	88db      	ldrh	r3, [r3, #6]
 8006712:	b29a      	uxth	r2, r3
 8006714:	89bb      	ldrh	r3, [r7, #12]
 8006716:	827b      	strh	r3, [r7, #18]
 8006718:	4613      	mov	r3, r2
 800671a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800671c:	8a7a      	ldrh	r2, [r7, #18]
 800671e:	8a3b      	ldrh	r3, [r7, #16]
 8006720:	4293      	cmp	r3, r2
 8006722:	bf28      	it	cs
 8006724:	4613      	movcs	r3, r2
 8006726:	b29a      	uxth	r2, r3
 8006728:	4b24      	ldr	r3, [pc, #144]	; (80067bc <tud_control_xfer+0xd8>)
 800672a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U)
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	88db      	ldrh	r3, [r3, #6]
 8006730:	b29b      	uxth	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d026      	beq.n	8006784 <tud_control_xfer+0xa0>
  {
    if(_ctrl_xfer.data_len > 0U)
 8006736:	4b21      	ldr	r3, [pc, #132]	; (80067bc <tud_control_xfer+0xd8>)
 8006738:	899b      	ldrh	r3, [r3, #12]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00d      	beq.n	800675a <tud_control_xfer+0x76>
    {
      TU_ASSERT(buffer);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d10a      	bne.n	800675a <tud_control_xfer+0x76>
 8006744:	4b1e      	ldr	r3, [pc, #120]	; (80067c0 <tud_control_xfer+0xdc>)
 8006746:	61bb      	str	r3, [r7, #24]
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b00      	cmp	r3, #0
 8006752:	d000      	beq.n	8006756 <tud_control_xfer+0x72>
 8006754:	be00      	bkpt	0x0000
 8006756:	2300      	movs	r3, #0
 8006758:	e02b      	b.n	80067b2 <tud_control_xfer+0xce>
    }

//    TU_LOG2("  Control total data length is %u bytes\r\n", _ctrl_xfer.data_len);

    // Data stage
    TU_ASSERT( _data_stage_xact(rhport) );
 800675a:	7bfb      	ldrb	r3, [r7, #15]
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff ff6f 	bl	8006640 <_data_stage_xact>
 8006762:	4603      	mov	r3, r0
 8006764:	f083 0301 	eor.w	r3, r3, #1
 8006768:	b2db      	uxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d020      	beq.n	80067b0 <tud_control_xfer+0xcc>
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <tud_control_xfer+0xdc>)
 8006770:	617b      	str	r3, [r7, #20]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d000      	beq.n	8006780 <tud_control_xfer+0x9c>
 800677e:	be00      	bkpt	0x0000
 8006780:	2300      	movs	r3, #0
 8006782:	e016      	b.n	80067b2 <tud_control_xfer+0xce>
  }
  else
  {
    // Status stage
    TU_ASSERT( _status_stage_xact(rhport, request) );
 8006784:	7bfb      	ldrb	r3, [r7, #15]
 8006786:	68b9      	ldr	r1, [r7, #8]
 8006788:	4618      	mov	r0, r3
 800678a:	f7ff ff1d 	bl	80065c8 <_status_stage_xact>
 800678e:	4603      	mov	r3, r0
 8006790:	f083 0301 	eor.w	r3, r3, #1
 8006794:	b2db      	uxtb	r3, r3
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <tud_control_xfer+0xcc>
 800679a:	4b09      	ldr	r3, [pc, #36]	; (80067c0 <tud_control_xfer+0xdc>)
 800679c:	61fb      	str	r3, [r7, #28]
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d000      	beq.n	80067ac <tud_control_xfer+0xc8>
 80067aa:	be00      	bkpt	0x0000
 80067ac:	2300      	movs	r3, #0
 80067ae:	e000      	b.n	80067b2 <tud_control_xfer+0xce>
  }

  return true;
 80067b0:	2301      	movs	r3, #1
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3720      	adds	r7, #32
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200014a0 	.word	0x200014a0
 80067c0:	e000edf0 	.word	0xe000edf0

080067c4 <usbd_control_reset>:
void usbd_control_set_request(tusb_control_request_t const *request);
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp );
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t event, uint32_t xferred_bytes);

void usbd_control_reset(void)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80067c8:	2214      	movs	r2, #20
 80067ca:	2100      	movs	r1, #0
 80067cc:	4802      	ldr	r0, [pc, #8]	; (80067d8 <usbd_control_reset+0x14>)
 80067ce:	f001 ff2c 	bl	800862a <memset>
}
 80067d2:	bf00      	nop
 80067d4:	bd80      	pop	{r7, pc}
 80067d6:	bf00      	nop
 80067d8:	200014a0 	.word	0x200014a0

080067dc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback( usbd_control_xfer_cb_t fp )
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80067e4:	4a04      	ldr	r2, [pc, #16]	; (80067f8 <usbd_control_set_complete_callback+0x1c>)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6113      	str	r3, [r2, #16]
}
 80067ea:	bf00      	nop
 80067ec:	370c      	adds	r7, #12
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	200014a0 	.word	0x200014a0

080067fc <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(tusb_control_request_t const *request)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request       = (*request);
 8006804:	4b09      	ldr	r3, [pc, #36]	; (800682c <usbd_control_set_request+0x30>)
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	6810      	ldr	r0, [r2, #0]
 800680a:	6851      	ldr	r1, [r2, #4]
 800680c:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer        = NULL;
 800680e:	4b07      	ldr	r3, [pc, #28]	; (800682c <usbd_control_set_request+0x30>)
 8006810:	2200      	movs	r2, #0
 8006812:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8006814:	4b05      	ldr	r3, [pc, #20]	; (800682c <usbd_control_set_request+0x30>)
 8006816:	2200      	movs	r2, #0
 8006818:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len      = 0;
 800681a:	4b04      	ldr	r3, [pc, #16]	; (800682c <usbd_control_set_request+0x30>)
 800681c:	2200      	movs	r2, #0
 800681e:	819a      	strh	r2, [r3, #12]
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr
 800682c:	200014a0 	.word	0x200014a0

08006830 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb (uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b088      	sub	sp, #32
 8006834:	af00      	add	r7, sp, #0
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4603      	mov	r3, r0
 800683a:	71fb      	strb	r3, [r7, #7]
 800683c:	460b      	mov	r3, r1
 800683e:	71bb      	strb	r3, [r7, #6]
 8006840:	4613      	mov	r3, r2
 8006842:	717b      	strb	r3, [r7, #5]
 8006844:	79bb      	ldrb	r3, [r7, #6]
 8006846:	73fb      	strb	r3, [r7, #15]
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	09db      	lsrs	r3, r3, #7
 800684c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if ( tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction )
 800684e:	4a50      	ldr	r2, [pc, #320]	; (8006990 <usbd_control_xfer_cb+0x160>)
 8006850:	7812      	ldrb	r2, [r2, #0]
 8006852:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8006856:	b2d2      	uxtb	r2, r2
 8006858:	4293      	cmp	r3, r2
 800685a:	d021      	beq.n	80068a0 <usbd_control_xfer_cb+0x70>
  {
    TU_ASSERT(0 == xferred_bytes);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d00a      	beq.n	8006878 <usbd_control_xfer_cb+0x48>
 8006862:	4b4c      	ldr	r3, [pc, #304]	; (8006994 <usbd_control_xfer_cb+0x164>)
 8006864:	613b      	str	r3, [r7, #16]
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0301 	and.w	r3, r3, #1
 800686e:	2b00      	cmp	r3, #0
 8006870:	d000      	beq.n	8006874 <usbd_control_xfer_cb+0x44>
 8006872:	be00      	bkpt	0x0000
 8006874:	2300      	movs	r3, #0
 8006876:	e087      	b.n	8006988 <usbd_control_xfer_cb+0x158>

    // invoke optional dcd hook if available
    if (dcd_edpt0_status_complete) dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8006878:	4b47      	ldr	r3, [pc, #284]	; (8006998 <usbd_control_xfer_cb+0x168>)
 800687a:	2b00      	cmp	r3, #0
 800687c:	d004      	beq.n	8006888 <usbd_control_xfer_cb+0x58>
 800687e:	79fb      	ldrb	r3, [r7, #7]
 8006880:	4943      	ldr	r1, [pc, #268]	; (8006990 <usbd_control_xfer_cb+0x160>)
 8006882:	4618      	mov	r0, r3
 8006884:	f3af 8000 	nop.w

    if (_ctrl_xfer.complete_cb)
 8006888:	4b41      	ldr	r3, [pc, #260]	; (8006990 <usbd_control_xfer_cb+0x160>)
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <usbd_control_xfer_cb+0x6c>
    {
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8006890:	4b3f      	ldr	r3, [pc, #252]	; (8006990 <usbd_control_xfer_cb+0x160>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	79f8      	ldrb	r0, [r7, #7]
 8006896:	4a3e      	ldr	r2, [pc, #248]	; (8006990 <usbd_control_xfer_cb+0x160>)
 8006898:	2103      	movs	r1, #3
 800689a:	4798      	blx	r3
    }

    return true;
 800689c:	2301      	movs	r3, #1
 800689e:	e073      	b.n	8006988 <usbd_control_xfer_cb+0x158>
  }

  if ( _ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT )
 80068a0:	4b3b      	ldr	r3, [pc, #236]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d10c      	bne.n	80068c8 <usbd_control_xfer_cb+0x98>
  {
    TU_VERIFY(_ctrl_xfer.buffer);
 80068ae:	4b38      	ldr	r3, [pc, #224]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d101      	bne.n	80068ba <usbd_control_xfer_cb+0x8a>
 80068b6:	2300      	movs	r3, #0
 80068b8:	e066      	b.n	8006988 <usbd_control_xfer_cb+0x158>
    memcpy(_ctrl_xfer.buffer, _usbd_ctrl_buf, xferred_bytes);
 80068ba:	4b35      	ldr	r3, [pc, #212]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	683a      	ldr	r2, [r7, #0]
 80068c0:	4936      	ldr	r1, [pc, #216]	; (800699c <usbd_control_xfer_cb+0x16c>)
 80068c2:	4618      	mov	r0, r3
 80068c4:	f001 fede 	bl	8008684 <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _usbd_ctrl_buf, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80068c8:	4b31      	ldr	r3, [pc, #196]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068ca:	89da      	ldrh	r2, [r3, #14]
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	4413      	add	r3, r2
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068d6:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 80068d8:	4b2d      	ldr	r3, [pc, #180]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068da:	689a      	ldr	r2, [r3, #8]
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	4413      	add	r3, r2
 80068e0:	4a2b      	ldr	r2, [pc, #172]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068e2:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ( (_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) || (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE) )
 80068e4:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068e6:	88da      	ldrh	r2, [r3, #6]
 80068e8:	4b29      	ldr	r3, [pc, #164]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068ea:	89db      	ldrh	r3, [r3, #14]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d002      	beq.n	80068f6 <usbd_control_xfer_cb+0xc6>
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	2b3f      	cmp	r3, #63	; 0x3f
 80068f4:	d831      	bhi.n	800695a <usbd_control_xfer_cb+0x12a>
  {
    // DATA stage is complete
    bool is_ok = true;
 80068f6:	2301      	movs	r3, #1
 80068f8:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if ( _ctrl_xfer.complete_cb )
 80068fa:	4b25      	ldr	r3, [pc, #148]	; (8006990 <usbd_control_xfer_cb+0x160>)
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d007      	beq.n	8006912 <usbd_control_xfer_cb+0xe2>
    {
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 8006902:	4b23      	ldr	r3, [pc, #140]	; (8006990 <usbd_control_xfer_cb+0x160>)
 8006904:	691b      	ldr	r3, [r3, #16]
 8006906:	79f8      	ldrb	r0, [r7, #7]
 8006908:	4a21      	ldr	r2, [pc, #132]	; (8006990 <usbd_control_xfer_cb+0x160>)
 800690a:	2102      	movs	r1, #2
 800690c:	4798      	blx	r3
 800690e:	4603      	mov	r3, r0
 8006910:	77fb      	strb	r3, [r7, #31]
    }

    if ( is_ok )
 8006912:	7ffb      	ldrb	r3, [r7, #31]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d015      	beq.n	8006944 <usbd_control_xfer_cb+0x114>
    {
      // Send status
      TU_ASSERT( _status_stage_xact(rhport, &_ctrl_xfer.request) );
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	491d      	ldr	r1, [pc, #116]	; (8006990 <usbd_control_xfer_cb+0x160>)
 800691c:	4618      	mov	r0, r3
 800691e:	f7ff fe53 	bl	80065c8 <_status_stage_xact>
 8006922:	4603      	mov	r3, r0
 8006924:	f083 0301 	eor.w	r3, r3, #1
 8006928:	b2db      	uxtb	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	d02a      	beq.n	8006984 <usbd_control_xfer_cb+0x154>
 800692e:	4b19      	ldr	r3, [pc, #100]	; (8006994 <usbd_control_xfer_cb+0x164>)
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d000      	beq.n	8006940 <usbd_control_xfer_cb+0x110>
 800693e:	be00      	bkpt	0x0000
 8006940:	2300      	movs	r3, #0
 8006942:	e021      	b.n	8006988 <usbd_control_xfer_cb+0x158>
    }else
    {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8006944:	79fb      	ldrb	r3, [r7, #7]
 8006946:	2100      	movs	r1, #0
 8006948:	4618      	mov	r0, r3
 800694a:	f001 f815 	bl	8007978 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	2180      	movs	r1, #128	; 0x80
 8006952:	4618      	mov	r0, r3
 8006954:	f001 f810 	bl	8007978 <dcd_edpt_stall>
  {
 8006958:	e014      	b.n	8006984 <usbd_control_xfer_cb+0x154>
    }
  }
  else
  {
    // More data to transfer
    TU_ASSERT( _data_stage_xact(rhport) );
 800695a:	79fb      	ldrb	r3, [r7, #7]
 800695c:	4618      	mov	r0, r3
 800695e:	f7ff fe6f 	bl	8006640 <_data_stage_xact>
 8006962:	4603      	mov	r3, r0
 8006964:	f083 0301 	eor.w	r3, r3, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d00b      	beq.n	8006986 <usbd_control_xfer_cb+0x156>
 800696e:	4b09      	ldr	r3, [pc, #36]	; (8006994 <usbd_control_xfer_cb+0x164>)
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	69bb      	ldr	r3, [r7, #24]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f003 0301 	and.w	r3, r3, #1
 800697a:	2b00      	cmp	r3, #0
 800697c:	d000      	beq.n	8006980 <usbd_control_xfer_cb+0x150>
 800697e:	be00      	bkpt	0x0000
 8006980:	2300      	movs	r3, #0
 8006982:	e001      	b.n	8006988 <usbd_control_xfer_cb+0x158>
  {
 8006984:	bf00      	nop
  }

  return true;
 8006986:	2301      	movs	r3, #1
}
 8006988:	4618      	mov	r0, r3
 800698a:	3720      	adds	r7, #32
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	200014a0 	.word	0x200014a0
 8006994:	e000edf0 	.word	0xe000edf0
 8006998:	00000000 	.word	0x00000000
 800699c:	200014b4 	.word	0x200014b4

080069a0 <__NVIC_EnableIRQ>:
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	db0b      	blt.n	80069ca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069b2:	79fb      	ldrb	r3, [r7, #7]
 80069b4:	f003 021f 	and.w	r2, r3, #31
 80069b8:	4907      	ldr	r1, [pc, #28]	; (80069d8 <__NVIC_EnableIRQ+0x38>)
 80069ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069be:	095b      	lsrs	r3, r3, #5
 80069c0:	2001      	movs	r0, #1
 80069c2:	fa00 f202 	lsl.w	r2, r0, r2
 80069c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80069ca:	bf00      	nop
 80069cc:	370c      	adds	r7, #12
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	e000e100 	.word	0xe000e100

080069dc <__NVIC_DisableIRQ>:
{
 80069dc:	b480      	push	{r7}
 80069de:	b083      	sub	sp, #12
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	4603      	mov	r3, r0
 80069e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80069e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	db12      	blt.n	8006a14 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ee:	79fb      	ldrb	r3, [r7, #7]
 80069f0:	f003 021f 	and.w	r2, r3, #31
 80069f4:	490a      	ldr	r1, [pc, #40]	; (8006a20 <__NVIC_DisableIRQ+0x44>)
 80069f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069fa:	095b      	lsrs	r3, r3, #5
 80069fc:	2001      	movs	r0, #1
 80069fe:	fa00 f202 	lsl.w	r2, r0, r2
 8006a02:	3320      	adds	r3, #32
 8006a04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006a08:	f3bf 8f4f 	dsb	sy
}
 8006a0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006a0e:	f3bf 8f6f 	isb	sy
}
 8006a12:	bf00      	nop
}
 8006a14:	bf00      	nop
 8006a16:	370c      	adds	r7, #12
 8006a18:	46bd      	mov	sp, r7
 8006a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1e:	4770      	bx	lr
 8006a20:	e000e100 	.word	0xe000e100

08006a24 <dwc2_phy_init>:
}

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8006a24:	b480      	push	{r7}
 8006a26:	b083      	sub	sp, #12
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 8006a30:	78fb      	ldrb	r3, [r7, #3]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d106      	bne.n	8006a44 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	639a      	str	r2, [r3, #56]	; 0x38
      #else

      #endif
    }
  }
}
 8006a42:	e005      	b.n	8006a50 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006a50:	bf00      	nop
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	460b      	mov	r3, r1
 8006a66:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == HS_PHY_TYPE_NONE) {
 8006a68:	78fb      	ldrb	r3, [r7, #3]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d152      	bne.n	8006b14 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 8006a6e:	4b2c      	ldr	r3, [pc, #176]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	4a2c      	ldr	r2, [pc, #176]	; (8006b24 <dwc2_phy_update+0xc8>)
 8006a74:	4293      	cmp	r3, r2
 8006a76:	d302      	bcc.n	8006a7e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8006a78:	2306      	movs	r3, #6
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	e041      	b.n	8006b02 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 8006a7e:	4b28      	ldr	r3, [pc, #160]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a29      	ldr	r2, [pc, #164]	; (8006b28 <dwc2_phy_update+0xcc>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d902      	bls.n	8006a8e <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 8006a88:	2307      	movs	r3, #7
 8006a8a:	60fb      	str	r3, [r7, #12]
 8006a8c:	e039      	b.n	8006b02 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 8006a8e:	4b24      	ldr	r3, [pc, #144]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a26      	ldr	r2, [pc, #152]	; (8006b2c <dwc2_phy_update+0xd0>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d302      	bcc.n	8006a9e <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 8006a98:	2308      	movs	r3, #8
 8006a9a:	60fb      	str	r3, [r7, #12]
 8006a9c:	e031      	b.n	8006b02 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 8006a9e:	4b20      	ldr	r3, [pc, #128]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a23      	ldr	r2, [pc, #140]	; (8006b30 <dwc2_phy_update+0xd4>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d902      	bls.n	8006aae <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 8006aa8:	2309      	movs	r3, #9
 8006aaa:	60fb      	str	r3, [r7, #12]
 8006aac:	e029      	b.n	8006b02 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 8006aae:	4b1c      	ldr	r3, [pc, #112]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a20      	ldr	r2, [pc, #128]	; (8006b34 <dwc2_phy_update+0xd8>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d902      	bls.n	8006abe <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 8006ab8:	230a      	movs	r3, #10
 8006aba:	60fb      	str	r3, [r7, #12]
 8006abc:	e021      	b.n	8006b02 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 8006abe:	4b18      	ldr	r3, [pc, #96]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a1d      	ldr	r2, [pc, #116]	; (8006b38 <dwc2_phy_update+0xdc>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d902      	bls.n	8006ace <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 8006ac8:	230b      	movs	r3, #11
 8006aca:	60fb      	str	r3, [r7, #12]
 8006acc:	e019      	b.n	8006b02 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 8006ace:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a1a      	ldr	r2, [pc, #104]	; (8006b3c <dwc2_phy_update+0xe0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d302      	bcc.n	8006ade <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 8006ad8:	230c      	movs	r3, #12
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e011      	b.n	8006b02 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 8006ade:	4b10      	ldr	r3, [pc, #64]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4a17      	ldr	r2, [pc, #92]	; (8006b40 <dwc2_phy_update+0xe4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d302      	bcc.n	8006aee <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8006ae8:	230d      	movs	r3, #13
 8006aea:	60fb      	str	r3, [r7, #12]
 8006aec:	e009      	b.n	8006b02 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 8006aee:	4b0c      	ldr	r3, [pc, #48]	; (8006b20 <dwc2_phy_update+0xc4>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a14      	ldr	r2, [pc, #80]	; (8006b44 <dwc2_phy_update+0xe8>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d302      	bcc.n	8006afe <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8006af8:	230e      	movs	r3, #14
 8006afa:	60fb      	str	r3, [r7, #12]
 8006afc:	e001      	b.n	8006b02 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 8006afe:	230f      	movs	r3, #15
 8006b00:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	029b      	lsls	r3, r3, #10
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	60da      	str	r2, [r3, #12]
  }
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	20000000 	.word	0x20000000
 8006b24:	01e84800 	.word	0x01e84800
 8006b28:	01a39ddf 	.word	0x01a39ddf
 8006b2c:	016e3600 	.word	0x016e3600
 8006b30:	014ca43f 	.word	0x014ca43f
 8006b34:	01312cff 	.word	0x01312cff
 8006b38:	011a499f 	.word	0x011a499f
 8006b3c:	01067380 	.word	0x01067380
 8006b40:	00f42400 	.word	0x00f42400
 8006b44:	00e4e1c0 	.word	0x00e4e1c0

08006b48 <calc_grxfsiz>:

// SOF enabling flag - required for SOF to not get disabled in ISR when SOF was enabled by
static bool _sof_en;

// Calculate the RX FIFO size according to recommendations from reference manual
static inline uint16_t calc_grxfsiz(uint16_t max_ep_size, uint8_t ep_count) {
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	460a      	mov	r2, r1
 8006b52:	80fb      	strh	r3, [r7, #6]
 8006b54:	4613      	mov	r3, r2
 8006b56:	717b      	strb	r3, [r7, #5]
  return 15 + 2 * (max_ep_size / 4) + 2 * ep_count;
 8006b58:	88fb      	ldrh	r3, [r7, #6]
 8006b5a:	089b      	lsrs	r3, r3, #2
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	797b      	ldrb	r3, [r7, #5]
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	4413      	add	r3, r2
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	005b      	lsls	r3, r3, #1
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	330f      	adds	r3, #15
 8006b6c:	b29b      	uxth	r3, r3
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
	...

08006b7c <update_grxfsiz>:

static void update_grxfsiz(uint8_t rhport) {
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b086      	sub	sp, #24
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006b86:	79fb      	ldrb	r3, [r7, #7]
 8006b88:	4a1b      	ldr	r2, [pc, #108]	; (8006bf8 <update_grxfsiz+0x7c>)
 8006b8a:	011b      	lsls	r3, r3, #4
 8006b8c:	4413      	add	r3, r2
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006b92:	79fb      	ldrb	r3, [r7, #7]
 8006b94:	4a18      	ldr	r2, [pc, #96]	; (8006bf8 <update_grxfsiz+0x7c>)
 8006b96:	011b      	lsls	r3, r3, #4
 8006b98:	4413      	add	r3, r2
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	73fb      	strb	r3, [r7, #15]

  // Determine largest EP size for RX FIFO
  uint16_t max_epsize = 0;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	757b      	strb	r3, [r7, #21]
 8006ba8:	e013      	b.n	8006bd2 <update_grxfsiz+0x56>
    max_epsize = tu_max16(max_epsize, xfer_status[epnum][TUSB_DIR_OUT].max_size);
 8006baa:	7d7b      	ldrb	r3, [r7, #21]
 8006bac:	4a13      	ldr	r2, [pc, #76]	; (8006bfc <update_grxfsiz+0x80>)
 8006bae:	015b      	lsls	r3, r3, #5
 8006bb0:	4413      	add	r3, r2
 8006bb2:	330a      	adds	r3, #10
 8006bb4:	881a      	ldrh	r2, [r3, #0]
 8006bb6:	8afb      	ldrh	r3, [r7, #22]
 8006bb8:	81bb      	strh	r3, [r7, #12]
 8006bba:	4613      	mov	r3, r2
 8006bbc:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_max16 (uint16_t x, uint16_t y) { return (x > y) ? x : y; }
 8006bbe:	89ba      	ldrh	r2, [r7, #12]
 8006bc0:	897b      	ldrh	r3, [r7, #10]
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	bf38      	it	cc
 8006bc6:	4613      	movcc	r3, r2
 8006bc8:	b29b      	uxth	r3, r3
 8006bca:	82fb      	strh	r3, [r7, #22]
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8006bcc:	7d7b      	ldrb	r3, [r7, #21]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	757b      	strb	r3, [r7, #21]
 8006bd2:	7d7a      	ldrb	r2, [r7, #21]
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d3e7      	bcc.n	8006baa <update_grxfsiz+0x2e>
  }

  // Update size of RX FIFO
  dwc2->grxfsiz = calc_grxfsiz(max_epsize, ep_count);
 8006bda:	7bfa      	ldrb	r2, [r7, #15]
 8006bdc:	8afb      	ldrh	r3, [r7, #22]
 8006bde:	4611      	mov	r1, r2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7ff ffb1 	bl	8006b48 <calc_grxfsiz>
 8006be6:	4603      	mov	r3, r0
 8006be8:	461a      	mov	r2, r3
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	625a      	str	r2, [r3, #36]	; 0x24
}
 8006bee:	bf00      	nop
 8006bf0:	3718      	adds	r7, #24
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	bd80      	pop	{r7, pc}
 8006bf6:	bf00      	nop
 8006bf8:	08008958 	.word	0x08008958
 8006bfc:	200014fc 	.word	0x200014fc

08006c00 <bus_reset>:

// Start of Bus Reset
static void bus_reset(uint8_t rhport) {
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b086      	sub	sp, #24
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	4603      	mov	r3, r0
 8006c08:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	4a3c      	ldr	r2, [pc, #240]	; (8006d00 <bus_reset+0x100>)
 8006c0e:	011b      	lsls	r3, r3, #4
 8006c10:	4413      	add	r3, r2
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8006c16:	79fb      	ldrb	r3, [r7, #7]
 8006c18:	4a39      	ldr	r2, [pc, #228]	; (8006d00 <bus_reset+0x100>)
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3308      	adds	r3, #8
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	73fb      	strb	r3, [r7, #15]

  tu_memclr(xfer_status, sizeof(xfer_status));
 8006c24:	2280      	movs	r2, #128	; 0x80
 8006c26:	2100      	movs	r1, #0
 8006c28:	4836      	ldr	r0, [pc, #216]	; (8006d04 <bus_reset+0x104>)
 8006c2a:	f001 fcfe 	bl	800862a <memset>
  _out_ep_closed = false;
 8006c2e:	4b36      	ldr	r3, [pc, #216]	; (8006d08 <bus_reset+0x108>)
 8006c30:	2200      	movs	r2, #0
 8006c32:	701a      	strb	r2, [r3, #0]

  _sof_en = false;
 8006c34:	4b35      	ldr	r3, [pc, #212]	; (8006d0c <bus_reset+0x10c>)
 8006c36:	2200      	movs	r2, #0
 8006c38:	701a      	strb	r2, [r3, #0]

  // clear device address
  dwc2->dcfg &= ~DCFG_DAD_Msk;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8006c40:	f423 62fe 	bic.w	r2, r3, #2032	; 0x7f0
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	75fb      	strb	r3, [r7, #23]
 8006c4e:	e010      	b.n	8006c72 <bus_reset+0x72>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 8006c50:	7dfb      	ldrb	r3, [r7, #23]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	3358      	adds	r3, #88	; 0x58
 8006c56:	015b      	lsls	r3, r3, #5
 8006c58:	4413      	add	r3, r2
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	7dfb      	ldrb	r3, [r7, #23]
 8006c5e:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8006c62:	6939      	ldr	r1, [r7, #16]
 8006c64:	3358      	adds	r3, #88	; 0x58
 8006c66:	015b      	lsls	r3, r3, #5
 8006c68:	440b      	add	r3, r1
 8006c6a:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8006c6c:	7dfb      	ldrb	r3, [r7, #23]
 8006c6e:	3301      	adds	r3, #1
 8006c70:	75fb      	strb	r3, [r7, #23]
 8006c72:	7dfa      	ldrb	r2, [r7, #23]
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d3ea      	bcc.n	8006c50 <bus_reset+0x50>
  }

  // 2. Set up interrupt mask
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8006c80:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	2209      	movs	r2, #9
 8006c88:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	2209      	movs	r2, #9
 8006c90:	f8c3 2810 	str.w	r2, [r3, #2064]	; 0x810
  //   For Isochronous, largest EP size can be 1023/1024 for FS/HS respectively. In addition if multiple ISO
  //   are enabled at least "2 x (Largest-EPsize/4) + 1" are recommended.  Maybe provide a macro for application to
  //   overwrite this.

  // EP0 out max is 64
  dwc2->grxfsiz = calc_grxfsiz(64, ep_count);
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	4619      	mov	r1, r3
 8006c98:	2040      	movs	r0, #64	; 0x40
 8006c9a:	f7ff ff55 	bl	8006b48 <calc_grxfsiz>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	625a      	str	r2, [r3, #36]	; 0x24

  // Setup the control endpoint 0
  _allocated_fifo_words_tx = 16;
 8006ca6:	4b1a      	ldr	r3, [pc, #104]	; (8006d10 <bus_reset+0x110>)
 8006ca8:	2210      	movs	r2, #16
 8006caa:	801a      	strh	r2, [r3, #0]

  // Control IN uses FIFO 0 with 64 bytes ( 16 32-bit word )
  dwc2->dieptxf0 = (16 << DIEPTXF0_TX0FD_Pos) | (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8006cac:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8006cb0:	089b      	lsrs	r3, r3, #2
 8006cb2:	4a17      	ldr	r2, [pc, #92]	; (8006d10 <bus_reset+0x110>)
 8006cb4:	8812      	ldrh	r2, [r2, #0]
 8006cb6:	1a9b      	subs	r3, r3, r2
 8006cb8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	629a      	str	r2, [r3, #40]	; 0x28

  // Fixed control EP0 size to 64 bytes
  dwc2->epin[0].diepctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	f8d3 3900 	ldr.w	r3, [r3, #2304]	; 0x900
 8006cc6:	f023 0203 	bic.w	r2, r3, #3
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8006cd0:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <bus_reset+0x104>)
 8006cd2:	2240      	movs	r2, #64	; 0x40
 8006cd4:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8006cd6:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <bus_reset+0x104>)
 8006cd8:	2240      	movs	r2, #64	; 0x40
 8006cda:	835a      	strh	r2, [r3, #26]

  dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	; 0xb10
 8006ce2:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f8c3 2b10 	str.w	r2, [r3, #2832]	; 0xb10

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8006cec:	693b      	ldr	r3, [r7, #16]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f443 2240 	orr.w	r2, r3, #786432	; 0xc0000
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	619a      	str	r2, [r3, #24]
}
 8006cf8:	bf00      	nop
 8006cfa:	3718      	adds	r7, #24
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}
 8006d00:	08008958 	.word	0x08008958
 8006d04:	200014fc 	.word	0x200014fc
 8006d08:	20001582 	.word	0x20001582
 8006d0c:	20001583 	.word	0x20001583
 8006d10:	20001580 	.word	0x20001580

08006d14 <edpt_schedule_packets>:

static void edpt_schedule_packets(uint8_t rhport, uint8_t const epnum, uint8_t const dir, uint16_t const num_packets,
                                  uint16_t total_bytes) {
 8006d14:	b490      	push	{r4, r7}
 8006d16:	b08a      	sub	sp, #40	; 0x28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	4608      	mov	r0, r1
 8006d1e:	4611      	mov	r1, r2
 8006d20:	461a      	mov	r2, r3
 8006d22:	4623      	mov	r3, r4
 8006d24:	71fb      	strb	r3, [r7, #7]
 8006d26:	4603      	mov	r3, r0
 8006d28:	71bb      	strb	r3, [r7, #6]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	717b      	strb	r3, [r7, #5]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	807b      	strh	r3, [r7, #2]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8006d32:	79fb      	ldrb	r3, [r7, #7]
 8006d34:	4a71      	ldr	r2, [pc, #452]	; (8006efc <edpt_schedule_packets+0x1e8>)
 8006d36:	011b      	lsls	r3, r3, #4
 8006d38:	4413      	add	r3, r2
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	627b      	str	r3, [r7, #36]	; 0x24

  // EP0 is limited to one packet each xfer
  // We use multiple transaction of xfer->max_size length to get a whole transfer done
  if (epnum == 0) {
 8006d3e:	79bb      	ldrb	r3, [r7, #6]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d121      	bne.n	8006d88 <edpt_schedule_packets+0x74>
    xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8006d44:	79ba      	ldrb	r2, [r7, #6]
 8006d46:	797b      	ldrb	r3, [r7, #5]
 8006d48:	0052      	lsls	r2, r2, #1
 8006d4a:	4413      	add	r3, r2
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	4a6c      	ldr	r2, [pc, #432]	; (8006f00 <edpt_schedule_packets+0x1ec>)
 8006d50:	4413      	add	r3, r2
 8006d52:	623b      	str	r3, [r7, #32]
    total_bytes = tu_min16(ep0_pending[dir], xfer->max_size);
 8006d54:	797b      	ldrb	r3, [r7, #5]
 8006d56:	4a6b      	ldr	r2, [pc, #428]	; (8006f04 <edpt_schedule_packets+0x1f0>)
 8006d58:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8006d5c:	6a3b      	ldr	r3, [r7, #32]
 8006d5e:	895b      	ldrh	r3, [r3, #10]
 8006d60:	81fa      	strh	r2, [r7, #14]
 8006d62:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8006d64:	89fa      	ldrh	r2, [r7, #14]
 8006d66:	89bb      	ldrh	r3, [r7, #12]
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	bf28      	it	cs
 8006d6c:	4613      	movcs	r3, r2
 8006d6e:	b29b      	uxth	r3, r3
 8006d70:	863b      	strh	r3, [r7, #48]	; 0x30
    ep0_pending[dir] -= total_bytes;
 8006d72:	797b      	ldrb	r3, [r7, #5]
 8006d74:	4a63      	ldr	r2, [pc, #396]	; (8006f04 <edpt_schedule_packets+0x1f0>)
 8006d76:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006d7a:	797b      	ldrb	r3, [r7, #5]
 8006d7c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8006d7e:	1a8a      	subs	r2, r1, r2
 8006d80:	b291      	uxth	r1, r2
 8006d82:	4a60      	ldr	r2, [pc, #384]	; (8006f04 <edpt_schedule_packets+0x1f0>)
 8006d84:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
  }

  // IN and OUT endpoint xfers are interrupt-driven, we just schedule them here.
  if (dir == TUSB_DIR_IN) {
 8006d88:	797b      	ldrb	r3, [r7, #5]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d156      	bne.n	8006e3c <edpt_schedule_packets+0x128>
    dwc2_epin_t* epin = dwc2->epin;
 8006d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d94:	617b      	str	r3, [r7, #20]

    // A full IN transfer (multiple packets, possibly) triggers XFRC.
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8006d96:	887b      	ldrh	r3, [r7, #2]
 8006d98:	04db      	lsls	r3, r3, #19
 8006d9a:	4618      	mov	r0, r3
                           ((total_bytes << DIEPTSIZ_XFRSIZ_Pos) & DIEPTSIZ_XFRSIZ_Msk);
 8006d9c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
    epin[epnum].dieptsiz = (num_packets << DIEPTSIZ_PKTCNT_Pos) |
 8006d9e:	79bb      	ldrb	r3, [r7, #6]
 8006da0:	015b      	lsls	r3, r3, #5
 8006da2:	6979      	ldr	r1, [r7, #20]
 8006da4:	440b      	add	r3, r1
 8006da6:	4302      	orrs	r2, r0
 8006da8:	611a      	str	r2, [r3, #16]

    epin[epnum].diepctl |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8006daa:	79bb      	ldrb	r3, [r7, #6]
 8006dac:	015b      	lsls	r3, r3, #5
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	4413      	add	r3, r2
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	79bb      	ldrb	r3, [r7, #6]
 8006db6:	015b      	lsls	r3, r3, #5
 8006db8:	6979      	ldr	r1, [r7, #20]
 8006dba:	440b      	add	r3, r1
 8006dbc:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006dc0:	601a      	str	r2, [r3, #0]

    // For ISO endpoint set correct odd/even bit for next frame.
    if ((epin[epnum].diepctl & DIEPCTL_EPTYP) == DIEPCTL_EPTYP_0 && (XFER_CTL_BASE(epnum, dir))->interval == 1) {
 8006dc2:	79bb      	ldrb	r3, [r7, #6]
 8006dc4:	015b      	lsls	r3, r3, #5
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	4413      	add	r3, r2
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006dd0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006dd4:	d123      	bne.n	8006e1e <edpt_schedule_packets+0x10a>
 8006dd6:	79ba      	ldrb	r2, [r7, #6]
 8006dd8:	797b      	ldrb	r3, [r7, #5]
 8006dda:	4949      	ldr	r1, [pc, #292]	; (8006f00 <edpt_schedule_packets+0x1ec>)
 8006ddc:	0052      	lsls	r2, r2, #1
 8006dde:	4413      	add	r3, r2
 8006de0:	011b      	lsls	r3, r3, #4
 8006de2:	440b      	add	r3, r1
 8006de4:	330c      	adds	r3, #12
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d118      	bne.n	8006e1e <edpt_schedule_packets+0x10a>
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8006dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dee:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	613b      	str	r3, [r7, #16]
      epin[epnum].diepctl |= (odd_frame_now ? DIEPCTL_SD0PID_SEVNFRM_Msk : DIEPCTL_SODDFRM_Msk);
 8006df8:	79bb      	ldrb	r3, [r7, #6]
 8006dfa:	015b      	lsls	r3, r3, #5
 8006dfc:	697a      	ldr	r2, [r7, #20]
 8006dfe:	4413      	add	r3, r2
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d002      	beq.n	8006e0e <edpt_schedule_packets+0xfa>
 8006e08:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006e0c:	e001      	b.n	8006e12 <edpt_schedule_packets+0xfe>
 8006e0e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006e12:	79bb      	ldrb	r3, [r7, #6]
 8006e14:	015b      	lsls	r3, r3, #5
 8006e16:	6978      	ldr	r0, [r7, #20]
 8006e18:	4403      	add	r3, r0
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	601a      	str	r2, [r3, #0]
    }
    // Enable fifo empty interrupt only if there are something to put in the fifo.
    if (total_bytes != 0) {
 8006e1e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d065      	beq.n	8006ef0 <edpt_schedule_packets+0x1dc>
      dwc2->diepempmsk |= (1 << epnum);
 8006e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e26:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8006e2a:	79ba      	ldrb	r2, [r7, #6]
 8006e2c:	2101      	movs	r1, #1
 8006e2e:	fa01 f202 	lsl.w	r2, r1, r2
 8006e32:	431a      	orrs	r2, r3
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
      // Take odd/even bit from frame counter.
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
    }
  }
}
 8006e3a:	e059      	b.n	8006ef0 <edpt_schedule_packets+0x1dc>
    dwc2_epout_t* epout = dwc2->epout;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e42:	61fb      	str	r3, [r7, #28]
    epout[epnum].doeptsiz &= ~(DOEPTSIZ_PKTCNT_Msk | DOEPTSIZ_XFRSIZ);
 8006e44:	79bb      	ldrb	r3, [r7, #6]
 8006e46:	015b      	lsls	r3, r3, #5
 8006e48:	69fa      	ldr	r2, [r7, #28]
 8006e4a:	4413      	add	r3, r2
 8006e4c:	691a      	ldr	r2, [r3, #16]
 8006e4e:	79bb      	ldrb	r3, [r7, #6]
 8006e50:	015b      	lsls	r3, r3, #5
 8006e52:	69f9      	ldr	r1, [r7, #28]
 8006e54:	440b      	add	r3, r1
 8006e56:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
 8006e5a:	611a      	str	r2, [r3, #16]
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8006e5c:	79bb      	ldrb	r3, [r7, #6]
 8006e5e:	015b      	lsls	r3, r3, #5
 8006e60:	69fa      	ldr	r2, [r7, #28]
 8006e62:	4413      	add	r3, r2
 8006e64:	6919      	ldr	r1, [r3, #16]
 8006e66:	887b      	ldrh	r3, [r7, #2]
 8006e68:	04db      	lsls	r3, r3, #19
 8006e6a:	461a      	mov	r2, r3
                             ((total_bytes << DOEPTSIZ_XFRSIZ_Pos) & DOEPTSIZ_XFRSIZ_Msk);
 8006e6c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
    epout[epnum].doeptsiz |= (num_packets << DOEPTSIZ_PKTCNT_Pos) |
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	79bb      	ldrb	r3, [r7, #6]
 8006e72:	015b      	lsls	r3, r3, #5
 8006e74:	69f8      	ldr	r0, [r7, #28]
 8006e76:	4403      	add	r3, r0
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	611a      	str	r2, [r3, #16]
    epout[epnum].doepctl |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8006e7c:	79bb      	ldrb	r3, [r7, #6]
 8006e7e:	015b      	lsls	r3, r3, #5
 8006e80:	69fa      	ldr	r2, [r7, #28]
 8006e82:	4413      	add	r3, r2
 8006e84:	681a      	ldr	r2, [r3, #0]
 8006e86:	79bb      	ldrb	r3, [r7, #6]
 8006e88:	015b      	lsls	r3, r3, #5
 8006e8a:	69f9      	ldr	r1, [r7, #28]
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f042 4204 	orr.w	r2, r2, #2214592512	; 0x84000000
 8006e92:	601a      	str	r2, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8006e94:	79bb      	ldrb	r3, [r7, #6]
 8006e96:	015b      	lsls	r3, r3, #5
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006ea2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ea6:	d123      	bne.n	8006ef0 <edpt_schedule_packets+0x1dc>
        XFER_CTL_BASE(epnum, dir)->interval == 1) {
 8006ea8:	79ba      	ldrb	r2, [r7, #6]
 8006eaa:	797b      	ldrb	r3, [r7, #5]
 8006eac:	4914      	ldr	r1, [pc, #80]	; (8006f00 <edpt_schedule_packets+0x1ec>)
 8006eae:	0052      	lsls	r2, r2, #1
 8006eb0:	4413      	add	r3, r2
 8006eb2:	011b      	lsls	r3, r3, #4
 8006eb4:	440b      	add	r3, r1
 8006eb6:	330c      	adds	r3, #12
 8006eb8:	781b      	ldrb	r3, [r3, #0]
    if ((epout[epnum].doepctl & DOEPCTL_EPTYP) == DOEPCTL_EPTYP_0 &&
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	d118      	bne.n	8006ef0 <edpt_schedule_packets+0x1dc>
      uint32_t const odd_frame_now = (dwc2->dsts & (1u << DSTS_FNSOF_Pos));
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8006ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ec8:	61bb      	str	r3, [r7, #24]
      epout[epnum].doepctl |= (odd_frame_now ? DOEPCTL_SD0PID_SEVNFRM_Msk : DOEPCTL_SODDFRM_Msk);
 8006eca:	79bb      	ldrb	r3, [r7, #6]
 8006ecc:	015b      	lsls	r3, r3, #5
 8006ece:	69fa      	ldr	r2, [r7, #28]
 8006ed0:	4413      	add	r3, r2
 8006ed2:	681a      	ldr	r2, [r3, #0]
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <edpt_schedule_packets+0x1cc>
 8006eda:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
 8006ede:	e001      	b.n	8006ee4 <edpt_schedule_packets+0x1d0>
 8006ee0:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
 8006ee4:	79bb      	ldrb	r3, [r7, #6]
 8006ee6:	015b      	lsls	r3, r3, #5
 8006ee8:	69f8      	ldr	r0, [r7, #28]
 8006eea:	4403      	add	r3, r0
 8006eec:	430a      	orrs	r2, r1
 8006eee:	601a      	str	r2, [r3, #0]
}
 8006ef0:	bf00      	nop
 8006ef2:	3728      	adds	r7, #40	; 0x28
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bc90      	pop	{r4, r7}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop
 8006efc:	08008958 	.word	0x08008958
 8006f00:	200014fc 	.word	0x200014fc
 8006f04:	2000157c 	.word	0x2000157c

08006f08 <reset_core>:
  TU_LOG(DWC2_DEBUG, "0x%08lX\r\n", p[5]);
}

#endif

static void reset_core(dwc2_regs_t* dwc2) {
 8006f08:	b480      	push	{r7}
 8006f0a:	b083      	sub	sp, #12
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	691b      	ldr	r3, [r3, #16]
 8006f14:	f043 0201 	orr.w	r2, r3, #1
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	611a      	str	r2, [r3, #16]

  // wait for reset bit is cleared
  // TODO version 4.20a should wait for RESET DONE mask
  while (dwc2->grstctl & GRSTCTL_CSRST) {}
 8006f1c:	bf00      	nop
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	691b      	ldr	r3, [r3, #16]
 8006f22:	f003 0301 	and.w	r3, r3, #1
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d1f9      	bne.n	8006f1e <reset_core+0x16>

  // wait for AHB master IDLE
  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {}
 8006f2a:	bf00      	nop
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	dafb      	bge.n	8006f2c <reset_core+0x24>

  // wait for device mode ?
}
 8006f34:	bf00      	nop
 8006f36:	bf00      	nop
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <phy_hs_supported>:

static bool phy_hs_supported(dwc2_regs_t* dwc2) {
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  // note: esp32 incorrect report its hs_phy_type as utmi
#if TU_CHECK_MCU(OPT_MCU_ESP32S2, OPT_MCU_ESP32S3)
  return false;
#else
  return TUD_OPT_HIGH_SPEED && dwc2->ghwcfg2_bm.hs_phy_type != HS_PHY_TYPE_NONE;
 8006f4a:	2300      	movs	r3, #0
#endif
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	b082      	sub	sp, #8
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_DEBUG, "Fullspeed PHY init\r\n");

  // Select FS PHY
  dwc2->gusbcfg |= GUSBCFG_PHYSEL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, HS_PHY_TYPE_NONE);
 8006f6c:	2100      	movs	r1, #0
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f7ff fd58 	bl	8006a24 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f7ff ffc7 	bl	8006f08 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (5u << GUSBCFG_TRDT_Pos);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8006f82:	f443 52a0 	orr.w	r2, r3, #5120	; 0x1400
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, HS_PHY_TYPE_NONE);
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f7ff fd65 	bl	8006a5c <dwc2_phy_update>

  // set max speed
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DSPD_Msk) | (DCFG_DSPD_FS << DCFG_DSPD_Pos);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8006f98:	f043 0203 	orr.w	r2, r3, #3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 8006fa2:	bf00      	nop
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8006faa:	b580      	push	{r7, lr}
 8006fac:	b084      	sub	sp, #16
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fbe:	60fb      	str	r3, [r7, #12]

  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) {
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006fc6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b80      	cmp	r3, #128	; 0x80
 8006fce:	d110      	bne.n	8006ff2 <phy_hs_init+0x48>
    TU_LOG(DWC2_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f043 0310 	orr.w	r3, r3, #16
 8006fd6:	60fb      	str	r3, [r7, #12]

    // ULPI 8-bit interface, single data rate
    gusbcfg &= ~(GUSBCFG_PHYIF16 | GUSBCFG_DDRSEL);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006fde:	60fb      	str	r3, [r7, #12]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006fe6:	60fb      	str	r3, [r7, #12]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f423 2320 	bic.w	r3, r3, #655360	; 0xa0000
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	e00f      	b.n	8007012 <phy_hs_init+0x68>
  } else {
    TU_LOG(DWC2_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ with 8-bit interface
    gusbcfg &= ~(GUSBCFG_ULPI_UTMI_SEL | GUSBCFG_PHYIF16);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f023 0318 	bic.w	r3, r3, #24
 8006ff8:	60fb      	str	r3, [r7, #12]

    // Set 16-bit interface if supported
    if (dwc2->ghwcfg4_bm.utmi_phy_data_width) gusbcfg |= GUSBCFG_PHYIF16;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007000:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007004:	b2db      	uxtb	r3, r3
 8007006:	2b00      	cmp	r3, #0
 8007008:	d003      	beq.n	8007012 <phy_hs_init+0x68>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	f043 0308 	orr.w	r3, r3, #8
 8007010:	60fb      	str	r3, [r7, #12]
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800701e:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8007022:	b2db      	uxtb	r3, r3
 8007024:	4619      	mov	r1, r3
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f7ff fcfc 	bl	8006a24 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff ff6b 	bl	8006f08 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8007038:	60fb      	str	r3, [r7, #12]
  gusbcfg |= (dwc2->ghwcfg4_bm.utmi_phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007040:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007044:	b2db      	uxtb	r3, r3
 8007046:	2b00      	cmp	r3, #0
 8007048:	d002      	beq.n	8007050 <phy_hs_init+0xa6>
 800704a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800704e:	e001      	b.n	8007054 <phy_hs_init+0xaa>
 8007050:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	4313      	orrs	r3, r2
 8007058:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68fa      	ldr	r2, [r7, #12]
 800705e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, dwc2->ghwcfg2_bm.hs_phy_type);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007066:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800706a:	b2db      	uxtb	r3, r3
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f7ff fcf4 	bl	8006a5c <dwc2_phy_update>

  // Set max speed
  uint32_t dcfg = dwc2->dcfg;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800707a:	60bb      	str	r3, [r7, #8]
  dcfg &= ~DCFG_DSPD_Msk;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	f023 0303 	bic.w	r3, r3, #3
 8007082:	60bb      	str	r3, [r7, #8]
  dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

  // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
  // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
  if (dwc2->ghwcfg2_bm.hs_phy_type == HS_PHY_TYPE_ULPI) dcfg |= DCFG_XCVRDLY;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800708a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b80      	cmp	r3, #128	; 0x80
 8007092:	d103      	bne.n	800709c <phy_hs_init+0xf2>
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800709a:	60bb      	str	r3, [r7, #8]

  dwc2->dcfg = dcfg;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
 80070a4:	bf00      	nop
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
#endif

  // For some reasons: GD32VF103 snpsid and all hwcfg register are always zero (skip it)
  (void) dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  uint32_t const gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b8:	0c1b      	lsrs	r3, r3, #16
 80070ba:	041b      	lsls	r3, r3, #16
 80070bc:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	4a0e      	ldr	r2, [pc, #56]	; (80070fc <check_dwc2+0x50>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d012      	beq.n	80070ec <check_dwc2+0x40>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	4a0d      	ldr	r2, [pc, #52]	; (8007100 <check_dwc2+0x54>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d00e      	beq.n	80070ec <check_dwc2+0x40>
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4a0c      	ldr	r2, [pc, #48]	; (8007104 <check_dwc2+0x58>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d00a      	beq.n	80070ec <check_dwc2+0x40>
 80070d6:	4b0c      	ldr	r3, [pc, #48]	; (8007108 <check_dwc2+0x5c>)
 80070d8:	60bb      	str	r3, [r7, #8]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0301 	and.w	r3, r3, #1
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d000      	beq.n	80070e8 <check_dwc2+0x3c>
 80070e6:	be00      	bkpt	0x0000
 80070e8:	2300      	movs	r3, #0
 80070ea:	e000      	b.n	80070ee <check_dwc2+0x42>
#endif

  return true;
 80070ec:	2301      	movs	r3, #1
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3714      	adds	r7, #20
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	4f540000 	.word	0x4f540000
 8007100:	55310000 	.word	0x55310000
 8007104:	55320000 	.word	0x55320000
 8007108:	e000edf0 	.word	0xe000edf0

0800710c <dcd_init>:

void dcd_init(uint8_t rhport) {
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	4603      	mov	r3, r0
 8007114:	71fb      	strb	r3, [r7, #7]
  // Programming model begins in the last section of the chapter on the USB
  // peripheral in each Reference Manual.
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	4a3e      	ldr	r2, [pc, #248]	; (8007214 <dcd_init+0x108>)
 800711a:	011b      	lsls	r3, r3, #4
 800711c:	4413      	add	r3, r2
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60fb      	str	r3, [r7, #12]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  if (!check_dwc2(dwc2)) return;
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f7ff ffc2 	bl	80070ac <check_dwc2>
 8007128:	4603      	mov	r3, r0
 800712a:	f083 0301 	eor.w	r3, r3, #1
 800712e:	b2db      	uxtb	r3, r3
 8007130:	2b00      	cmp	r3, #0
 8007132:	d16b      	bne.n	800720c <dcd_init+0x100>
  dcd_disconnect(rhport);
 8007134:	79fb      	ldrb	r3, [r7, #7]
 8007136:	4618      	mov	r0, r3
 8007138:	f000 f930 	bl	800739c <dcd_disconnect>

  // max number of endpoints & total_fifo_size are:
  // hw_cfg2->num_dev_ep, hw_cfg2->total_fifo_size

  if (phy_hs_supported(dwc2)) {
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ff00 	bl	8006f42 <phy_hs_supported>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d003      	beq.n	8007150 <dcd_init+0x44>
    phy_hs_init(dwc2); // Highspeed
 8007148:	68f8      	ldr	r0, [r7, #12]
 800714a:	f7ff ff2e 	bl	8006faa <phy_hs_init>
 800714e:	e002      	b.n	8007156 <dcd_init+0x4a>
  } else {
    phy_fs_init(dwc2); // core does not support highspeed or hs phy is not present
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f7ff ff01 	bl	8006f58 <phy_fs_init>
  }

  // Restart PHY clock
  dwc2->pcgctl &= ~(PCGCTL_STOPPCLK | PCGCTL_GATEHCLK | PCGCTL_PWRCLMP | PCGCTL_RSTPDWNMODULE);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800715c:	f023 020f 	bic.w	r2, r3, #15
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another.
   */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	68db      	ldr	r3, [r3, #12]
 800716a:	f043 0207 	orr.w	r2, r3, #7
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	60da      	str	r2, [r3, #12]

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800717a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f023 03d0 	bic.w	r3, r3, #208	; 0xd0
 800718a:	f043 02c0 	orr.w	r2, r3, #192	; 0xc0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]

  // If USB host misbehaves during status portion of control xfer
  // (non zero-length packet), send STALL back and discard.
  dwc2->dcfg |= DCFG_NZLSOHSK;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8007198:	f043 0204 	orr.w	r2, r3, #4
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800

  // flush all TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (0x10u << GRSTCTL_TXFNUM_Pos);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f44f 6284 	mov.w	r2, #1056	; 0x420
 80071a8:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80071aa:	bf00      	nop
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	f003 0320 	and.w	r3, r3, #32
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d1f9      	bne.n	80071ac <dcd_init+0xa0>

  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	2210      	movs	r2, #16
 80071bc:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80071be:	bf00      	nop
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	691b      	ldr	r3, [r3, #16]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1f9      	bne.n	80071c0 <dcd_init+0xb4>

  // Clear all interrupts
  uint32_t int_mask = dwc2->gintsts;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	695b      	ldr	r3, [r3, #20]
 80071d0:	60bb      	str	r3, [r7, #8]
  dwc2->gintsts |= int_mask;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	695a      	ldr	r2, [r3, #20]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	431a      	orrs	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	615a      	str	r2, [r3, #20]
  int_mask = dwc2->gotgint;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	60bb      	str	r3, [r7, #8]
  dwc2->gotgint |= int_mask;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	685a      	ldr	r2, [r3, #4]
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	431a      	orrs	r2, r3
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	605a      	str	r2, [r3, #4]

  // Required as part of core initialization.
  // TODO: How should mode mismatch be handled? It will cause
  // the core to stop working/require reset.
  dwc2->gintmsk = GINTMSK_OTGINT | GINTMSK_MMISM | GINTMSK_RXFLVLM |
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	4a09      	ldr	r2, [pc, #36]	; (8007218 <dcd_init+0x10c>)
 80071f4:	619a      	str	r2, [r3, #24]
                  GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;

  // Enable global interrupt
  dwc2->gahbcfg |= GAHBCFG_GINT;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	f043 0201 	orr.w	r2, r3, #1
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	609a      	str	r2, [r3, #8]
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gotgctl);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gusbcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->dcfg);
//  TU_LOG_HEX(DWC2_DEBUG, dwc2->gahbcfg);

  dcd_connect(rhport);
 8007202:	79fb      	ldrb	r3, [r7, #7]
 8007204:	4618      	mov	r0, r3
 8007206:	f000 f8ad 	bl	8007364 <dcd_connect>
 800720a:	e000      	b.n	800720e <dcd_init+0x102>
  if (!check_dwc2(dwc2)) return;
 800720c:	bf00      	nop
}
 800720e:	3710      	adds	r7, #16
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	08008958 	.word	0x08008958
 8007218:	80003816 	.word	0x80003816

0800721c <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 800721c:	b580      	push	{r7, lr}
 800721e:	b084      	sub	sp, #16
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	71fb      	strb	r3, [r7, #7]
 8007226:	79fb      	ldrb	r3, [r7, #7]
 8007228:	73fb      	strb	r3, [r7, #15]
  NVIC_EnableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	4a06      	ldr	r2, [pc, #24]	; (8007248 <dcd_int_enable+0x2c>)
 800722e:	011b      	lsls	r3, r3, #4
 8007230:	4413      	add	r3, r2
 8007232:	3304      	adds	r3, #4
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	b25b      	sxtb	r3, r3
 8007238:	4618      	mov	r0, r3
 800723a:	f7ff fbb1 	bl	80069a0 <__NVIC_EnableIRQ>
}
 800723e:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 8007240:	bf00      	nop
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	08008958 	.word	0x08008958

0800724c <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	4603      	mov	r3, r0
 8007254:	71fb      	strb	r3, [r7, #7]
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	73fb      	strb	r3, [r7, #15]
  NVIC_DisableIRQ((IRQn_Type) _dwc2_controller[rhport].irqnum);
 800725a:	7bfb      	ldrb	r3, [r7, #15]
 800725c:	4a06      	ldr	r2, [pc, #24]	; (8007278 <dcd_int_disable+0x2c>)
 800725e:	011b      	lsls	r3, r3, #4
 8007260:	4413      	add	r3, r2
 8007262:	3304      	adds	r3, #4
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	b25b      	sxtb	r3, r3
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fbb7 	bl	80069dc <__NVIC_DisableIRQ>
}
 800726e:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 8007270:	bf00      	nop
 8007272:	3710      	adds	r7, #16
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	08008958 	.word	0x08008958

0800727c <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 800727c:	b580      	push	{r7, lr}
 800727e:	b084      	sub	sp, #16
 8007280:	af00      	add	r7, sp, #0
 8007282:	4603      	mov	r3, r0
 8007284:	460a      	mov	r2, r1
 8007286:	71fb      	strb	r3, [r7, #7]
 8007288:	4613      	mov	r3, r2
 800728a:	71bb      	strb	r3, [r7, #6]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	4a14      	ldr	r2, [pc, #80]	; (80072e0 <dcd_set_address+0x64>)
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	4413      	add	r3, r2
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 800729e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80072a2:	79ba      	ldrb	r2, [r7, #6]
 80072a4:	0112      	lsls	r2, r2, #4
 80072a6:	431a      	orrs	r2, r3
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
 80072ae:	2300      	movs	r3, #0
 80072b0:	72fb      	strb	r3, [r7, #11]
 80072b2:	2301      	movs	r3, #1
 80072b4:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80072b6:	7abb      	ldrb	r3, [r7, #10]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <dcd_set_address+0x46>
 80072bc:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80072c0:	e000      	b.n	80072c4 <dcd_set_address+0x48>
 80072c2:	2300      	movs	r3, #0
 80072c4:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	b25b      	sxtb	r3, r3
 80072cc:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80072ce:	79f8      	ldrb	r0, [r7, #7]
 80072d0:	2300      	movs	r3, #0
 80072d2:	2200      	movs	r2, #0
 80072d4:	f000 f9fc 	bl	80076d0 <dcd_edpt_xfer>
}
 80072d8:	bf00      	nop
 80072da:	3710      	adds	r7, #16
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08008958 	.word	0x08008958

080072e4 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	4603      	mov	r3, r0
 80072ec:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80072ee:	79fb      	ldrb	r3, [r7, #7]
 80072f0:	4a19      	ldr	r2, [pc, #100]	; (8007358 <dcd_remote_wakeup+0x74>)
 80072f2:	011b      	lsls	r3, r3, #4
 80072f4:	4413      	add	r3, r2
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60fb      	str	r3, [r7, #12]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007300:	f043 0201 	orr.w	r2, r3, #1
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	2208      	movs	r2, #8
 800730e:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	f043 0208 	orr.w	r2, r3, #8
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	619a      	str	r2, [r3, #24]
  uint32_t count = SystemCoreClock / 1000;
 800731c:	4b0f      	ldr	r3, [pc, #60]	; (800735c <dcd_remote_wakeup+0x78>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0f      	ldr	r2, [pc, #60]	; (8007360 <dcd_remote_wakeup+0x7c>)
 8007322:	fba2 2303 	umull	r2, r3, r2, r3
 8007326:	099b      	lsrs	r3, r3, #6
 8007328:	60bb      	str	r3, [r7, #8]
  while (count--) __NOP();
 800732a:	e000      	b.n	800732e <dcd_remote_wakeup+0x4a>
 800732c:	bf00      	nop
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	1e5a      	subs	r2, r3, #1
 8007332:	60ba      	str	r2, [r7, #8]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f9      	bne.n	800732c <dcd_remote_wakeup+0x48>
}
 8007338:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007340:	f023 0201 	bic.w	r2, r3, #1
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 800734a:	bf00      	nop
 800734c:	3714      	adds	r7, #20
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	08008958 	.word	0x08008958
 800735c:	20000000 	.word	0x20000000
 8007360:	10624dd3 	.word	0x10624dd3

08007364 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	4603      	mov	r3, r0
 800736c:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800736e:	79fb      	ldrb	r3, [r7, #7]
 8007370:	4a09      	ldr	r2, [pc, #36]	; (8007398 <dcd_connect+0x34>)
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	4413      	add	r3, r2
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	60fb      	str	r3, [r7, #12]
  dwc2->dctl &= ~DCTL_SDIS;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007380:	f023 0202 	bic.w	r2, r3, #2
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 800738a:	bf00      	nop
 800738c:	3714      	adds	r7, #20
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	08008958 	.word	0x08008958

0800739c <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 800739c:	b480      	push	{r7}
 800739e:	b085      	sub	sp, #20
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	4603      	mov	r3, r0
 80073a4:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	4a09      	ldr	r2, [pc, #36]	; (80073d0 <dcd_disconnect+0x34>)
 80073aa:	011b      	lsls	r3, r3, #4
 80073ac:	4413      	add	r3, r2
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	60fb      	str	r3, [r7, #12]
  dwc2->dctl |= DCTL_SDIS;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80073b8:	f043 0202 	orr.w	r2, r3, #2
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 80073c2:	bf00      	nop
 80073c4:	3714      	adds	r7, #20
 80073c6:	46bd      	mov	sp, r7
 80073c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073cc:	4770      	bx	lr
 80073ce:	bf00      	nop
 80073d0:	08008958 	.word	0x08008958

080073d4 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b08e      	sub	sp, #56	; 0x38
 80073d8:	af00      	add	r7, sp, #0
 80073da:	4603      	mov	r3, r0
 80073dc:	6039      	str	r1, [r7, #0]
 80073de:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80073e0:	79fb      	ldrb	r3, [r7, #7]
 80073e2:	4a91      	ldr	r2, [pc, #580]	; (8007628 <dcd_edpt_open+0x254>)
 80073e4:	011b      	lsls	r3, r3, #4
 80073e6:	4413      	add	r3, r2
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	637b      	str	r3, [r7, #52]	; 0x34
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80073ec:	79fb      	ldrb	r3, [r7, #7]
 80073ee:	4a8e      	ldr	r2, [pc, #568]	; (8007628 <dcd_edpt_open+0x254>)
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	4413      	add	r3, r2
 80073f4:	3308      	adds	r3, #8
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  uint8_t const epnum = tu_edpt_number(desc_edpt->bEndpointAddress);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	789b      	ldrb	r3, [r3, #2]
 8007400:	75bb      	strb	r3, [r7, #22]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007408:	b2db      	uxtb	r3, r3
 800740a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  uint8_t const dir = tu_edpt_dir(desc_edpt->bEndpointAddress);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	789b      	ldrb	r3, [r3, #2]
 8007412:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007414:	7dfb      	ldrb	r3, [r7, #23]
 8007416:	09db      	lsrs	r3, r3, #7
 8007418:	b2db      	uxtb	r3, r3
 800741a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31

  TU_ASSERT(epnum < ep_count);
 800741e:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007422:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007426:	429a      	cmp	r2, r3
 8007428:	d30a      	bcc.n	8007440 <dcd_edpt_open+0x6c>
 800742a:	4b80      	ldr	r3, [pc, #512]	; (800762c <dcd_edpt_open+0x258>)
 800742c:	61bb      	str	r3, [r7, #24]
 800742e:	69bb      	ldr	r3, [r7, #24]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 0301 	and.w	r3, r3, #1
 8007436:	2b00      	cmp	r3, #0
 8007438:	d000      	beq.n	800743c <dcd_edpt_open+0x68>
 800743a:	be00      	bkpt	0x0000
 800743c:	2300      	movs	r3, #0
 800743e:	e0ef      	b.n	8007620 <dcd_edpt_open+0x24c>

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007440:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007444:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8007448:	0052      	lsls	r2, r2, #1
 800744a:	4413      	add	r3, r2
 800744c:	011b      	lsls	r3, r3, #4
 800744e:	4a78      	ldr	r2, [pc, #480]	; (8007630 <dcd_edpt_open+0x25c>)
 8007450:	4413      	add	r3, r2
 8007452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	889b      	ldrh	r3, [r3, #4]
 800745c:	b29b      	uxth	r3, r3
 800745e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007462:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(desc_edpt);
 8007464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007466:	815a      	strh	r2, [r3, #10]
  xfer->interval = desc_edpt->bInterval;
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	799a      	ldrb	r2, [r3, #6]
 800746c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800746e:	731a      	strb	r2, [r3, #12]

  uint16_t const fifo_size = tu_div_ceil(xfer->max_size, 4);
 8007470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007472:	895b      	ldrh	r3, [r3, #10]
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	2304      	movs	r3, #4
 8007478:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return (v + d -1)/d; }
 800747a:	693a      	ldr	r2, [r7, #16]
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	4413      	add	r3, r2
 8007480:	1e5a      	subs	r2, r3, #1
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	fbb2 f3f3 	udiv	r3, r2, r3
 8007488:	857b      	strh	r3, [r7, #42]	; 0x2a

  if (dir == TUSB_DIR_OUT) {
 800748a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800748e:	2b00      	cmp	r3, #0
 8007490:	d15c      	bne.n	800754c <dcd_edpt_open+0x178>
    // Calculate required size of RX FIFO
    uint16_t const sz = calc_grxfsiz(4 * fifo_size, ep_count);
 8007492:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007494:	009b      	lsls	r3, r3, #2
 8007496:	b29b      	uxth	r3, r3
 8007498:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 800749c:	4611      	mov	r1, r2
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff fb52 	bl	8006b48 <calc_grxfsiz>
 80074a4:	4603      	mov	r3, r0
 80074a6:	847b      	strh	r3, [r7, #34]	; 0x22

    // If size_rx needs to be extended check if possible and if so enlarge it
    if (dwc2->grxfsiz < sz) {
 80074a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d217      	bcs.n	80074e2 <dcd_edpt_open+0x10e>
      TU_ASSERT(sz + _allocated_fifo_words_tx <= _dwc2_controller[rhport].ep_fifo_size / 4);
 80074b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80074b4:	4a5f      	ldr	r2, [pc, #380]	; (8007634 <dcd_edpt_open+0x260>)
 80074b6:	8812      	ldrh	r2, [r2, #0]
 80074b8:	4413      	add	r3, r2
 80074ba:	461a      	mov	r2, r3
 80074bc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80074c0:	089b      	lsrs	r3, r3, #2
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d90a      	bls.n	80074dc <dcd_edpt_open+0x108>
 80074c6:	4b59      	ldr	r3, [pc, #356]	; (800762c <dcd_edpt_open+0x258>)
 80074c8:	61fb      	str	r3, [r7, #28]
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f003 0301 	and.w	r3, r3, #1
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d000      	beq.n	80074d8 <dcd_edpt_open+0x104>
 80074d6:	be00      	bkpt	0x0000
 80074d8:	2300      	movs	r3, #0
 80074da:	e0a1      	b.n	8007620 <dcd_edpt_open+0x24c>

      // Enlarge RX FIFO
      dwc2->grxfsiz = sz;
 80074dc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80074de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074e0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 80074e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80074e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80074e8:	3358      	adds	r3, #88	; 0x58
 80074ea:	015b      	lsls	r3, r3, #5
 80074ec:	4413      	add	r3, r2
 80074ee:	681a      	ldr	r2, [r3, #0]
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	78db      	ldrb	r3, [r3, #3]
 80074f4:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80074f8:	b2db      	uxtb	r3, r3
 80074fa:	049b      	lsls	r3, r3, #18
 80074fc:	4619      	mov	r1, r3
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	78db      	ldrb	r3, [r3, #3]
 8007502:	f003 0303 	and.w	r3, r3, #3
 8007506:	b2db      	uxtb	r3, r3
 8007508:	2b01      	cmp	r3, #1
 800750a:	d002      	beq.n	8007512 <dcd_edpt_open+0x13e>
 800750c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007510:	e000      	b.n	8007514 <dcd_edpt_open+0x140>
 8007512:	2300      	movs	r3, #0
                                  (desc_edpt->bmAttributes.xfer << DOEPCTL_EPTYP_Pos) |
 8007514:	430b      	orrs	r3, r1
                                  (xfer->max_size << DOEPCTL_MPSIZ_Pos);
 8007516:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007518:	8949      	ldrh	r1, [r1, #10]
                                  (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DOEPCTL_SD0PID_SEVNFRM : 0) |
 800751a:	430b      	orrs	r3, r1
    dwc2->epout[epnum].doepctl |= (1 << DOEPCTL_USBAEP_Pos) |
 800751c:	431a      	orrs	r2, r3
 800751e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8007522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007526:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007528:	3358      	adds	r3, #88	; 0x58
 800752a:	015b      	lsls	r3, r3, #5
 800752c:	440b      	add	r3, r1
 800752e:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= TU_BIT(DAINTMSK_OEPM_Pos + epnum);
 8007530:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007532:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8007536:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800753a:	3310      	adds	r3, #16
 800753c:	2101      	movs	r1, #1
 800753e:	fa01 f303 	lsl.w	r3, r1, r3
 8007542:	431a      	orrs	r2, r3
 8007544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007546:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
 800754a:	e068      	b.n	800761e <dcd_edpt_open+0x24a>
    //
    // In FIFO is allocated by following rules:
    // - IN EP 1 gets FIFO 1, IN EP "n" gets FIFO "n".

    // Check if free space is available
    TU_ASSERT(_allocated_fifo_words_tx + fifo_size + dwc2->grxfsiz <= _dwc2_controller[rhport].ep_fifo_size / 4);
 800754c:	4b39      	ldr	r3, [pc, #228]	; (8007634 <dcd_edpt_open+0x260>)
 800754e:	881b      	ldrh	r3, [r3, #0]
 8007550:	461a      	mov	r2, r3
 8007552:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007554:	4413      	add	r3, r2
 8007556:	461a      	mov	r2, r3
 8007558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800755a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800755c:	441a      	add	r2, r3
 800755e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007562:	089b      	lsrs	r3, r3, #2
 8007564:	429a      	cmp	r2, r3
 8007566:	d90a      	bls.n	800757e <dcd_edpt_open+0x1aa>
 8007568:	4b30      	ldr	r3, [pc, #192]	; (800762c <dcd_edpt_open+0x258>)
 800756a:	627b      	str	r3, [r7, #36]	; 0x24
 800756c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d000      	beq.n	800757a <dcd_edpt_open+0x1a6>
 8007578:	be00      	bkpt	0x0000
 800757a:	2300      	movs	r3, #0
 800757c:	e050      	b.n	8007620 <dcd_edpt_open+0x24c>

    _allocated_fifo_words_tx += fifo_size;
 800757e:	4b2d      	ldr	r3, [pc, #180]	; (8007634 <dcd_edpt_open+0x260>)
 8007580:	881a      	ldrh	r2, [r3, #0]
 8007582:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8007584:	4413      	add	r3, r2
 8007586:	b29a      	uxth	r2, r3
 8007588:	4b2a      	ldr	r3, [pc, #168]	; (8007634 <dcd_edpt_open+0x260>)
 800758a:	801a      	strh	r2, [r3, #0]
    TU_LOG(DWC2_DEBUG, "    Allocated %u bytes at offset %lu", fifo_size * 4,
           _dwc2_controller[rhport].ep_fifo_size - _allocated_fifo_words_tx * 4);

    // DIEPTXF starts at FIFO #1.
    // Both TXFD and TXSA are in unit of 32-bit words.
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 800758c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	4619      	mov	r1, r3
                               (_dwc2_controller[rhport].ep_fifo_size / 4 - _allocated_fifo_words_tx);
 8007592:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8007596:	089b      	lsrs	r3, r3, #2
 8007598:	4a26      	ldr	r2, [pc, #152]	; (8007634 <dcd_edpt_open+0x260>)
 800759a:	8812      	ldrh	r2, [r2, #0]
 800759c:	1a9a      	subs	r2, r3, r2
    dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) |
 800759e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80075a2:	3b01      	subs	r3, #1
 80075a4:	430a      	orrs	r2, r1
 80075a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075a8:	3340      	adds	r3, #64	; 0x40
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	440b      	add	r3, r1
 80075ae:	605a      	str	r2, [r3, #4]

    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80075b0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80075b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075b6:	3348      	adds	r3, #72	; 0x48
 80075b8:	015b      	lsls	r3, r3, #5
 80075ba:	4413      	add	r3, r2
 80075bc:	6819      	ldr	r1, [r3, #0]
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 80075be:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80075c2:	059b      	lsls	r3, r3, #22
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80075c4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	78db      	ldrb	r3, [r3, #3]
 80075cc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	049b      	lsls	r3, r3, #18
                                 (epnum << DIEPCTL_TXFNUM_Pos) |
 80075d4:	4313      	orrs	r3, r2
 80075d6:	461a      	mov	r2, r3
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	78db      	ldrb	r3, [r3, #3]
 80075dc:	f003 0303 	and.w	r3, r3, #3
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d002      	beq.n	80075ec <dcd_edpt_open+0x218>
 80075e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80075ea:	e000      	b.n	80075ee <dcd_edpt_open+0x21a>
 80075ec:	2300      	movs	r3, #0
                                 (desc_edpt->bmAttributes.xfer << DIEPCTL_EPTYP_Pos) |
 80075ee:	4313      	orrs	r3, r2
                                 (xfer->max_size << DIEPCTL_MPSIZ_Pos);
 80075f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075f2:	8952      	ldrh	r2, [r2, #10]
                                 (desc_edpt->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS ? DIEPCTL_SD0PID_SEVNFRM : 0) |
 80075f4:	431a      	orrs	r2, r3
    dwc2->epin[epnum].diepctl |= (1 << DIEPCTL_USBAEP_Pos) |
 80075f6:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80075fa:	430a      	orrs	r2, r1
 80075fc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80075fe:	3348      	adds	r3, #72	; 0x48
 8007600:	015b      	lsls	r3, r3, #5
 8007602:	440b      	add	r3, r1
 8007604:	601a      	str	r2, [r3, #0]

    dwc2->daintmsk |= (1 << (DAINTMSK_IEPM_Pos + epnum));
 8007606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007608:	f8d3 381c 	ldr.w	r3, [r3, #2076]	; 0x81c
 800760c:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8007610:	2101      	movs	r1, #1
 8007612:	fa01 f202 	lsl.w	r2, r1, r2
 8007616:	431a      	orrs	r2, r3
 8007618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800761a:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c
  }

  return true;
 800761e:	2301      	movs	r3, #1
}
 8007620:	4618      	mov	r0, r3
 8007622:	3738      	adds	r7, #56	; 0x38
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}
 8007628:	08008958 	.word	0x08008958
 800762c:	e000edf0 	.word	0xe000edf0
 8007630:	200014fc 	.word	0x200014fc
 8007634:	20001580 	.word	0x20001580

08007638 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8007638:	b480      	push	{r7}
 800763a:	b087      	sub	sp, #28
 800763c:	af00      	add	r7, sp, #0
 800763e:	4603      	mov	r3, r0
 8007640:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007642:	79fb      	ldrb	r3, [r7, #7]
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <dcd_edpt_close_all+0x8c>)
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	4413      	add	r3, r2
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	613b      	str	r3, [r7, #16]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 800764e:	79fb      	ldrb	r3, [r7, #7]
 8007650:	4a1c      	ldr	r2, [pc, #112]	; (80076c4 <dcd_edpt_close_all+0x8c>)
 8007652:	011b      	lsls	r3, r3, #4
 8007654:	4413      	add	r3, r2
 8007656:	3308      	adds	r3, #8
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	73fb      	strb	r3, [r7, #15]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8007662:	f8c3 281c 	str.w	r2, [r3, #2076]	; 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
 800766a:	e01e      	b.n	80076aa <dcd_edpt_close_all+0x72>
    // disable OUT endpoint
    dwc2->epout[n].doepctl = 0;
 800766c:	7dfb      	ldrb	r3, [r7, #23]
 800766e:	693a      	ldr	r2, [r7, #16]
 8007670:	3358      	adds	r3, #88	; 0x58
 8007672:	015b      	lsls	r3, r3, #5
 8007674:	4413      	add	r3, r2
 8007676:	2200      	movs	r2, #0
 8007678:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_OUT].max_size = 0;
 800767a:	7dfb      	ldrb	r3, [r7, #23]
 800767c:	4a12      	ldr	r2, [pc, #72]	; (80076c8 <dcd_edpt_close_all+0x90>)
 800767e:	015b      	lsls	r3, r3, #5
 8007680:	4413      	add	r3, r2
 8007682:	330a      	adds	r3, #10
 8007684:	2200      	movs	r2, #0
 8007686:	801a      	strh	r2, [r3, #0]

    // disable IN endpoint
    dwc2->epin[n].diepctl = 0;
 8007688:	7dfb      	ldrb	r3, [r7, #23]
 800768a:	693a      	ldr	r2, [r7, #16]
 800768c:	3348      	adds	r3, #72	; 0x48
 800768e:	015b      	lsls	r3, r3, #5
 8007690:	4413      	add	r3, r2
 8007692:	2200      	movs	r2, #0
 8007694:	601a      	str	r2, [r3, #0]
    xfer_status[n][TUSB_DIR_IN].max_size = 0;
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	4a0b      	ldr	r2, [pc, #44]	; (80076c8 <dcd_edpt_close_all+0x90>)
 800769a:	015b      	lsls	r3, r3, #5
 800769c:	4413      	add	r3, r2
 800769e:	331a      	adds	r3, #26
 80076a0:	2200      	movs	r2, #0
 80076a2:	801a      	strh	r2, [r3, #0]
  for (uint8_t n = 1; n < ep_count; n++) {
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	3301      	adds	r3, #1
 80076a8:	75fb      	strb	r3, [r7, #23]
 80076aa:	7dfa      	ldrb	r2, [r7, #23]
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d3dc      	bcc.n	800766c <dcd_edpt_close_all+0x34>
  }

  // reset allocated fifo IN
  _allocated_fifo_words_tx = 16;
 80076b2:	4b06      	ldr	r3, [pc, #24]	; (80076cc <dcd_edpt_close_all+0x94>)
 80076b4:	2210      	movs	r2, #16
 80076b6:	801a      	strh	r2, [r3, #0]
}
 80076b8:	bf00      	nop
 80076ba:	371c      	adds	r7, #28
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr
 80076c4:	08008958 	.word	0x08008958
 80076c8:	200014fc 	.word	0x200014fc
 80076cc:	20001580 	.word	0x20001580

080076d0 <dcd_edpt_xfer>:

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80076d0:	b590      	push	{r4, r7, lr}
 80076d2:	b089      	sub	sp, #36	; 0x24
 80076d4:	af02      	add	r7, sp, #8
 80076d6:	603a      	str	r2, [r7, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
 80076de:	460b      	mov	r3, r1
 80076e0:	71bb      	strb	r3, [r7, #6]
 80076e2:	4613      	mov	r3, r2
 80076e4:	80bb      	strh	r3, [r7, #4]
 80076e6:	79bb      	ldrb	r3, [r7, #6]
 80076e8:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80076ea:	7b3b      	ldrb	r3, [r7, #12]
 80076ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076f0:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 80076f2:	757b      	strb	r3, [r7, #21]
 80076f4:	79bb      	ldrb	r3, [r7, #6]
 80076f6:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80076f8:	7b7b      	ldrb	r3, [r7, #13]
 80076fa:	09db      	lsrs	r3, r3, #7
 80076fc:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80076fe:	753b      	strb	r3, [r7, #20]

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007700:	7d7a      	ldrb	r2, [r7, #21]
 8007702:	7d3b      	ldrb	r3, [r7, #20]
 8007704:	0052      	lsls	r2, r2, #1
 8007706:	4413      	add	r3, r2
 8007708:	011b      	lsls	r3, r3, #4
 800770a:	4a23      	ldr	r2, [pc, #140]	; (8007798 <dcd_edpt_xfer+0xc8>)
 800770c:	4413      	add	r3, r2
 800770e:	613b      	str	r3, [r7, #16]
  xfer->buffer = buffer;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	601a      	str	r2, [r3, #0]
  xfer->ff = NULL;
 8007716:	693b      	ldr	r3, [r7, #16]
 8007718:	2200      	movs	r2, #0
 800771a:	605a      	str	r2, [r3, #4]
  xfer->total_len = total_bytes;
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	88ba      	ldrh	r2, [r7, #4]
 8007720:	811a      	strh	r2, [r3, #8]

  // EP0 can only handle one packet
  if (epnum == 0) {
 8007722:	7d7b      	ldrb	r3, [r7, #21]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d110      	bne.n	800774a <dcd_edpt_xfer+0x7a>
    ep0_pending[dir] = total_bytes;
 8007728:	7d3b      	ldrb	r3, [r7, #20]
 800772a:	491c      	ldr	r1, [pc, #112]	; (800779c <dcd_edpt_xfer+0xcc>)
 800772c:	88ba      	ldrh	r2, [r7, #4]
 800772e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]

    // Schedule the first transaction for EP0 transfer
    edpt_schedule_packets(rhport, epnum, dir, 1, ep0_pending[dir]);
 8007732:	7d3b      	ldrb	r3, [r7, #20]
 8007734:	4a19      	ldr	r2, [pc, #100]	; (800779c <dcd_edpt_xfer+0xcc>)
 8007736:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800773a:	7d3a      	ldrb	r2, [r7, #20]
 800773c:	7d79      	ldrb	r1, [r7, #21]
 800773e:	79f8      	ldrb	r0, [r7, #7]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	2301      	movs	r3, #1
 8007744:	f7ff fae6 	bl	8006d14 <edpt_schedule_packets>
 8007748:	e020      	b.n	800778c <dcd_edpt_xfer+0xbc>
  } else {
    uint16_t num_packets = (total_bytes / xfer->max_size);
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	895b      	ldrh	r3, [r3, #10]
 800774e:	88ba      	ldrh	r2, [r7, #4]
 8007750:	fbb2 f3f3 	udiv	r3, r2, r3
 8007754:	82fb      	strh	r3, [r7, #22]
    uint16_t const short_packet_size = total_bytes % xfer->max_size;
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	895a      	ldrh	r2, [r3, #10]
 800775a:	88bb      	ldrh	r3, [r7, #4]
 800775c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007760:	fb01 f202 	mul.w	r2, r1, r2
 8007764:	1a9b      	subs	r3, r3, r2
 8007766:	81fb      	strh	r3, [r7, #14]

    // Zero-size packet is special case.
    if ((short_packet_size > 0) || (total_bytes == 0)) num_packets++;
 8007768:	89fb      	ldrh	r3, [r7, #14]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d102      	bne.n	8007774 <dcd_edpt_xfer+0xa4>
 800776e:	88bb      	ldrh	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d102      	bne.n	800777a <dcd_edpt_xfer+0xaa>
 8007774:	8afb      	ldrh	r3, [r7, #22]
 8007776:	3301      	adds	r3, #1
 8007778:	82fb      	strh	r3, [r7, #22]

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);
 800777a:	8afc      	ldrh	r4, [r7, #22]
 800777c:	7d3a      	ldrb	r2, [r7, #20]
 800777e:	7d79      	ldrb	r1, [r7, #21]
 8007780:	79f8      	ldrb	r0, [r7, #7]
 8007782:	88bb      	ldrh	r3, [r7, #4]
 8007784:	9300      	str	r3, [sp, #0]
 8007786:	4623      	mov	r3, r4
 8007788:	f7ff fac4 	bl	8006d14 <edpt_schedule_packets>
  }

  return true;
 800778c:	2301      	movs	r3, #1
}
 800778e:	4618      	mov	r0, r3
 8007790:	371c      	adds	r7, #28
 8007792:	46bd      	mov	sp, r7
 8007794:	bd90      	pop	{r4, r7, pc}
 8007796:	bf00      	nop
 8007798:	200014fc 	.word	0x200014fc
 800779c:	2000157c 	.word	0x2000157c

080077a0 <dcd_edpt_disable>:
  edpt_schedule_packets(rhport, epnum, dir, num_packets, total_bytes);

  return true;
}

static void dcd_edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 80077a0:	b480      	push	{r7}
 80077a2:	b089      	sub	sp, #36	; 0x24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	4603      	mov	r3, r0
 80077a8:	71fb      	strb	r3, [r7, #7]
 80077aa:	460b      	mov	r3, r1
 80077ac:	71bb      	strb	r3, [r7, #6]
 80077ae:	4613      	mov	r3, r2
 80077b0:	717b      	strb	r3, [r7, #5]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	4a6e      	ldr	r2, [pc, #440]	; (8007970 <dcd_edpt_disable+0x1d0>)
 80077b6:	011b      	lsls	r3, r3, #4
 80077b8:	4413      	add	r3, r2
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	61fb      	str	r3, [r7, #28]
 80077be:	79bb      	ldrb	r3, [r7, #6]
 80077c0:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80077c2:	7bbb      	ldrb	r3, [r7, #14]
 80077c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077c8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80077ca:	76fb      	strb	r3, [r7, #27]
 80077cc:	79bb      	ldrb	r3, [r7, #6]
 80077ce:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80077d0:	7bfb      	ldrb	r3, [r7, #15]
 80077d2:	09db      	lsrs	r3, r3, #7
 80077d4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80077d6:	76bb      	strb	r3, [r7, #26]

  if (dir == TUSB_DIR_IN) {
 80077d8:	7ebb      	ldrb	r3, [r7, #26]
 80077da:	2b01      	cmp	r3, #1
 80077dc:	d167      	bne.n	80078ae <dcd_edpt_disable+0x10e>
    dwc2_epin_t* epin = dwc2->epin;
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e4:	613b      	str	r3, [r7, #16]

    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(epin[epnum].diepctl & DIEPCTL_EPENA)) {
 80077e6:	7efb      	ldrb	r3, [r7, #27]
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d006      	beq.n	80077fa <dcd_edpt_disable+0x5a>
 80077ec:	7efb      	ldrb	r3, [r7, #27]
 80077ee:	015b      	lsls	r3, r3, #5
 80077f0:	693a      	ldr	r2, [r7, #16]
 80077f2:	4413      	add	r3, r2
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	db13      	blt.n	8007822 <dcd_edpt_disable+0x82>
      epin[epnum].diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 80077fa:	7efb      	ldrb	r3, [r7, #27]
 80077fc:	015b      	lsls	r3, r3, #5
 80077fe:	693a      	ldr	r2, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	797b      	ldrb	r3, [r7, #5]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <dcd_edpt_disable+0x70>
 800780a:	f04f 6102 	mov.w	r1, #136314880	; 0x8200000
 800780e:	e001      	b.n	8007814 <dcd_edpt_disable+0x74>
 8007810:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8007814:	7efb      	ldrb	r3, [r7, #27]
 8007816:	015b      	lsls	r3, r3, #5
 8007818:	6938      	ldr	r0, [r7, #16]
 800781a:	4403      	add	r3, r0
 800781c:	430a      	orrs	r2, r1
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	e037      	b.n	8007892 <dcd_edpt_disable+0xf2>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      epin[epnum].diepctl |= DIEPCTL_SNAK;
 8007822:	7efb      	ldrb	r3, [r7, #27]
 8007824:	015b      	lsls	r3, r3, #5
 8007826:	693a      	ldr	r2, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	7efb      	ldrb	r3, [r7, #27]
 800782e:	015b      	lsls	r3, r3, #5
 8007830:	6939      	ldr	r1, [r7, #16]
 8007832:	440b      	add	r3, r1
 8007834:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 8007838:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_INEPNE) == 0) {}
 800783a:	bf00      	nop
 800783c:	7efb      	ldrb	r3, [r7, #27]
 800783e:	015b      	lsls	r3, r3, #5
 8007840:	693a      	ldr	r2, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800784a:	2b00      	cmp	r3, #0
 800784c:	d0f6      	beq.n	800783c <dcd_edpt_disable+0x9c>

      // Disable the endpoint.
      epin[epnum].diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 800784e:	7efb      	ldrb	r3, [r7, #27]
 8007850:	015b      	lsls	r3, r3, #5
 8007852:	693a      	ldr	r2, [r7, #16]
 8007854:	4413      	add	r3, r2
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	797b      	ldrb	r3, [r7, #5]
 800785a:	2b00      	cmp	r3, #0
 800785c:	d001      	beq.n	8007862 <dcd_edpt_disable+0xc2>
 800785e:	4945      	ldr	r1, [pc, #276]	; (8007974 <dcd_edpt_disable+0x1d4>)
 8007860:	e001      	b.n	8007866 <dcd_edpt_disable+0xc6>
 8007862:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007866:	7efb      	ldrb	r3, [r7, #27]
 8007868:	015b      	lsls	r3, r3, #5
 800786a:	6938      	ldr	r0, [r7, #16]
 800786c:	4403      	add	r3, r0
 800786e:	430a      	orrs	r2, r1
 8007870:	601a      	str	r2, [r3, #0]
      while ((epin[epnum].diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8007872:	bf00      	nop
 8007874:	7efb      	ldrb	r3, [r7, #27]
 8007876:	015b      	lsls	r3, r3, #5
 8007878:	693a      	ldr	r2, [r7, #16]
 800787a:	4413      	add	r3, r2
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	f003 0302 	and.w	r3, r3, #2
 8007882:	2b00      	cmp	r3, #0
 8007884:	d0f6      	beq.n	8007874 <dcd_edpt_disable+0xd4>

      epin[epnum].diepint = DIEPINT_EPDISD;
 8007886:	7efb      	ldrb	r3, [r7, #27]
 8007888:	015b      	lsls	r3, r3, #5
 800788a:	693a      	ldr	r2, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	2202      	movs	r2, #2
 8007890:	609a      	str	r2, [r3, #8]
    }

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dwc2->grstctl = ((epnum << GRSTCTL_TXFNUM_Pos) | GRSTCTL_TXFFLSH);
 8007892:	7efb      	ldrb	r3, [r7, #27]
 8007894:	019b      	lsls	r3, r3, #6
 8007896:	f043 0220 	orr.w	r2, r3, #32
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	611a      	str	r2, [r3, #16]
    while ((dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) != 0) {}
 800789e:	bf00      	nop
 80078a0:	69fb      	ldr	r3, [r7, #28]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d1f9      	bne.n	80078a0 <dcd_edpt_disable+0x100>

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
    }
  }
}
 80078ac:	e059      	b.n	8007962 <dcd_edpt_disable+0x1c2>
    dwc2_epout_t* epout = dwc2->epout;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b4:	617b      	str	r3, [r7, #20]
    if ((epnum == 0) || !(epout[epnum].doepctl & DOEPCTL_EPENA)) {
 80078b6:	7efb      	ldrb	r3, [r7, #27]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <dcd_edpt_disable+0x12a>
 80078bc:	7efb      	ldrb	r3, [r7, #27]
 80078be:	015b      	lsls	r3, r3, #5
 80078c0:	697a      	ldr	r2, [r7, #20]
 80078c2:	4413      	add	r3, r2
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	db12      	blt.n	80078f0 <dcd_edpt_disable+0x150>
      epout[epnum].doepctl |= stall ? DOEPCTL_STALL : 0;
 80078ca:	7efb      	ldrb	r3, [r7, #27]
 80078cc:	015b      	lsls	r3, r3, #5
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	4413      	add	r3, r2
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	797b      	ldrb	r3, [r7, #5]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d002      	beq.n	80078e0 <dcd_edpt_disable+0x140>
 80078da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078de:	e000      	b.n	80078e2 <dcd_edpt_disable+0x142>
 80078e0:	2100      	movs	r1, #0
 80078e2:	7efb      	ldrb	r3, [r7, #27]
 80078e4:	015b      	lsls	r3, r3, #5
 80078e6:	6978      	ldr	r0, [r7, #20]
 80078e8:	4403      	add	r3, r0
 80078ea:	430a      	orrs	r2, r1
 80078ec:	601a      	str	r2, [r3, #0]
}
 80078ee:	e038      	b.n	8007962 <dcd_edpt_disable+0x1c2>
      dwc2->dctl |= DCTL_SGONAK;
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 80078f6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80078fa:	69fb      	ldr	r3, [r7, #28]
 80078fc:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 8007900:	bf00      	nop
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	695b      	ldr	r3, [r3, #20]
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d0f9      	beq.n	8007902 <dcd_edpt_disable+0x162>
      epout[epnum].doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800790e:	7efb      	ldrb	r3, [r7, #27]
 8007910:	015b      	lsls	r3, r3, #5
 8007912:	697a      	ldr	r2, [r7, #20]
 8007914:	4413      	add	r3, r2
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	797b      	ldrb	r3, [r7, #5]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d001      	beq.n	8007922 <dcd_edpt_disable+0x182>
 800791e:	4915      	ldr	r1, [pc, #84]	; (8007974 <dcd_edpt_disable+0x1d4>)
 8007920:	e001      	b.n	8007926 <dcd_edpt_disable+0x186>
 8007922:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8007926:	7efb      	ldrb	r3, [r7, #27]
 8007928:	015b      	lsls	r3, r3, #5
 800792a:	6978      	ldr	r0, [r7, #20]
 800792c:	4403      	add	r3, r0
 800792e:	430a      	orrs	r2, r1
 8007930:	601a      	str	r2, [r3, #0]
      while ((epout[epnum].doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8007932:	bf00      	nop
 8007934:	7efb      	ldrb	r3, [r7, #27]
 8007936:	015b      	lsls	r3, r3, #5
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4413      	add	r3, r2
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	f003 0302 	and.w	r3, r3, #2
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0f6      	beq.n	8007934 <dcd_edpt_disable+0x194>
      epout[epnum].doepint = DOEPINT_EPDISD;
 8007946:	7efb      	ldrb	r3, [r7, #27]
 8007948:	015b      	lsls	r3, r3, #5
 800794a:	697a      	ldr	r2, [r7, #20]
 800794c:	4413      	add	r3, r2
 800794e:	2202      	movs	r2, #2
 8007950:	609a      	str	r2, [r3, #8]
      dwc2->dctl |= DCTL_CGONAK;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
 8007958:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	f8c3 2804 	str.w	r2, [r3, #2052]	; 0x804
}
 8007962:	bf00      	nop
 8007964:	3724      	adds	r7, #36	; 0x24
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	08008958 	.word	0x08008958
 8007974:	40200000 	.word	0x40200000

08007978 <dcd_edpt_stall>:
  } else {
    _out_ep_closed = true;     // Set flag such that RX FIFO gets reduced in size once RX FIFO is empty
  }
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	460a      	mov	r2, r1
 8007982:	71fb      	strb	r3, [r7, #7]
 8007984:	4613      	mov	r3, r2
 8007986:	71bb      	strb	r3, [r7, #6]
  dcd_edpt_disable(rhport, ep_addr, true);
 8007988:	79b9      	ldrb	r1, [r7, #6]
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	2201      	movs	r2, #1
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff ff06 	bl	80077a0 <dcd_edpt_disable>
}
 8007994:	bf00      	nop
 8007996:	3708      	adds	r7, #8
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800799c:	b480      	push	{r7}
 800799e:	b085      	sub	sp, #20
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	4603      	mov	r3, r0
 80079a4:	460a      	mov	r2, r1
 80079a6:	71fb      	strb	r3, [r7, #7]
 80079a8:	4613      	mov	r3, r2
 80079aa:	71bb      	strb	r3, [r7, #6]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80079ac:	79fb      	ldrb	r3, [r7, #7]
 80079ae:	4a2a      	ldr	r2, [pc, #168]	; (8007a58 <dcd_edpt_clear_stall+0xbc>)
 80079b0:	011b      	lsls	r3, r3, #4
 80079b2:	4413      	add	r3, r2
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	60fb      	str	r3, [r7, #12]
 80079b8:	79bb      	ldrb	r3, [r7, #6]
 80079ba:	723b      	strb	r3, [r7, #8]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80079bc:	7a3b      	ldrb	r3, [r7, #8]
 80079be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079c2:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80079c4:	72fb      	strb	r3, [r7, #11]
 80079c6:	79bb      	ldrb	r3, [r7, #6]
 80079c8:	727b      	strb	r3, [r7, #9]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80079ca:	7a7b      	ldrb	r3, [r7, #9]
 80079cc:	09db      	lsrs	r3, r3, #7
 80079ce:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80079d0:	72bb      	strb	r3, [r7, #10]

  // Clear stall and reset data toggle
  if (dir == TUSB_DIR_IN) {
 80079d2:	7abb      	ldrb	r3, [r7, #10]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d11c      	bne.n	8007a12 <dcd_edpt_clear_stall+0x76>
    dwc2->epin[epnum].diepctl &= ~DIEPCTL_STALL;
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	3348      	adds	r3, #72	; 0x48
 80079de:	015b      	lsls	r3, r3, #5
 80079e0:	4413      	add	r3, r2
 80079e2:	681a      	ldr	r2, [r3, #0]
 80079e4:	7afb      	ldrb	r3, [r7, #11]
 80079e6:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	3348      	adds	r3, #72	; 0x48
 80079ee:	015b      	lsls	r3, r3, #5
 80079f0:	440b      	add	r3, r1
 80079f2:	601a      	str	r2, [r3, #0]
    dwc2->epin[epnum].diepctl |= DIEPCTL_SD0PID_SEVNFRM;
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	68fa      	ldr	r2, [r7, #12]
 80079f8:	3348      	adds	r3, #72	; 0x48
 80079fa:	015b      	lsls	r3, r3, #5
 80079fc:	4413      	add	r3, r2
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	7afb      	ldrb	r3, [r7, #11]
 8007a02:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a06:	68f9      	ldr	r1, [r7, #12]
 8007a08:	3348      	adds	r3, #72	; 0x48
 8007a0a:	015b      	lsls	r3, r3, #5
 8007a0c:	440b      	add	r3, r1
 8007a0e:	601a      	str	r2, [r3, #0]
  } else {
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
  }
}
 8007a10:	e01b      	b.n	8007a4a <dcd_edpt_clear_stall+0xae>
    dwc2->epout[epnum].doepctl &= ~DOEPCTL_STALL;
 8007a12:	7afb      	ldrb	r3, [r7, #11]
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	3358      	adds	r3, #88	; 0x58
 8007a18:	015b      	lsls	r3, r3, #5
 8007a1a:	4413      	add	r3, r2
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	7afb      	ldrb	r3, [r7, #11]
 8007a20:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8007a24:	68f9      	ldr	r1, [r7, #12]
 8007a26:	3358      	adds	r3, #88	; 0x58
 8007a28:	015b      	lsls	r3, r3, #5
 8007a2a:	440b      	add	r3, r1
 8007a2c:	601a      	str	r2, [r3, #0]
    dwc2->epout[epnum].doepctl |= DOEPCTL_SD0PID_SEVNFRM;
 8007a2e:	7afb      	ldrb	r3, [r7, #11]
 8007a30:	68fa      	ldr	r2, [r7, #12]
 8007a32:	3358      	adds	r3, #88	; 0x58
 8007a34:	015b      	lsls	r3, r3, #5
 8007a36:	4413      	add	r3, r2
 8007a38:	681a      	ldr	r2, [r3, #0]
 8007a3a:	7afb      	ldrb	r3, [r7, #11]
 8007a3c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a40:	68f9      	ldr	r1, [r7, #12]
 8007a42:	3358      	adds	r3, #88	; 0x58
 8007a44:	015b      	lsls	r3, r3, #5
 8007a46:	440b      	add	r3, r1
 8007a48:	601a      	str	r2, [r3, #0]
}
 8007a4a:	bf00      	nop
 8007a4c:	3714      	adds	r7, #20
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a54:	4770      	bx	lr
 8007a56:	bf00      	nop
 8007a58:	08008958 	.word	0x08008958

08007a5c <read_fifo_packet>:

/*------------------------------------------------------------------*/

// Read a single data packet from receive FIFO
static void read_fifo_packet(uint8_t rhport, uint8_t* dst, uint16_t len) {
 8007a5c:	b480      	push	{r7}
 8007a5e:	b08d      	sub	sp, #52	; 0x34
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	4603      	mov	r3, r0
 8007a64:	6039      	str	r1, [r7, #0]
 8007a66:	71fb      	strb	r3, [r7, #7]
 8007a68:	4613      	mov	r3, r2
 8007a6a:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007a6c:	79fb      	ldrb	r3, [r7, #7]
 8007a6e:	4a27      	ldr	r2, [pc, #156]	; (8007b0c <read_fifo_packet+0xb0>)
 8007a70:	011b      	lsls	r3, r3, #4
 8007a72:	4413      	add	r3, r2
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile const uint32_t* rx_fifo = dwc2->fifo[0];
 8007a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a7e:	627b      	str	r3, [r7, #36]	; 0x24

  // Reading full available 32 bit words from fifo
  uint16_t full_words = len >> 2;
 8007a80:	88bb      	ldrh	r3, [r7, #4]
 8007a82:	089b      	lsrs	r3, r3, #2
 8007a84:	85fb      	strh	r3, [r7, #46]	; 0x2e
  while (full_words--) {
 8007a86:	e00b      	b.n	8007aa0 <read_fifo_packet+0x44>
    tu_unaligned_write32(dst, *rx_fifo);
 8007a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	61ba      	str	r2, [r7, #24]
 8007a90:	617b      	str	r3, [r7, #20]
  *((uint32_t *) mem) = value;
 8007a92:	69bb      	ldr	r3, [r7, #24]
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	601a      	str	r2, [r3, #0]
}
 8007a98:	bf00      	nop
    dst += 4;
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 8007aa0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007aa2:	1e5a      	subs	r2, r3, #1
 8007aa4:	85fa      	strh	r2, [r7, #46]	; 0x2e
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1ee      	bne.n	8007a88 <read_fifo_packet+0x2c>
  }

  // Read the remaining 1-3 bytes from fifo
  uint8_t const bytes_rem = len & 0x03;
 8007aaa:	88bb      	ldrh	r3, [r7, #4]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f003 0303 	and.w	r3, r3, #3
 8007ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (bytes_rem != 0) {
 8007ab6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d020      	beq.n	8007b00 <read_fifo_packet+0xa4>
    uint32_t const tmp = *rx_fifo;
 8007abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) dst[1] = tu_u32_byte1(tmp);
 8007ad0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ad4:	2b01      	cmp	r3, #1
 8007ad6:	d907      	bls.n	8007ae8 <read_fifo_packet+0x8c>
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	3301      	adds	r3, #1
 8007adc:	69fa      	ldr	r2, [r7, #28]
 8007ade:	60fa      	str	r2, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8007ae0:	68fa      	ldr	r2, [r7, #12]
 8007ae2:	0a12      	lsrs	r2, r2, #8
 8007ae4:	b2d2      	uxtb	r2, r2
 8007ae6:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 2) dst[2] = tu_u32_byte2(tmp);
 8007ae8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007aec:	2b02      	cmp	r3, #2
 8007aee:	d907      	bls.n	8007b00 <read_fifo_packet+0xa4>
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	3302      	adds	r3, #2
 8007af4:	69fa      	ldr	r2, [r7, #28]
 8007af6:	60ba      	str	r2, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 8007af8:	68ba      	ldr	r2, [r7, #8]
 8007afa:	0c12      	lsrs	r2, r2, #16
 8007afc:	b2d2      	uxtb	r2, r2
 8007afe:	701a      	strb	r2, [r3, #0]
  }
}
 8007b00:	bf00      	nop
 8007b02:	3734      	adds	r7, #52	; 0x34
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	08008958 	.word	0x08008958

08007b10 <write_fifo_packet>:

// Write a single data packet to EPIN FIFO
static void write_fifo_packet(uint8_t rhport, uint8_t fifo_num, uint8_t const* src, uint16_t len) {
 8007b10:	b480      	push	{r7}
 8007b12:	b089      	sub	sp, #36	; 0x24
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	603a      	str	r2, [r7, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	71fb      	strb	r3, [r7, #7]
 8007b1e:	460b      	mov	r3, r1
 8007b20:	71bb      	strb	r3, [r7, #6]
 8007b22:	4613      	mov	r3, r2
 8007b24:	80bb      	strh	r3, [r7, #4]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007b26:	79fb      	ldrb	r3, [r7, #7]
 8007b28:	4a23      	ldr	r2, [pc, #140]	; (8007bb8 <write_fifo_packet+0xa8>)
 8007b2a:	011b      	lsls	r3, r3, #4
 8007b2c:	4413      	add	r3, r2
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	617b      	str	r3, [r7, #20]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 8007b32:	79bb      	ldrb	r3, [r7, #6]
 8007b34:	3301      	adds	r3, #1
 8007b36:	031b      	lsls	r3, r3, #12
 8007b38:	697a      	ldr	r2, [r7, #20]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	613b      	str	r3, [r7, #16]

  // Pushing full available 32 bit words to fifo
  uint16_t full_words = len >> 2;
 8007b3e:	88bb      	ldrh	r3, [r7, #4]
 8007b40:	089b      	lsrs	r3, r3, #2
 8007b42:	83fb      	strh	r3, [r7, #30]
  while (full_words--) {
 8007b44:	e008      	b.n	8007b58 <write_fifo_packet+0x48>
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	60bb      	str	r3, [r7, #8]
  return *((uint32_t const *) mem);
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8007b4e:	693b      	ldr	r3, [r7, #16]
 8007b50:	601a      	str	r2, [r3, #0]
    src += 4;
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	3304      	adds	r3, #4
 8007b56:	603b      	str	r3, [r7, #0]
  while (full_words--) {
 8007b58:	8bfb      	ldrh	r3, [r7, #30]
 8007b5a:	1e5a      	subs	r2, r3, #1
 8007b5c:	83fa      	strh	r2, [r7, #30]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1f1      	bne.n	8007b46 <write_fifo_packet+0x36>
  }

  // Write the remaining 1-3 bytes into fifo
  uint8_t const bytes_rem = len & 0x03;
 8007b62:	88bb      	ldrh	r3, [r7, #4]
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	f003 0303 	and.w	r3, r3, #3
 8007b6a:	73fb      	strb	r3, [r7, #15]
  if (bytes_rem) {
 8007b6c:	7bfb      	ldrb	r3, [r7, #15]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d01b      	beq.n	8007baa <write_fifo_packet+0x9a>
    uint32_t tmp_word = src[0];
 8007b72:	683b      	ldr	r3, [r7, #0]
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 1) tmp_word |= (src[1] << 8);
 8007b78:	7bfb      	ldrb	r3, [r7, #15]
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d907      	bls.n	8007b8e <write_fifo_packet+0x7e>
 8007b7e:	683b      	ldr	r3, [r7, #0]
 8007b80:	3301      	adds	r3, #1
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	021b      	lsls	r3, r3, #8
 8007b86:	461a      	mov	r2, r3
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	61bb      	str	r3, [r7, #24]
    if (bytes_rem > 2) tmp_word |= (src[2] << 16);
 8007b8e:	7bfb      	ldrb	r3, [r7, #15]
 8007b90:	2b02      	cmp	r3, #2
 8007b92:	d907      	bls.n	8007ba4 <write_fifo_packet+0x94>
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	3302      	adds	r3, #2
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	461a      	mov	r2, r3
 8007b9e:	69bb      	ldr	r3, [r7, #24]
 8007ba0:	4313      	orrs	r3, r2
 8007ba2:	61bb      	str	r3, [r7, #24]

    *tx_fifo = tmp_word;
 8007ba4:	693b      	ldr	r3, [r7, #16]
 8007ba6:	69ba      	ldr	r2, [r7, #24]
 8007ba8:	601a      	str	r2, [r3, #0]
  }
}
 8007baa:	bf00      	nop
 8007bac:	3724      	adds	r7, #36	; 0x24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr
 8007bb6:	bf00      	nop
 8007bb8:	08008958 	.word	0x08008958

08007bbc <handle_rxflvl_irq>:

static void handle_rxflvl_irq(uint8_t rhport) {
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b08c      	sub	sp, #48	; 0x30
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007bc6:	79fb      	ldrb	r3, [r7, #7]
 8007bc8:	4a5d      	ldr	r2, [pc, #372]	; (8007d40 <handle_rxflvl_irq+0x184>)
 8007bca:	011b      	lsls	r3, r3, #4
 8007bcc:	4413      	add	r3, r2
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  volatile uint32_t const* rx_fifo = dwc2->fifo[0];
 8007bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007bd8:	627b      	str	r3, [r7, #36]	; 0x24

  // Pop control word off FIFO
  uint32_t const ctl_word = dwc2->grxstsp;
 8007bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bdc:	6a1b      	ldr	r3, [r3, #32]
 8007bde:	623b      	str	r3, [r7, #32]
  uint8_t const pktsts = (ctl_word & GRXSTSP_PKTSTS_Msk) >> GRXSTSP_PKTSTS_Pos;
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	0c5b      	lsrs	r3, r3, #17
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	f003 030f 	and.w	r3, r3, #15
 8007bea:	77fb      	strb	r3, [r7, #31]
  uint8_t const epnum = (ctl_word & GRXSTSP_EPNUM_Msk) >> GRXSTSP_EPNUM_Pos;
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 030f 	and.w	r3, r3, #15
 8007bf4:	77bb      	strb	r3, [r7, #30]
  uint16_t const bcnt = (ctl_word & GRXSTSP_BCNT_Msk) >> GRXSTSP_BCNT_Pos;
 8007bf6:	6a3b      	ldr	r3, [r7, #32]
 8007bf8:	091b      	lsrs	r3, r3, #4
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007c00:	83bb      	strh	r3, [r7, #28]

  dwc2_epout_t* epout = &dwc2->epout[epnum];
 8007c02:	7fbb      	ldrb	r3, [r7, #30]
 8007c04:	3358      	adds	r3, #88	; 0x58
 8007c06:	015b      	lsls	r3, r3, #5
 8007c08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007c0a:	4413      	add	r3, r2
 8007c0c:	61bb      	str	r3, [r7, #24]
//  TU_LOG_LOCATION();
//  TU_LOG(DWC2_DEBUG, "  EP %02X, Byte Count %u, %s\r\n", epnum, bcnt, pktsts_str[pktsts]);
//  TU_LOG(DWC2_DEBUG, "  daint = %08lX, doepint = %04X\r\n", (unsigned long) dwc2->daint, (unsigned int) epout->doepint);
//#endif

  switch (pktsts) {
 8007c0e:	7ffb      	ldrb	r3, [r7, #31]
 8007c10:	3b01      	subs	r3, #1
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	d87e      	bhi.n	8007d14 <handle_rxflvl_irq+0x158>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <handle_rxflvl_irq+0x60>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007d29 	.word	0x08007d29
 8007c20:	08007c55 	.word	0x08007c55
 8007c24:	08007ccf 	.word	0x08007ccf
 8007c28:	08007c47 	.word	0x08007c47
 8007c2c:	08007d15 	.word	0x08007d15
 8007c30:	08007c35 	.word	0x08007c35
    case GRXSTS_PKTSTS_SETUPRX:
      // Setup packet received

      // We can receive up to three setup packets in succession, but
      // only the last one is valid.
      _setup_packet[0] = (*rx_fifo);
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	4a42      	ldr	r2, [pc, #264]	; (8007d44 <handle_rxflvl_irq+0x188>)
 8007c3a:	6013      	str	r3, [r2, #0]
      _setup_packet[1] = (*rx_fifo);
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a40      	ldr	r2, [pc, #256]	; (8007d44 <handle_rxflvl_irq+0x188>)
 8007c42:	6053      	str	r3, [r2, #4]
      break;
 8007c44:	e077      	b.n	8007d36 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_SETUPDONE:
      // Setup packet done (Interrupt)
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f043 42c0 	orr.w	r2, r3, #1610612736	; 0x60000000
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	611a      	str	r2, [r3, #16]
      break;
 8007c52:	e070      	b.n	8007d36 <handle_rxflvl_irq+0x17a>

    case GRXSTS_PKTSTS_OUTRX: {
      // Out packet received
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8007c54:	7fbb      	ldrb	r3, [r7, #30]
 8007c56:	015b      	lsls	r3, r3, #5
 8007c58:	4a3b      	ldr	r2, [pc, #236]	; (8007d48 <handle_rxflvl_irq+0x18c>)
 8007c5a:	4413      	add	r3, r2
 8007c5c:	613b      	str	r3, [r7, #16]

      // Read packet off RxFIFO
      if (xfer->ff) {
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <handle_rxflvl_irq+0xba>
        // Ring buffer
        tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, bcnt);
 8007c66:	693b      	ldr	r3, [r7, #16]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	8bba      	ldrh	r2, [r7, #28]
 8007c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fd f8a4 	bl	8004dbc <tu_fifo_write_n_const_addr_full_words>
 8007c74:	e00c      	b.n	8007c90 <handle_rxflvl_irq+0xd4>
      } else {
        // Linear buffer
        read_fifo_packet(rhport, xfer->buffer, bcnt);
 8007c76:	693b      	ldr	r3, [r7, #16]
 8007c78:	6819      	ldr	r1, [r3, #0]
 8007c7a:	8bba      	ldrh	r2, [r7, #28]
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff feec 	bl	8007a5c <read_fifo_packet>

        // Increment pointer to xfer data
        xfer->buffer += bcnt;
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	8bbb      	ldrh	r3, [r7, #28]
 8007c8a:	441a      	add	r2, r3
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	601a      	str	r2, [r3, #0]
      }

      // Truncate transfer length in case of short packet
      if (bcnt < xfer->max_size) {
 8007c90:	693b      	ldr	r3, [r7, #16]
 8007c92:	895b      	ldrh	r3, [r3, #10]
 8007c94:	8bba      	ldrh	r2, [r7, #28]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d248      	bcs.n	8007d2c <handle_rxflvl_irq+0x170>
        xfer->total_len -= (epout->doeptsiz & DOEPTSIZ_XFRSIZ_Msk) >> DOEPTSIZ_XFRSIZ_Pos;
 8007c9a:	69bb      	ldr	r3, [r7, #24]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f3c3 0112 	ubfx	r1, r3, #0, #19
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	891a      	ldrh	r2, [r3, #8]
 8007ca6:	b28b      	uxth	r3, r1
 8007ca8:	1ad3      	subs	r3, r2, r3
 8007caa:	b29a      	uxth	r2, r3
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	811a      	strh	r2, [r3, #8]
        if (epnum == 0) {
 8007cb0:	7fbb      	ldrb	r3, [r7, #30]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d13a      	bne.n	8007d2c <handle_rxflvl_irq+0x170>
          xfer->total_len -= ep0_pending[TUSB_DIR_OUT];
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	891a      	ldrh	r2, [r3, #8]
 8007cba:	4b24      	ldr	r3, [pc, #144]	; (8007d4c <handle_rxflvl_irq+0x190>)
 8007cbc:	881b      	ldrh	r3, [r3, #0]
 8007cbe:	1ad3      	subs	r3, r2, r3
 8007cc0:	b29a      	uxth	r2, r3
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	811a      	strh	r2, [r3, #8]
          ep0_pending[TUSB_DIR_OUT] = 0;
 8007cc6:	4b21      	ldr	r3, [pc, #132]	; (8007d4c <handle_rxflvl_irq+0x190>)
 8007cc8:	2200      	movs	r2, #0
 8007cca:	801a      	strh	r2, [r3, #0]
        }
      }
    }
      break;
 8007ccc:	e02e      	b.n	8007d2c <handle_rxflvl_irq+0x170>
      // Occurred on STM32L47 with dwc2 version 3.10a but not found on other version like 2.80a or 3.30a
      // May (or not) be 3.10a specific feature/bug or depending on MCU configuration
      // XFRC complete is additionally generated when
      // - setup packet is received
      // - complete the data stage of control write is complete
      if ((epnum == 0) && (bcnt == 0) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8007cce:	7fbb      	ldrb	r3, [r7, #30]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d12d      	bne.n	8007d30 <handle_rxflvl_irq+0x174>
 8007cd4:	8bbb      	ldrh	r3, [r7, #28]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d12a      	bne.n	8007d30 <handle_rxflvl_irq+0x174>
 8007cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	4a1c      	ldr	r2, [pc, #112]	; (8007d50 <handle_rxflvl_irq+0x194>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d925      	bls.n	8007d30 <handle_rxflvl_irq+0x174>
        uint32_t doepint = epout->doepint;
 8007ce4:	69bb      	ldr	r3, [r7, #24]
 8007ce6:	689b      	ldr	r3, [r3, #8]
 8007ce8:	617b      	str	r3, [r7, #20]

        if (doepint & (DOEPINT_STPKTRX | DOEPINT_OTEPSPR)) {
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	f248 0320 	movw	r3, #32800	; 0x8020
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d01c      	beq.n	8007d30 <handle_rxflvl_irq+0x174>
          // skip this "no-data" transfer complete event
          // Note: STPKTRX will be clear later by setup received handler
          uint32_t clear_flags = DOEPINT_XFRC;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c

          if (doepint & DOEPINT_OTEPSPR) clear_flags |= DOEPINT_OTEPSPR;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	f003 0320 	and.w	r3, r3, #32
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <handle_rxflvl_irq+0x150>
 8007d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d06:	f043 0320 	orr.w	r3, r3, #32
 8007d0a:	62fb      	str	r3, [r7, #44]	; 0x2c

          epout->doepint = clear_flags;
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d10:	609a      	str	r2, [r3, #8]

          // TU_LOG(DWC2_DEBUG, "  FIX extra transfer complete on setup/data compete\r\n");
        }
      }
      break;
 8007d12:	e00d      	b.n	8007d30 <handle_rxflvl_irq+0x174>

    default:    // Invalid
      TU_BREAKPOINT();
 8007d14:	4b0f      	ldr	r3, [pc, #60]	; (8007d54 <handle_rxflvl_irq+0x198>)
 8007d16:	60fb      	str	r3, [r7, #12]
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f003 0301 	and.w	r3, r3, #1
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d007      	beq.n	8007d34 <handle_rxflvl_irq+0x178>
 8007d24:	be00      	bkpt	0x0000
      break;
 8007d26:	e005      	b.n	8007d34 <handle_rxflvl_irq+0x178>
      break;
 8007d28:	bf00      	nop
 8007d2a:	e004      	b.n	8007d36 <handle_rxflvl_irq+0x17a>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e002      	b.n	8007d36 <handle_rxflvl_irq+0x17a>
      break;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <handle_rxflvl_irq+0x17a>
      break;
 8007d34:	bf00      	nop
  }
}
 8007d36:	bf00      	nop
 8007d38:	3730      	adds	r7, #48	; 0x30
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	08008958 	.word	0x08008958
 8007d44:	200014f4 	.word	0x200014f4
 8007d48:	200014fc 	.word	0x200014fc
 8007d4c:	2000157c 	.word	0x2000157c
 8007d50:	4f543009 	.word	0x4f543009
 8007d54:	e000edf0 	.word	0xe000edf0

08007d58 <handle_epout_irq>:

static void handle_epout_irq(uint8_t rhport) {
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b096      	sub	sp, #88	; 0x58
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	4603      	mov	r3, r0
 8007d60:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007d62:	79fb      	ldrb	r3, [r7, #7]
 8007d64:	4a60      	ldr	r2, [pc, #384]	; (8007ee8 <handle_epout_irq+0x190>)
 8007d66:	011b      	lsls	r3, r3, #4
 8007d68:	4413      	add	r3, r2
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	647b      	str	r3, [r7, #68]	; 0x44
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8007d6e:	79fb      	ldrb	r3, [r7, #7]
 8007d70:	4a5d      	ldr	r2, [pc, #372]	; (8007ee8 <handle_epout_irq+0x190>)
 8007d72:	011b      	lsls	r3, r3, #4
 8007d74:	4413      	add	r3, r2
 8007d76:	3308      	adds	r3, #8
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  // DAINT for a given EP clears when DOEPINTx is cleared.
  // OEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007d84:	e0a4      	b.n	8007ed0 <handle_epout_irq+0x178>
    if (dwc2->daint & TU_BIT(DAINT_OEPINT_Pos + n)) {
 8007d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d88:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8007d8c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007d90:	3310      	adds	r3, #16
 8007d92:	fa22 f303 	lsr.w	r3, r2, r3
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	f000 8093 	beq.w	8007ec6 <handle_epout_irq+0x16e>
      dwc2_epout_t* epout = &dwc2->epout[n];
 8007da0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007da4:	3358      	adds	r3, #88	; 0x58
 8007da6:	015b      	lsls	r3, r3, #5
 8007da8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007daa:	4413      	add	r3, r2
 8007dac:	63fb      	str	r3, [r7, #60]	; 0x3c

      uint32_t const doepint = epout->doepint;
 8007dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db0:	689b      	ldr	r3, [r3, #8]
 8007db2:	63bb      	str	r3, [r7, #56]	; 0x38

      // SETUP packet Setup Phase done.
      if (doepint & DOEPINT_STUP) {
 8007db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db6:	f003 0308 	and.w	r3, r3, #8
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d034      	beq.n	8007e28 <handle_epout_irq+0xd0>
        uint32_t clear_flag = DOEPINT_STUP;
 8007dbe:	2308      	movs	r3, #8
 8007dc0:	64bb      	str	r3, [r7, #72]	; 0x48

        // STPKTRX is only available for version from 3_00a
        if ((doepint & DOEPINT_STPKTRX) && (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a)) {
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <handle_epout_irq+0x86>
 8007dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dd0:	4a46      	ldr	r2, [pc, #280]	; (8007eec <handle_epout_irq+0x194>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d903      	bls.n	8007dde <handle_epout_irq+0x86>
          clear_flag |= DOEPINT_STPKTRX;
 8007dd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48
        }

        epout->doepint = clear_flag;
 8007dde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de2:	609a      	str	r2, [r3, #8]
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8007dea:	4b41      	ldr	r3, [pc, #260]	; (8007ef0 <handle_epout_irq+0x198>)
 8007dec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007dee:	2301      	movs	r3, #1
 8007df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  dcd_event_handler(&event, in_isr);
}

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SETUP_RECEIVED };
 8007df4:	f107 0314 	add.w	r3, r7, #20
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]
 8007dfc:	605a      	str	r2, [r3, #4]
 8007dfe:	609a      	str	r2, [r3, #8]
 8007e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e04:	753b      	strb	r3, [r7, #20]
 8007e06:	2306      	movs	r3, #6
 8007e08:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	f107 0318 	add.w	r3, r7, #24
 8007e10:	6810      	ldr	r0, [r2, #0]
 8007e12:	6851      	ldr	r1, [r2, #4]
 8007e14:	c303      	stmia	r3!, {r0, r1}

  dcd_event_handler(&event, in_isr);
 8007e16:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8007e1a:	f107 0314 	add.w	r3, r7, #20
 8007e1e:	4611      	mov	r1, r2
 8007e20:	4618      	mov	r0, r3
 8007e22:	f7fd fff9 	bl	8005e18 <dcd_event_handler>
}
 8007e26:	bf00      	nop
        dcd_event_setup_received(rhport, (uint8_t*) _setup_packet, true);
      }

      // OUT XFER complete
      if (epout->doepint & DOEPINT_XFRC) {
 8007e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	f003 0301 	and.w	r3, r3, #1
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d048      	beq.n	8007ec6 <handle_epout_irq+0x16e>
        epout->doepint = DOEPINT_XFRC;
 8007e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e36:	2201      	movs	r2, #1
 8007e38:	609a      	str	r2, [r3, #8]

        xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_OUT);
 8007e3a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007e3e:	015b      	lsls	r3, r3, #5
 8007e40:	4a2c      	ldr	r2, [pc, #176]	; (8007ef4 <handle_epout_irq+0x19c>)
 8007e42:	4413      	add	r3, r2
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_OUT]) {
 8007e46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d10e      	bne.n	8007e6c <handle_epout_irq+0x114>
 8007e4e:	4b2a      	ldr	r3, [pc, #168]	; (8007ef8 <handle_epout_irq+0x1a0>)
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00a      	beq.n	8007e6c <handle_epout_irq+0x114>
          // Schedule another packet to be received.
          edpt_schedule_packets(rhport, n, TUSB_DIR_OUT, 1, ep0_pending[TUSB_DIR_OUT]);
 8007e56:	4b28      	ldr	r3, [pc, #160]	; (8007ef8 <handle_epout_irq+0x1a0>)
 8007e58:	881b      	ldrh	r3, [r3, #0]
 8007e5a:	f897 104f 	ldrb.w	r1, [r7, #79]	; 0x4f
 8007e5e:	79f8      	ldrb	r0, [r7, #7]
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	2301      	movs	r3, #1
 8007e64:	2200      	movs	r2, #0
 8007e66:	f7fe ff55 	bl	8006d14 <edpt_schedule_packets>
 8007e6a:	e02c      	b.n	8007ec6 <handle_epout_irq+0x16e>
        } else {
          dcd_event_xfer_complete(rhport, n, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e6e:	891b      	ldrh	r3, [r3, #8]
 8007e70:	461a      	mov	r2, r3
 8007e72:	79fb      	ldrb	r3, [r7, #7]
 8007e74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007e7c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007e80:	627a      	str	r2, [r7, #36]	; 0x24
 8007e82:	2300      	movs	r3, #0
 8007e84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007e88:	2301      	movs	r3, #1
 8007e8a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8007e8e:	f107 0308 	add.w	r3, r7, #8
 8007e92:	2200      	movs	r2, #0
 8007e94:	601a      	str	r2, [r3, #0]
 8007e96:	605a      	str	r2, [r3, #4]
 8007e98:	609a      	str	r2, [r3, #8]
 8007e9a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007e9e:	723b      	strb	r3, [r7, #8]
 8007ea0:	2307      	movs	r3, #7
 8007ea2:	727b      	strb	r3, [r7, #9]

  event.xfer_complete.ep_addr = ep_addr;
 8007ea4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007ea8:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8007eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eac:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8007eae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007eb2:	737b      	strb	r3, [r7, #13]

  dcd_event_handler(&event, in_isr);
 8007eb4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8007eb8:	f107 0308 	add.w	r3, r7, #8
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f7fd ffaa 	bl	8005e18 <dcd_event_handler>
}
 8007ec4:	bf00      	nop
  for (uint8_t n = 0; n < ep_count; n++) {
 8007ec6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8007eca:	3301      	adds	r3, #1
 8007ecc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8007ed0:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8007ed4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	f4ff af54 	bcc.w	8007d86 <handle_epout_irq+0x2e>
        }
      }
    }
  }
}
 8007ede:	bf00      	nop
 8007ee0:	bf00      	nop
 8007ee2:	3750      	adds	r7, #80	; 0x50
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	08008958 	.word	0x08008958
 8007eec:	4f543009 	.word	0x4f543009
 8007ef0:	200014f4 	.word	0x200014f4
 8007ef4:	200014fc 	.word	0x200014fc
 8007ef8:	2000157c 	.word	0x2000157c

08007efc <handle_epin_irq>:

static void handle_epin_irq(uint8_t rhport) {
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b094      	sub	sp, #80	; 0x50
 8007f00:	af02      	add	r7, sp, #8
 8007f02:	4603      	mov	r3, r0
 8007f04:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007f06:	79fb      	ldrb	r3, [r7, #7]
 8007f08:	4a88      	ldr	r2, [pc, #544]	; (800812c <handle_epin_irq+0x230>)
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	4413      	add	r3, r2
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	643b      	str	r3, [r7, #64]	; 0x40
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	4a85      	ldr	r2, [pc, #532]	; (800812c <handle_epin_irq+0x230>)
 8007f16:	011b      	lsls	r3, r3, #4
 8007f18:	4413      	add	r3, r2
 8007f1a:	3308      	adds	r3, #8
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  dwc2_epin_t* epin = dwc2->epin;
 8007f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f28:	63bb      	str	r3, [r7, #56]	; 0x38

  // DAINT for a given EP clears when DIEPINTx is cleared.
  // IEPINT will be cleared when DAINT's out bits are cleared.
  for (uint8_t n = 0; n < ep_count; n++) {
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007f30:	e0f0      	b.n	8008114 <handle_epin_irq+0x218>
    if (dwc2->daint & TU_BIT(DAINT_IEPINT_Pos + n)) {
 8007f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f34:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 8007f38:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8007f40:	f003 0301 	and.w	r3, r3, #1
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	f000 80e0 	beq.w	800810a <handle_epin_irq+0x20e>
      // IN XFER complete (entire xfer).
      xfer_ctl_t* xfer = XFER_CTL_BASE(n, TUSB_DIR_IN);
 8007f4a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f4e:	015b      	lsls	r3, r3, #5
 8007f50:	3310      	adds	r3, #16
 8007f52:	4a77      	ldr	r2, [pc, #476]	; (8008130 <handle_epin_irq+0x234>)
 8007f54:	4413      	add	r3, r2
 8007f56:	637b      	str	r3, [r7, #52]	; 0x34

      if (epin[n].diepint & DIEPINT_XFRC) {
 8007f58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f5c:	015b      	lsls	r3, r3, #5
 8007f5e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f60:	4413      	add	r3, r2
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f003 0301 	and.w	r3, r3, #1
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d046      	beq.n	8007ffa <handle_epin_irq+0xfe>
        epin[n].diepint = DIEPINT_XFRC;
 8007f6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f70:	015b      	lsls	r3, r3, #5
 8007f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f74:	4413      	add	r3, r2
 8007f76:	2201      	movs	r2, #1
 8007f78:	609a      	str	r2, [r3, #8]

        // EP0 can only handle one packet
        if ((n == 0) && ep0_pending[TUSB_DIR_IN]) {
 8007f7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d10e      	bne.n	8007fa0 <handle_epin_irq+0xa4>
 8007f82:	4b6c      	ldr	r3, [pc, #432]	; (8008134 <handle_epin_irq+0x238>)
 8007f84:	885b      	ldrh	r3, [r3, #2]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <handle_epin_irq+0xa4>
          // Schedule another packet to be transmitted.
          edpt_schedule_packets(rhport, n, TUSB_DIR_IN, 1, ep0_pending[TUSB_DIR_IN]);
 8007f8a:	4b6a      	ldr	r3, [pc, #424]	; (8008134 <handle_epin_irq+0x238>)
 8007f8c:	885b      	ldrh	r3, [r3, #2]
 8007f8e:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 8007f92:	79f8      	ldrb	r0, [r7, #7]
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	2301      	movs	r3, #1
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f7fe febb 	bl	8006d14 <edpt_schedule_packets>
 8007f9e:	e02c      	b.n	8007ffa <handle_epin_irq+0xfe>
        } else {
          dcd_event_xfer_complete(rhport, n | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8007fa0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fa4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007fa8:	b2d9      	uxtb	r1, r3
 8007faa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fac:	891b      	ldrh	r3, [r3, #8]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	79fb      	ldrb	r3, [r7, #7]
 8007fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007fbc:	623a      	str	r2, [r7, #32]
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	77fb      	strb	r3, [r7, #31]
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	77bb      	strb	r3, [r7, #30]
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_XFER_COMPLETE };
 8007fc6:	f107 030c 	add.w	r3, r7, #12
 8007fca:	2200      	movs	r2, #0
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	605a      	str	r2, [r3, #4]
 8007fd0:	609a      	str	r2, [r3, #8]
 8007fd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fd6:	733b      	strb	r3, [r7, #12]
 8007fd8:	2307      	movs	r3, #7
 8007fda:	737b      	strb	r3, [r7, #13]
  event.xfer_complete.ep_addr = ep_addr;
 8007fdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007fe0:	743b      	strb	r3, [r7, #16]
  event.xfer_complete.len     = xferred_bytes;
 8007fe2:	6a3b      	ldr	r3, [r7, #32]
 8007fe4:	617b      	str	r3, [r7, #20]
  event.xfer_complete.result  = result;
 8007fe6:	7ffb      	ldrb	r3, [r7, #31]
 8007fe8:	747b      	strb	r3, [r7, #17]
  dcd_event_handler(&event, in_isr);
 8007fea:	7fba      	ldrb	r2, [r7, #30]
 8007fec:	f107 030c 	add.w	r3, r7, #12
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f7fd ff10 	bl	8005e18 <dcd_event_handler>
}
 8007ff8:	bf00      	nop
        }
      }

      // XFER FIFO empty
      if ((epin[n].diepint & DIEPINT_TXFE) && (dwc2->diepempmsk & (1 << n))) {
 8007ffa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ffe:	015b      	lsls	r3, r3, #5
 8008000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008002:	4413      	add	r3, r2
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800800a:	2b00      	cmp	r3, #0
 800800c:	d07d      	beq.n	800810a <handle_epin_irq+0x20e>
 800800e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008010:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 8008014:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008018:	2101      	movs	r1, #1
 800801a:	fa01 f202 	lsl.w	r2, r1, r2
 800801e:	4013      	ands	r3, r2
 8008020:	2b00      	cmp	r3, #0
 8008022:	d072      	beq.n	800810a <handle_epin_irq+0x20e>
        // diepint's TXFE bit is read-only, software cannot clear it.
        // It will only be cleared by hardware when written bytes is more than
        // - 64 bytes or
        // - Half of TX FIFO size (configured by DIEPTXF)

        uint16_t remaining_packets = (epin[n].dieptsiz & DIEPTSIZ_PKTCNT_Msk) >> DIEPTSIZ_PKTCNT_Pos;
 8008024:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008028:	015b      	lsls	r3, r3, #5
 800802a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800802c:	4413      	add	r3, r2
 800802e:	691b      	ldr	r3, [r3, #16]
 8008030:	0cdb      	lsrs	r3, r3, #19
 8008032:	b29b      	uxth	r3, r3
 8008034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008038:	867b      	strh	r3, [r7, #50]	; 0x32

        // Process every single packet (only whole packets can be written to fifo)
        for (uint16_t i = 0; i < remaining_packets; i++) {
 800803a:	2300      	movs	r3, #0
 800803c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8008040:	e045      	b.n	80080ce <handle_epin_irq+0x1d2>
          uint16_t const remaining_bytes = (epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos;
 8008042:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008046:	015b      	lsls	r3, r3, #5
 8008048:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800804a:	4413      	add	r3, r2
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	863b      	strh	r3, [r7, #48]	; 0x30

          // Packet can not be larger than ep max size
          uint16_t const packet_size = tu_min16(remaining_bytes, xfer->max_size);
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	895a      	ldrh	r2, [r3, #10]
 8008054:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8008056:	83bb      	strh	r3, [r7, #28]
 8008058:	4613      	mov	r3, r2
 800805a:	837b      	strh	r3, [r7, #26]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800805c:	8bba      	ldrh	r2, [r7, #28]
 800805e:	8b7b      	ldrh	r3, [r7, #26]
 8008060:	4293      	cmp	r3, r2
 8008062:	bf28      	it	cs
 8008064:	4613      	movcs	r3, r2
 8008066:	b29b      	uxth	r3, r3
 8008068:	85fb      	strh	r3, [r7, #46]	; 0x2e

          // It's only possible to write full packets into FIFO. Therefore DTXFSTS register of current
          // EP has to be checked if the buffer can take another WHOLE packet
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 800806a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800806c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8008070:	015b      	lsls	r3, r3, #5
 8008072:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008074:	440b      	add	r3, r1
 8008076:	699b      	ldr	r3, [r3, #24]
 8008078:	0099      	lsls	r1, r3, #2
 800807a:	4b2f      	ldr	r3, [pc, #188]	; (8008138 <handle_epin_irq+0x23c>)
 800807c:	400b      	ands	r3, r1
 800807e:	429a      	cmp	r2, r3
 8008080:	d82b      	bhi.n	80080da <handle_epin_irq+0x1de>

          // Push packet to Tx-FIFO
          if (xfer->ff) {
 8008082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d00e      	beq.n	80080a8 <handle_epin_irq+0x1ac>
            volatile uint32_t* tx_fifo = dwc2->fifo[n];
 800808a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800808e:	3301      	adds	r3, #1
 8008090:	031b      	lsls	r3, r3, #12
 8008092:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008094:	4413      	add	r3, r2
 8008096:	62bb      	str	r3, [r7, #40]	; 0x28
            tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*) (uintptr_t) tx_fifo, packet_size);
 8008098:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800809e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080a0:	4618      	mov	r0, r3
 80080a2:	f7fc fe36 	bl	8004d12 <tu_fifo_read_n_const_addr_full_words>
 80080a6:	e00d      	b.n	80080c4 <handle_epin_irq+0x1c8>
          } else {
            write_fifo_packet(rhport, n, xfer->buffer, packet_size);
 80080a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080ae:	f897 1047 	ldrb.w	r1, [r7, #71]	; 0x47
 80080b2:	79f8      	ldrb	r0, [r7, #7]
 80080b4:	f7ff fd2c 	bl	8007b10 <write_fifo_packet>

            // Increment pointer to xfer data
            xfer->buffer += packet_size;
 80080b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080be:	441a      	add	r2, r3
 80080c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080c2:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < remaining_packets; i++) {
 80080c4:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80080c8:	3301      	adds	r3, #1
 80080ca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80080ce:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80080d2:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80080d4:	429a      	cmp	r2, r3
 80080d6:	d3b4      	bcc.n	8008042 <handle_epin_irq+0x146>
 80080d8:	e000      	b.n	80080dc <handle_epin_irq+0x1e0>
          if (packet_size > ((epin[n].dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) break;
 80080da:	bf00      	nop
          }
        }

        // Turn off TXFE if all bytes are written.
        if (((epin[n].dieptsiz & DIEPTSIZ_XFRSIZ_Msk) >> DIEPTSIZ_XFRSIZ_Pos) == 0) {
 80080dc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080e0:	015b      	lsls	r3, r3, #5
 80080e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080e4:	4413      	add	r3, r2
 80080e6:	691b      	ldr	r3, [r3, #16]
 80080e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d10c      	bne.n	800810a <handle_epin_irq+0x20e>
          dwc2->diepempmsk &= ~(1 << n);
 80080f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080f2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	; 0x834
 80080f6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 80080fa:	2101      	movs	r1, #1
 80080fc:	fa01 f202 	lsl.w	r2, r1, r2
 8008100:	43d2      	mvns	r2, r2
 8008102:	401a      	ands	r2, r3
 8008104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008106:	f8c3 2834 	str.w	r2, [r3, #2100]	; 0x834
  for (uint8_t n = 0; n < ep_count; n++) {
 800810a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800810e:	3301      	adds	r3, #1
 8008110:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8008114:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8008118:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800811c:	429a      	cmp	r2, r3
 800811e:	f4ff af08 	bcc.w	8007f32 <handle_epin_irq+0x36>
        }
      }
    }
  }
}
 8008122:	bf00      	nop
 8008124:	bf00      	nop
 8008126:	3748      	adds	r7, #72	; 0x48
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}
 800812c:	08008958 	.word	0x08008958
 8008130:	200014fc 	.word	0x200014fc
 8008134:	2000157c 	.word	0x2000157c
 8008138:	0003fffc 	.word	0x0003fffc

0800813c <dcd_int_handler>:

void dcd_int_handler(uint8_t rhport) {
 800813c:	b580      	push	{r7, lr}
 800813e:	b0a0      	sub	sp, #128	; 0x80
 8008140:	af00      	add	r7, sp, #0
 8008142:	4603      	mov	r3, r0
 8008144:	71fb      	strb	r3, [r7, #7]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	4ab7      	ldr	r2, [pc, #732]	; (8008428 <dcd_int_handler+0x2ec>)
 800814a:	011b      	lsls	r3, r3, #4
 800814c:	4413      	add	r3, r2
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	67bb      	str	r3, [r7, #120]	; 0x78

  uint32_t const int_mask = dwc2->gintmsk;
 8008152:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008154:	699b      	ldr	r3, [r3, #24]
 8008156:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t const int_status = dwc2->gintsts & int_mask;
 8008158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800815a:	695b      	ldr	r3, [r3, #20]
 800815c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800815e:	4013      	ands	r3, r2
 8008160:	673b      	str	r3, [r7, #112]	; 0x70

  if (int_status & GINTSTS_USBRST) {
 8008162:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008168:	2b00      	cmp	r3, #0
 800816a:	d007      	beq.n	800817c <dcd_int_handler+0x40>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800816c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800816e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008172:	615a      	str	r2, [r3, #20]
    bus_reset(rhport);
 8008174:	79fb      	ldrb	r3, [r7, #7]
 8008176:	4618      	mov	r0, r3
 8008178:	f7fe fd42 	bl	8006c00 <bus_reset>
  }

  if (int_status & GINTSTS_ENUMDNE) {
 800817c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800817e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008182:	2b00      	cmp	r3, #0
 8008184:	d03e      	beq.n	8008204 <dcd_int_handler+0xc8>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8008186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008188:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800818c:	615a      	str	r2, [r3, #20]

    tusb_speed_t speed;
    switch ((dwc2->dsts & DSTS_ENUMSPD_Msk) >> DSTS_ENUMSPD_Pos) {
 800818e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008190:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 8008194:	085b      	lsrs	r3, r3, #1
 8008196:	f003 0303 	and.w	r3, r3, #3
 800819a:	2b00      	cmp	r3, #0
 800819c:	d002      	beq.n	80081a4 <dcd_int_handler+0x68>
 800819e:	2b02      	cmp	r3, #2
 80081a0:	d004      	beq.n	80081ac <dcd_int_handler+0x70>
 80081a2:	e007      	b.n	80081b4 <dcd_int_handler+0x78>
      case DSTS_ENUMSPD_HS:
        speed = TUSB_SPEED_HIGH;
 80081a4:	2302      	movs	r3, #2
 80081a6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 80081aa:	e007      	b.n	80081bc <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_LS:
        speed = TUSB_SPEED_LOW;
 80081ac:	2301      	movs	r3, #1
 80081ae:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 80081b2:	e003      	b.n	80081bc <dcd_int_handler+0x80>

      case DSTS_ENUMSPD_FS_HSPHY:
      case DSTS_ENUMSPD_FS:
      default:
        speed = TUSB_SPEED_FULL;
 80081b4:	2300      	movs	r3, #0
 80081b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
        break;
 80081ba:	bf00      	nop
 80081bc:	79fb      	ldrb	r3, [r7, #7]
 80081be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80081c2:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80081c6:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 80081ca:	2301      	movs	r3, #1
 80081cc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_BUS_RESET };
 80081d0:	f107 0320 	add.w	r3, r7, #32
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80081e0:	f887 3020 	strb.w	r3, [r7, #32]
 80081e4:	2301      	movs	r3, #1
 80081e6:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  event.bus_reset.speed = speed;
 80081ea:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 80081ee:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dcd_event_handler(&event, in_isr);
 80081f2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 80081f6:	f107 0320 	add.w	r3, r7, #32
 80081fa:	4611      	mov	r1, r2
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7fd fe0b 	bl	8005e18 <dcd_event_handler>
}
 8008202:	bf00      	nop
    // TODO must update GUSBCFG_TRDT according to link speed

    dcd_event_bus_reset(rhport, speed, true);
  }

  if (int_status & GINTSTS_USBSUSP) {
 8008204:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800820a:	2b00      	cmp	r3, #0
 800820c:	d023      	beq.n	8008256 <dcd_int_handler+0x11a>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800820e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008214:	615a      	str	r2, [r3, #20]
 8008216:	79fb      	ldrb	r3, [r7, #7]
 8008218:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 800821c:	2304      	movs	r3, #4
 800821e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
 8008222:	2301      	movs	r3, #1
 8008224:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008228:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
 8008230:	605a      	str	r2, [r3, #4]
 8008232:	609a      	str	r2, [r3, #8]
 8008234:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8008238:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 800823c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8008240:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dcd_event_handler(&event, in_isr);
 8008244:	f897 2062 	ldrb.w	r2, [r7, #98]	; 0x62
 8008248:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800824c:	4611      	mov	r1, r2
 800824e:	4618      	mov	r0, r3
 8008250:	f7fd fde2 	bl	8005e18 <dcd_event_handler>
}
 8008254:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (int_status & GINTSTS_WKUINT) {
 8008256:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008258:	2b00      	cmp	r3, #0
 800825a:	da23      	bge.n	80082a4 <dcd_int_handler+0x168>
    dwc2->gintsts = GINTSTS_WKUINT;
 800825c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800825e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008262:	615a      	str	r2, [r3, #20]
 8008264:	79fb      	ldrb	r3, [r7, #7]
 8008266:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 800826a:	2305      	movs	r3, #5
 800826c:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8008270:	2301      	movs	r3, #1
 8008272:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008276:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]
 800827e:	605a      	str	r2, [r3, #4]
 8008280:	609a      	str	r2, [r3, #8]
 8008282:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8008286:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
 800828a:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 800828e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  dcd_event_handler(&event, in_isr);
 8008292:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 8008296:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800829a:	4611      	mov	r1, r2
 800829c:	4618      	mov	r0, r3
 800829e:	f7fd fdbb 	bl	8005e18 <dcd_event_handler>
}
 80082a2:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (int_status & GINTSTS_OTGINT) {
 80082a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a6:	f003 0304 	and.w	r3, r3, #4
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d028      	beq.n	8008300 <dcd_int_handler+0x1c4>
    // OTG INT bit is read-only
    uint32_t const otg_int = dwc2->gotgint;
 80082ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082b0:	685b      	ldr	r3, [r3, #4]
 80082b2:	66fb      	str	r3, [r7, #108]	; 0x6c

    if (otg_int & GOTGINT_SEDET) {
 80082b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b6:	f003 0304 	and.w	r3, r3, #4
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d01d      	beq.n	80082fa <dcd_int_handler+0x1be>
 80082be:	79fb      	ldrb	r3, [r7, #7]
 80082c0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80082c4:	2302      	movs	r3, #2
 80082c6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80082ca:	2301      	movs	r3, #1
 80082cc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 80082d0:	f107 0314 	add.w	r3, r7, #20
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	609a      	str	r2, [r3, #8]
 80082dc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80082e0:	753b      	strb	r3, [r7, #20]
 80082e2:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80082e6:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 80082e8:	f897 205c 	ldrb.w	r2, [r7, #92]	; 0x5c
 80082ec:	f107 0314 	add.w	r3, r7, #20
 80082f0:	4611      	mov	r1, r2
 80082f2:	4618      	mov	r0, r3
 80082f4:	f7fd fd90 	bl	8005e18 <dcd_event_handler>
}
 80082f8:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 80082fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082fe:	605a      	str	r2, [r3, #4]
  }

  if (int_status & GINTSTS_SOF) {
 8008300:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d051      	beq.n	80083ae <dcd_int_handler+0x272>
    dwc2->gotgint = GINTSTS_SOF;
 800830a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800830c:	2208      	movs	r2, #8
 800830e:	605a      	str	r2, [r3, #4]

    if (_sof_en) {
 8008310:	4b46      	ldr	r3, [pc, #280]	; (800842c <dcd_int_handler+0x2f0>)
 8008312:	781b      	ldrb	r3, [r3, #0]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d024      	beq.n	8008362 <dcd_int_handler+0x226>
      uint32_t frame = (dwc2->dsts & (DSTS_FNSOF)) >> 8;
 8008318:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800831a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	; 0x808
 800831e:	0a1b      	lsrs	r3, r3, #8
 8008320:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008324:	66bb      	str	r3, [r7, #104]	; 0x68
 8008326:	79fb      	ldrb	r3, [r7, #7]
 8008328:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 800832c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800832e:	657b      	str	r3, [r7, #84]	; 0x54
 8008330:	2301      	movs	r3, #1
 8008332:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event = { .rhport = rhport, .event_id = DCD_EVENT_SOF };
 8008336:	f107 0308 	add.w	r3, r7, #8
 800833a:	2200      	movs	r2, #0
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	605a      	str	r2, [r3, #4]
 8008340:	609a      	str	r2, [r3, #8]
 8008342:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8008346:	723b      	strb	r3, [r7, #8]
 8008348:	2303      	movs	r3, #3
 800834a:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800834c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800834e:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 8008350:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8008354:	f107 0308 	add.w	r3, r7, #8
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7fd fd5c 	bl	8005e18 <dcd_event_handler>
}
 8008360:	e005      	b.n	800836e <dcd_int_handler+0x232>
      dcd_event_sof(rhport, frame, true);
    } else {
      // Disable SOF interrupt if SOF was not explicitly enabled. SOF was used for remote wakeup detection
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8008362:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f023 0208 	bic.w	r2, r3, #8
 800836a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800836c:	619a      	str	r2, [r3, #24]
 800836e:	79fb      	ldrb	r3, [r7, #7]
 8008370:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8008374:	2303      	movs	r3, #3
 8008376:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 800837a:	2301      	movs	r3, #1
 800837c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  dcd_event_t event = { .rhport = rhport, .event_id = eid };
 8008380:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008384:	2200      	movs	r2, #0
 8008386:	601a      	str	r2, [r3, #0]
 8008388:	605a      	str	r2, [r3, #4]
 800838a:	609a      	str	r2, [r3, #8]
 800838c:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8008390:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8008394:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8008398:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  dcd_event_handler(&event, in_isr);
 800839c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 80083a0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80083a4:	4611      	mov	r1, r2
 80083a6:	4618      	mov	r0, r3
 80083a8:	f7fd fd36 	bl	8005e18 <dcd_event_handler>
}
 80083ac:	bf00      	nop

    dcd_event_bus_signal(rhport, DCD_EVENT_SOF, true);
  }

  // RxFIFO non-empty interrupt handling.
  if (int_status & GINTSTS_RXFLVL) {
 80083ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083b0:	f003 0310 	and.w	r3, r3, #16
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d020      	beq.n	80083fa <dcd_int_handler+0x2be>
    // RXFLVL bit is read-only

    // Mask out RXFLVL while reading data from FIFO
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM;
 80083b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	f023 0210 	bic.w	r2, r3, #16
 80083c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083c2:	619a      	str	r2, [r3, #24]

    // Loop until all available packets were handled
    do {
      handle_rxflvl_irq(rhport);
 80083c4:	79fb      	ldrb	r3, [r7, #7]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f7ff fbf8 	bl	8007bbc <handle_rxflvl_irq>
    } while (dwc2->gotgint & GINTSTS_RXFLVL);
 80083cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083ce:	685b      	ldr	r3, [r3, #4]
 80083d0:	f003 0310 	and.w	r3, r3, #16
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d1f5      	bne.n	80083c4 <dcd_int_handler+0x288>

    // Manage RX FIFO size
    if (_out_ep_closed) {
 80083d8:	4b15      	ldr	r3, [pc, #84]	; (8008430 <dcd_int_handler+0x2f4>)
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <dcd_int_handler+0x2b2>
      update_grxfsiz(rhport);
 80083e0:	79fb      	ldrb	r3, [r7, #7]
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fe fbca 	bl	8006b7c <update_grxfsiz>

      // Disable flag
      _out_ep_closed = false;
 80083e8:	4b11      	ldr	r3, [pc, #68]	; (8008430 <dcd_int_handler+0x2f4>)
 80083ea:	2200      	movs	r2, #0
 80083ec:	701a      	strb	r2, [r3, #0]
    }

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80083ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f0:	699b      	ldr	r3, [r3, #24]
 80083f2:	f043 0210 	orr.w	r2, r3, #16
 80083f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80083f8:	619a      	str	r2, [r3, #24]
  }

  // OUT endpoint interrupt handling.
  if (int_status & GINTSTS_OEPINT) {
 80083fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d003      	beq.n	800840c <dcd_int_handler+0x2d0>
    // OEPINT is read-only, clear using DOEPINTn
    handle_epout_irq(rhport);
 8008404:	79fb      	ldrb	r3, [r7, #7]
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fca6 	bl	8007d58 <handle_epout_irq>
  }

  // IN endpoint interrupt handling.
  if (int_status & GINTSTS_IEPINT) {
 800840c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800840e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d003      	beq.n	800841e <dcd_int_handler+0x2e2>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_epin_irq(rhport);
 8008416:	79fb      	ldrb	r3, [r7, #7]
 8008418:	4618      	mov	r0, r3
 800841a:	f7ff fd6f 	bl	8007efc <handle_epin_irq>
  //  // Check for Incomplete isochronous IN transfer
  //  if(int_status & GINTSTS_IISOIXFR) {
  //    printf("      IISOIXFR!\r\n");
  ////    TU_LOG(DWC2_DEBUG, "      IISOIXFR!\r\n");
  //  }
}
 800841e:	bf00      	nop
 8008420:	3780      	adds	r7, #128	; 0x80
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	08008958 	.word	0x08008958
 800842c:	20001583 	.word	0x20001583
 8008430:	20001582 	.word	0x20001582

08008434 <tu_edpt_claim>:
//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex)
{
 8008434:	b480      	push	{r7}
 8008436:	b085      	sub	sp, #20
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
 800843c:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	781b      	ldrb	r3, [r3, #0]
 8008442:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <tu_edpt_claim+0x26>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d001      	beq.n	800845e <tu_edpt_claim+0x2a>
 800845a:	2300      	movs	r3, #0
 800845c:	e01e      	b.n	800849c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008466:	b2db      	uxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	d108      	bne.n	800847e <tu_edpt_claim+0x4a>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	781b      	ldrb	r3, [r3, #0]
 8008470:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <tu_edpt_claim+0x4a>
 800847a:	2301      	movs	r3, #1
 800847c:	e000      	b.n	8008480 <tu_edpt_claim+0x4c>
 800847e:	2300      	movs	r3, #0
 8008480:	73fb      	strb	r3, [r7, #15]
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	73fb      	strb	r3, [r7, #15]
  if (available)
 800848a:	7bfb      	ldrb	r3, [r7, #15]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d004      	beq.n	800849a <tu_edpt_claim+0x66>
  {
    ep_state->claimed = 1;
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	7813      	ldrb	r3, [r2, #0]
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);

  return available;
 800849a:	7bfb      	ldrb	r3, [r7, #15]
}
 800849c:	4618      	mov	r0, r3
 800849e:	3714      	adds	r7, #20
 80084a0:	46bd      	mov	sp, r7
 80084a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a6:	4770      	bx	lr

080084a8 <tu_edpt_validate>:

  return ret;
}

bool tu_edpt_validate(tusb_desc_endpoint_t const * desc_ep, tusb_speed_t speed)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b08b      	sub	sp, #44	; 0x2c
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	70fb      	strb	r3, [r7, #3]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep)
{
  return tu_le16toh(desc_ep->wMaxPacketSize) & TU_GENMASK(10, 0);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	889b      	ldrh	r3, [r3, #4]
 80084bc:	b29b      	uxth	r3, r3
 80084be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80084c2:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 80084c4:	84fb      	strh	r3, [r7, #38]	; 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	78db      	ldrb	r3, [r3, #3]
 80084ca:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b03      	cmp	r3, #3
 80084d2:	d03e      	beq.n	8008552 <tu_edpt_validate+0xaa>
 80084d4:	2b03      	cmp	r3, #3
 80084d6:	dc53      	bgt.n	8008580 <tu_edpt_validate+0xd8>
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d002      	beq.n	80084e2 <tu_edpt_validate+0x3a>
 80084dc:	2b02      	cmp	r3, #2
 80084de:	d018      	beq.n	8008512 <tu_edpt_validate+0x6a>
 80084e0:	e04e      	b.n	8008580 <tu_edpt_validate+0xd8>
  {
    case TUSB_XFER_ISOCHRONOUS:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 80084e2:	78fb      	ldrb	r3, [r7, #3]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d102      	bne.n	80084ee <tu_edpt_validate+0x46>
 80084e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ec:	e001      	b.n	80084f2 <tu_edpt_validate+0x4a>
 80084ee:	f240 33ff 	movw	r3, #1023	; 0x3ff
 80084f2:	82fb      	strh	r3, [r7, #22]
      TU_ASSERT(max_packet_size <= spec_size);
 80084f4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80084f6:	8afb      	ldrh	r3, [r7, #22]
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d943      	bls.n	8008584 <tu_edpt_validate+0xdc>
 80084fc:	4b27      	ldr	r3, [pc, #156]	; (800859c <tu_edpt_validate+0xf4>)
 80084fe:	613b      	str	r3, [r7, #16]
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f003 0301 	and.w	r3, r3, #1
 8008508:	2b00      	cmp	r3, #0
 800850a:	d000      	beq.n	800850e <tu_edpt_validate+0x66>
 800850c:	be00      	bkpt	0x0000
 800850e:	2300      	movs	r3, #0
 8008510:	e03e      	b.n	8008590 <tu_edpt_validate+0xe8>
    }
    break;

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH)
 8008512:	78fb      	ldrb	r3, [r7, #3]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d10e      	bne.n	8008536 <tu_edpt_validate+0x8e>
      {
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8008518:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800851a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800851e:	d033      	beq.n	8008588 <tu_edpt_validate+0xe0>
 8008520:	4b1e      	ldr	r3, [pc, #120]	; (800859c <tu_edpt_validate+0xf4>)
 8008522:	61bb      	str	r3, [r7, #24]
 8008524:	69bb      	ldr	r3, [r7, #24]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	2b00      	cmp	r3, #0
 800852e:	d000      	beq.n	8008532 <tu_edpt_validate+0x8a>
 8008530:	be00      	bkpt	0x0000
 8008532:	2300      	movs	r3, #0
 8008534:	e02c      	b.n	8008590 <tu_edpt_validate+0xe8>
      }else
      {
        // TODO Bulk fullspeed can only be 8, 16, 32, 64
        TU_ASSERT(max_packet_size <= 64);
 8008536:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8008538:	2b40      	cmp	r3, #64	; 0x40
 800853a:	d925      	bls.n	8008588 <tu_edpt_validate+0xe0>
 800853c:	4b17      	ldr	r3, [pc, #92]	; (800859c <tu_edpt_validate+0xf4>)
 800853e:	61fb      	str	r3, [r7, #28]
 8008540:	69fb      	ldr	r3, [r7, #28]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0301 	and.w	r3, r3, #1
 8008548:	2b00      	cmp	r3, #0
 800854a:	d000      	beq.n	800854e <tu_edpt_validate+0xa6>
 800854c:	be00      	bkpt	0x0000
 800854e:	2300      	movs	r3, #0
 8008550:	e01e      	b.n	8008590 <tu_edpt_validate+0xe8>
      }
    break;

    case TUSB_XFER_INTERRUPT:
    {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8008552:	78fb      	ldrb	r3, [r7, #3]
 8008554:	2b02      	cmp	r3, #2
 8008556:	d102      	bne.n	800855e <tu_edpt_validate+0xb6>
 8008558:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800855c:	e000      	b.n	8008560 <tu_edpt_validate+0xb8>
 800855e:	2340      	movs	r3, #64	; 0x40
 8008560:	84bb      	strh	r3, [r7, #36]	; 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8008562:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8008564:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008566:	429a      	cmp	r2, r3
 8008568:	d910      	bls.n	800858c <tu_edpt_validate+0xe4>
 800856a:	4b0c      	ldr	r3, [pc, #48]	; (800859c <tu_edpt_validate+0xf4>)
 800856c:	623b      	str	r3, [r7, #32]
 800856e:	6a3b      	ldr	r3, [r7, #32]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0301 	and.w	r3, r3, #1
 8008576:	2b00      	cmp	r3, #0
 8008578:	d000      	beq.n	800857c <tu_edpt_validate+0xd4>
 800857a:	be00      	bkpt	0x0000
 800857c:	2300      	movs	r3, #0
 800857e:	e007      	b.n	8008590 <tu_edpt_validate+0xe8>
    }
    break;

    default: return false;
 8008580:	2300      	movs	r3, #0
 8008582:	e005      	b.n	8008590 <tu_edpt_validate+0xe8>
    break;
 8008584:	bf00      	nop
 8008586:	e002      	b.n	800858e <tu_edpt_validate+0xe6>
    break;
 8008588:	bf00      	nop
 800858a:	e000      	b.n	800858e <tu_edpt_validate+0xe6>
    break;
 800858c:	bf00      	nop
  }

  return true;
 800858e:	2301      	movs	r3, #1
}
 8008590:	4618      	mov	r0, r3
 8008592:	372c      	adds	r7, #44	; 0x2c
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	e000edf0 	.word	0xe000edf0

080085a0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len, uint8_t driver_id)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b08d      	sub	sp, #52	; 0x34
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	4611      	mov	r1, r2
 80085ac:	461a      	mov	r2, r3
 80085ae:	460b      	mov	r3, r1
 80085b0:	80fb      	strh	r3, [r7, #6]
 80085b2:	4613      	mov	r3, r2
 80085b4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 80085ba:	88fb      	ldrh	r3, [r7, #6]
 80085bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085be:	4413      	add	r3, r2
 80085c0:	62bb      	str	r3, [r7, #40]	; 0x28

  while( p_desc < desc_end )
 80085c2:	e027      	b.n	8008614 <tu_edpt_bind_driver+0x74>
 80085c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c6:	623b      	str	r3, [r7, #32]
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc)
{
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80085c8:	6a3b      	ldr	r3, [r7, #32]
 80085ca:	3301      	adds	r3, #1
 80085cc:	781b      	ldrb	r3, [r3, #0]
  {
    if ( TUSB_DESC_ENDPOINT == tu_desc_type(p_desc) )
 80085ce:	2b05      	cmp	r3, #5
 80085d0:	d116      	bne.n	8008600 <tu_edpt_bind_driver+0x60>
    {
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 80085d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085d4:	789b      	ldrb	r3, [r3, #2]
 80085d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80085da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80085de:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80085e0:	7fbb      	ldrb	r3, [r7, #30]
 80085e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80085e6:	b2db      	uxtb	r3, r3

      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 80085e8:	005b      	lsls	r3, r3, #1
 80085ea:	68fa      	ldr	r2, [r7, #12]
 80085ec:	4413      	add	r3, r2
 80085ee:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80085f2:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80085f4:	7ffa      	ldrb	r2, [r7, #31]
 80085f6:	09d2      	lsrs	r2, r2, #7
 80085f8:	b2d2      	uxtb	r2, r2
 80085fa:	4611      	mov	r1, r2
 80085fc:	797a      	ldrb	r2, [r7, #5]
 80085fe:	545a      	strb	r2, [r3, r1]
 8008600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008602:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 8008612:	62fb      	str	r3, [r7, #44]	; 0x2c
  while( p_desc < desc_end )
 8008614:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008618:	429a      	cmp	r2, r3
 800861a:	d3d3      	bcc.n	80085c4 <tu_edpt_bind_driver+0x24>
  }
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	3734      	adds	r7, #52	; 0x34
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <memset>:
 800862a:	4402      	add	r2, r0
 800862c:	4603      	mov	r3, r0
 800862e:	4293      	cmp	r3, r2
 8008630:	d100      	bne.n	8008634 <memset+0xa>
 8008632:	4770      	bx	lr
 8008634:	f803 1b01 	strb.w	r1, [r3], #1
 8008638:	e7f9      	b.n	800862e <memset+0x4>
	...

0800863c <__libc_init_array>:
 800863c:	b570      	push	{r4, r5, r6, lr}
 800863e:	4d0d      	ldr	r5, [pc, #52]	; (8008674 <__libc_init_array+0x38>)
 8008640:	4c0d      	ldr	r4, [pc, #52]	; (8008678 <__libc_init_array+0x3c>)
 8008642:	1b64      	subs	r4, r4, r5
 8008644:	10a4      	asrs	r4, r4, #2
 8008646:	2600      	movs	r6, #0
 8008648:	42a6      	cmp	r6, r4
 800864a:	d109      	bne.n	8008660 <__libc_init_array+0x24>
 800864c:	4d0b      	ldr	r5, [pc, #44]	; (800867c <__libc_init_array+0x40>)
 800864e:	4c0c      	ldr	r4, [pc, #48]	; (8008680 <__libc_init_array+0x44>)
 8008650:	f000 f826 	bl	80086a0 <_init>
 8008654:	1b64      	subs	r4, r4, r5
 8008656:	10a4      	asrs	r4, r4, #2
 8008658:	2600      	movs	r6, #0
 800865a:	42a6      	cmp	r6, r4
 800865c:	d105      	bne.n	800866a <__libc_init_array+0x2e>
 800865e:	bd70      	pop	{r4, r5, r6, pc}
 8008660:	f855 3b04 	ldr.w	r3, [r5], #4
 8008664:	4798      	blx	r3
 8008666:	3601      	adds	r6, #1
 8008668:	e7ee      	b.n	8008648 <__libc_init_array+0xc>
 800866a:	f855 3b04 	ldr.w	r3, [r5], #4
 800866e:	4798      	blx	r3
 8008670:	3601      	adds	r6, #1
 8008672:	e7f2      	b.n	800865a <__libc_init_array+0x1e>
 8008674:	08008970 	.word	0x08008970
 8008678:	08008970 	.word	0x08008970
 800867c:	08008970 	.word	0x08008970
 8008680:	08008974 	.word	0x08008974

08008684 <memcpy>:
 8008684:	440a      	add	r2, r1
 8008686:	4291      	cmp	r1, r2
 8008688:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800868c:	d100      	bne.n	8008690 <memcpy+0xc>
 800868e:	4770      	bx	lr
 8008690:	b510      	push	{r4, lr}
 8008692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008696:	f803 4f01 	strb.w	r4, [r3, #1]!
 800869a:	4291      	cmp	r1, r2
 800869c:	d1f9      	bne.n	8008692 <memcpy+0xe>
 800869e:	bd10      	pop	{r4, pc}

080086a0 <_init>:
 80086a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a2:	bf00      	nop
 80086a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086a6:	bc08      	pop	{r3}
 80086a8:	469e      	mov	lr, r3
 80086aa:	4770      	bx	lr

080086ac <_fini>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr
